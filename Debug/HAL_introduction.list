
HAL_introduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d8  080056d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080056d8  080056d8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056d8  080056d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080056e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08005748  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005748  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086eb  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271c  00000000  00000000  000287bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d2  00000000  00000000  0002b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cdca  00000000  00000000  0002c13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a3a  00000000  00000000  00048f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d2c4  00000000  00000000  0005c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003198  00000000  00000000  000f9c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000fcd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08005440 	.word	0x08005440

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08005440 	.word	0x08005440

0800014c <main>:
void WAIT_TO_SCAN_AGAIN();
void ConvertFlashValue(uint32_t flashAddress, uint8_t *resultArray);
//----------------------------------------------------

int main()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    // Initialization
    initializeHardware();
 8000150:	f000 fbde 	bl	8000910 <initializeHardware>
    // UID Master Setup
    while (Flash_Read_2Byte(MASTER_STATUS_ADDRESS))
 8000154:	e001      	b.n	800015a <main+0xe>
    {
        UID_Master_Setup();
 8000156:	f000 f843 	bl	80001e0 <UID_Master_Setup>
    while (Flash_Read_2Byte(MASTER_STATUS_ADDRESS))
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <main+0x24>)
 800015c:	f003 fa2f 	bl	80035be <Flash_Read_2Byte>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d1f7      	bne.n	8000156 <main+0xa>
    }
    handleSecurityCard();
 8000166:	f000 fbe9 	bl	800093c <handleSecurityCard>
 800016a:	2300      	movs	r3, #0
}
 800016c:	4618      	mov	r0, r3
 800016e:	bd80      	pop	{r7, pc}
 8000170:	08007c00 	.word	0x08007c00

08000174 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 800017e:	88fb      	ldrh	r3, [r7, #6]
 8000180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000184:	d003      	beq.n	800018e <HAL_GPIO_EXTI_Callback+0x1a>
 8000186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800018a:	d00b      	beq.n	80001a4 <HAL_GPIO_EXTI_Callback+0x30>
        DownInterrupt = true;
        if (menu2_status)
            menu2_status = false;
        EXTI->IMR &= ~(1UL << 13);
    }
}
 800018c:	e01a      	b.n	80001c4 <HAL_GPIO_EXTI_Callback+0x50>
        EnterInterupt = true;
 800018e:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000190:	2201      	movs	r2, #1
 8000192:	701a      	strb	r2, [r3, #0]
        EXTI->IMR &= ~(1UL << 12);
 8000194:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x60>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x60>)
 800019a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800019e:	6013      	str	r3, [r2, #0]
        break;
 80001a0:	bf00      	nop
}
 80001a2:	e00f      	b.n	80001c4 <HAL_GPIO_EXTI_Callback+0x50>
        DownInterrupt = true;
 80001a4:	4b0c      	ldr	r3, [pc, #48]	; (80001d8 <HAL_GPIO_EXTI_Callback+0x64>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	701a      	strb	r2, [r3, #0]
        if (menu2_status)
 80001aa:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <HAL_GPIO_EXTI_Callback+0x68>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d002      	beq.n	80001b8 <HAL_GPIO_EXTI_Callback+0x44>
            menu2_status = false;
 80001b2:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <HAL_GPIO_EXTI_Callback+0x68>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	701a      	strb	r2, [r3, #0]
        EXTI->IMR &= ~(1UL << 13);
 80001b8:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a05      	ldr	r2, [pc, #20]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80001be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	20000094 	.word	0x20000094
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000093 	.word	0x20000093
 80001dc:	20000097 	.word	0x20000097

080001e0 <UID_Master_Setup>:

void UID_Master_Setup(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
    Flash_Erase(MASTER_STATUS_ADDRESS); // Free up page storing MASTER_STATUS
 80001e4:	4817      	ldr	r0, [pc, #92]	; (8000244 <UID_Master_Setup+0x64>)
 80001e6:	f003 f993 	bl	8003510 <Flash_Erase>
    Flash_Erase(UID_MASTER_ADDRESS);    // Free up page storing MASTER_STATUS
 80001ea:	4817      	ldr	r0, [pc, #92]	; (8000248 <UID_Master_Setup+0x68>)
 80001ec:	f003 f990 	bl	8003510 <Flash_Erase>
    Flash_Erase(UID_NUM_ADDRESS);       // Free up page storing num_uids
 80001f0:	4816      	ldr	r0, [pc, #88]	; (800024c <UID_Master_Setup+0x6c>)
 80001f2:	f003 f98d 	bl	8003510 <Flash_Erase>
    Master_Setup_Display();
 80001f6:	f000 fd41 	bl	8000c7c <Master_Setup_Display>
    if (rc522_checkCard(uid))
 80001fa:	4815      	ldr	r0, [pc, #84]	; (8000250 <UID_Master_Setup+0x70>)
 80001fc:	f003 fc8d 	bl	8003b1a <rc522_checkCard>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d01b      	beq.n	800023e <UID_Master_Setup+0x5e>
    {
        STATUS_OK();
 8000206:	f000 fb4f 	bl	80008a8 <STATUS_OK>
        master_setup = false;
 800020a:	4b12      	ldr	r3, [pc, #72]	; (8000254 <UID_Master_Setup+0x74>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
        Flash_Write_2Byte(MASTER_STATUS_ADDRESS, master_setup);                                   // Store status master
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <UID_Master_Setup+0x74>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	b29b      	uxth	r3, r3
 8000216:	4619      	mov	r1, r3
 8000218:	480a      	ldr	r0, [pc, #40]	; (8000244 <UID_Master_Setup+0x64>)
 800021a:	f003 f995 	bl	8003548 <Flash_Write_2Byte>
        Flash_Write_2Byte(UID_NUM_ADDRESS, num_uids);                                             // Store num_uids
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <UID_Master_Setup+0x78>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	b29b      	uxth	r3, r3
 8000224:	4619      	mov	r1, r3
 8000226:	4809      	ldr	r0, [pc, #36]	; (800024c <UID_Master_Setup+0x6c>)
 8000228:	f003 f98e 	bl	8003548 <Flash_Write_2Byte>
        Flash_Write_Array(UID_MASTER_ADDRESS, (uint8_t *)uid, (UID_byte - 2) * sizeof(uint16_t)); // Store master uid
 800022c:	2204      	movs	r2, #4
 800022e:	4908      	ldr	r1, [pc, #32]	; (8000250 <UID_Master_Setup+0x70>)
 8000230:	4805      	ldr	r0, [pc, #20]	; (8000248 <UID_Master_Setup+0x68>)
 8000232:	f003 f9a1 	bl	8003578 <Flash_Write_Array>
        HAL_Delay(500);
 8000236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800023a:	f000 fd8d 	bl	8000d58 <HAL_Delay>
    }
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	08007c00 	.word	0x08007c00
 8000248:	08008000 	.word	0x08008000
 800024c:	08008400 	.word	0x08008400
 8000250:	20000084 	.word	0x20000084
 8000254:	20000095 	.word	0x20000095
 8000258:	20000092 	.word	0x20000092

0800025c <Main_Display>:
void Main_Display(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
    dem = 0;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <Main_Display+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
    Clear();
 8000266:	f003 fb8c 	bl	8003982 <Clear>
    SetCursor(0, 0);
 800026a:	2100      	movs	r1, #0
 800026c:	2000      	movs	r0, #0
 800026e:	f003 fb39 	bl	80038e4 <SetCursor>
    WriteString("***SCAN YOUR***");
 8000272:	480e      	ldr	r0, [pc, #56]	; (80002ac <Main_Display+0x50>)
 8000274:	f003 fb70 	bl	8003958 <WriteString>
    SetCursor(6, 1);
 8000278:	2101      	movs	r1, #1
 800027a:	2006      	movs	r0, #6
 800027c:	f003 fb32 	bl	80038e4 <SetCursor>
    WriteString("CARD");
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <Main_Display+0x54>)
 8000282:	f003 fb69 	bl	8003958 <WriteString>
    menu1_status = false;
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <Main_Display+0x58>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
    menu2_status = false;
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <Main_Display+0x5c>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
    count_spam = 0;
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <Main_Display+0x60>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, LOCK);
 8000298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800029c:	4808      	ldr	r0, [pc, #32]	; (80002c0 <Main_Display+0x64>)
 800029e:	f001 f9fb 	bl	8001698 <HAL_GPIO_TogglePin>
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000091 	.word	0x20000091
 80002ac:	08005458 	.word	0x08005458
 80002b0:	08005468 	.word	0x08005468
 80002b4:	20000096 	.word	0x20000096
 80002b8:	20000097 	.word	0x20000097
 80002bc:	20000090 	.word	0x20000090
 80002c0:	40010800 	.word	0x40010800

080002c4 <Menu1>:
void Menu1(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
    switch (dem)
 80002c8:	4b2a      	ldr	r3, [pc, #168]	; (8000374 <Menu1+0xb0>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	d84e      	bhi.n	8000370 <Menu1+0xac>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <Menu1+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002e9 	.word	0x080002e9
 80002dc:	0800030b 	.word	0x0800030b
 80002e0:	0800032d 	.word	0x0800032d
 80002e4:	0800034f 	.word	0x0800034f
    {
    case 1:
        Clear();
 80002e8:	f003 fb4b 	bl	8003982 <Clear>
        SetCursor(0, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	2000      	movs	r0, #0
 80002f0:	f003 faf8 	bl	80038e4 <SetCursor>
        WriteString(">BACK");
 80002f4:	4820      	ldr	r0, [pc, #128]	; (8000378 <Menu1+0xb4>)
 80002f6:	f003 fb2f 	bl	8003958 <WriteString>
        SetCursor(0, 1);
 80002fa:	2101      	movs	r1, #1
 80002fc:	2000      	movs	r0, #0
 80002fe:	f003 faf1 	bl	80038e4 <SetCursor>
        WriteString(" ADD NEW CARD");
 8000302:	481e      	ldr	r0, [pc, #120]	; (800037c <Menu1+0xb8>)
 8000304:	f003 fb28 	bl	8003958 <WriteString>
        break;
 8000308:	e032      	b.n	8000370 <Menu1+0xac>
    case 2:
        Clear();
 800030a:	f003 fb3a 	bl	8003982 <Clear>
        SetCursor(0, 0);
 800030e:	2100      	movs	r1, #0
 8000310:	2000      	movs	r0, #0
 8000312:	f003 fae7 	bl	80038e4 <SetCursor>
        WriteString(" BACK");
 8000316:	481a      	ldr	r0, [pc, #104]	; (8000380 <Menu1+0xbc>)
 8000318:	f003 fb1e 	bl	8003958 <WriteString>
        SetCursor(0, 1);
 800031c:	2101      	movs	r1, #1
 800031e:	2000      	movs	r0, #0
 8000320:	f003 fae0 	bl	80038e4 <SetCursor>
        WriteString(">ADD NEW CARD");
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <Menu1+0xc0>)
 8000326:	f003 fb17 	bl	8003958 <WriteString>
        break;
 800032a:	e021      	b.n	8000370 <Menu1+0xac>
    case 3:
        Clear();
 800032c:	f003 fb29 	bl	8003982 <Clear>
        SetCursor(0, 0);
 8000330:	2100      	movs	r1, #0
 8000332:	2000      	movs	r0, #0
 8000334:	f003 fad6 	bl	80038e4 <SetCursor>
        WriteString(">DELETE 1 CARD");
 8000338:	4813      	ldr	r0, [pc, #76]	; (8000388 <Menu1+0xc4>)
 800033a:	f003 fb0d 	bl	8003958 <WriteString>
        SetCursor(0, 1);
 800033e:	2101      	movs	r1, #1
 8000340:	2000      	movs	r0, #0
 8000342:	f003 facf 	bl	80038e4 <SetCursor>
        WriteString(" DELETE ALL CARD");
 8000346:	4811      	ldr	r0, [pc, #68]	; (800038c <Menu1+0xc8>)
 8000348:	f003 fb06 	bl	8003958 <WriteString>
        break;
 800034c:	e010      	b.n	8000370 <Menu1+0xac>
    case 4:
        Clear();
 800034e:	f003 fb18 	bl	8003982 <Clear>
        SetCursor(0, 0);
 8000352:	2100      	movs	r1, #0
 8000354:	2000      	movs	r0, #0
 8000356:	f003 fac5 	bl	80038e4 <SetCursor>
        WriteString(" DELETE 1 CARD");
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <Menu1+0xcc>)
 800035c:	f003 fafc 	bl	8003958 <WriteString>
        SetCursor(0, 1);
 8000360:	2101      	movs	r1, #1
 8000362:	2000      	movs	r0, #0
 8000364:	f003 fabe 	bl	80038e4 <SetCursor>
        WriteString(">DELETE ALL CARD");
 8000368:	480a      	ldr	r0, [pc, #40]	; (8000394 <Menu1+0xd0>)
 800036a:	f003 faf5 	bl	8003958 <WriteString>
        break;
 800036e:	bf00      	nop
    }
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000091 	.word	0x20000091
 8000378:	08005470 	.word	0x08005470
 800037c:	08005478 	.word	0x08005478
 8000380:	08005488 	.word	0x08005488
 8000384:	08005490 	.word	0x08005490
 8000388:	080054a0 	.word	0x080054a0
 800038c:	080054b0 	.word	0x080054b0
 8000390:	080054c4 	.word	0x080054c4
 8000394:	080054d4 	.word	0x080054d4

08000398 <Menu2>:
void Menu2(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
    switch (dem)
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <Menu2+0x40>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	3b01      	subs	r3, #1
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d816      	bhi.n	80003d4 <Menu2+0x3c>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <Menu2+0x14>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003c3 	.word	0x080003c3
 80003b4:	080003c9 	.word	0x080003c9
 80003b8:	080003cf 	.word	0x080003cf
    {
    case 1:
        Main_Display();
 80003bc:	f7ff ff4e 	bl	800025c <Main_Display>
        break;
 80003c0:	e008      	b.n	80003d4 <Menu2+0x3c>
    case 2:
        Add_New_Card();
 80003c2:	f000 f80b 	bl	80003dc <Add_New_Card>
        break;
 80003c6:	e005      	b.n	80003d4 <Menu2+0x3c>
    case 3:
        Del_1_Card();
 80003c8:	f000 f90a 	bl	80005e0 <Del_1_Card>
        break;
 80003cc:	e002      	b.n	80003d4 <Menu2+0x3c>
    case 4:
        Del_All_Card();
 80003ce:	f000 fa0b 	bl	80007e8 <Del_All_Card>
        break;
 80003d2:	bf00      	nop
    }
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000091 	.word	0x20000091

080003dc <Add_New_Card>:
void Add_New_Card(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
    ConvertFlashValue(UID_MASTER_ADDRESS, uidMasterArray);
 80003e2:	496e      	ldr	r1, [pc, #440]	; (800059c <Add_New_Card+0x1c0>)
 80003e4:	486e      	ldr	r0, [pc, #440]	; (80005a0 <Add_New_Card+0x1c4>)
 80003e6:	f000 fc27 	bl	8000c38 <ConvertFlashValue>
    EXTI->IMR |= (1UL << 12);
 80003ea:	4b6e      	ldr	r3, [pc, #440]	; (80005a4 <Add_New_Card+0x1c8>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a6d      	ldr	r2, [pc, #436]	; (80005a4 <Add_New_Card+0x1c8>)
 80003f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f4:	6013      	str	r3, [r2, #0]
BACK1:
    Clear();
 80003f6:	f003 fac4 	bl	8003982 <Clear>
    HAL_Delay(10);
 80003fa:	200a      	movs	r0, #10
 80003fc:	f000 fcac 	bl	8000d58 <HAL_Delay>
    SetCursor(1, 0);
 8000400:	2100      	movs	r1, #0
 8000402:	2001      	movs	r0, #1
 8000404:	f003 fa6e 	bl	80038e4 <SetCursor>
    WriteString("ADD YOUR NEW");
 8000408:	4867      	ldr	r0, [pc, #412]	; (80005a8 <Add_New_Card+0x1cc>)
 800040a:	f003 faa5 	bl	8003958 <WriteString>
    SetCursor(1, 1);
 800040e:	2101      	movs	r1, #1
 8000410:	2001      	movs	r0, #1
 8000412:	f003 fa67 	bl	80038e4 <SetCursor>
    WriteString("SECURITY CARD");
 8000416:	4865      	ldr	r0, [pc, #404]	; (80005ac <Add_New_Card+0x1d0>)
 8000418:	f003 fa9e 	bl	8003958 <WriteString>
    while (menu2_status)
 800041c:	e0af      	b.n	800057e <Add_New_Card+0x1a2>
    { // CHECK CARD IS EXIST OR NOT
        bool duplicate = false;
 800041e:	2300      	movs	r3, #0
 8000420:	71fb      	strb	r3, [r7, #7]
        if (rc522_checkCard(uid))
 8000422:	4863      	ldr	r0, [pc, #396]	; (80005b0 <Add_New_Card+0x1d4>)
 8000424:	f003 fb79 	bl	8003b1a <rc522_checkCard>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	f000 80a7 	beq.w	800057e <Add_New_Card+0x1a2>
        {
            if (memcmp(uidMasterArray, uid, UID_byte) == 0) // Compare with uid master
 8000430:	2204      	movs	r2, #4
 8000432:	495f      	ldr	r1, [pc, #380]	; (80005b0 <Add_New_Card+0x1d4>)
 8000434:	4859      	ldr	r0, [pc, #356]	; (800059c <Add_New_Card+0x1c0>)
 8000436:	f004 f873 	bl	8004520 <memcmp>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d016      	beq.n	800046e <Add_New_Card+0x92>
                goto HERE1;
            for (int i = 0; i < num_uids; ++i)
 8000440:	2300      	movs	r3, #0
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	e02e      	b.n	80004a4 <Add_New_Card+0xc8>
            {
                ConvertFlashValue(UID_START_ADDRESS + 0x400 * i, resultArray1);
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800044c:	3322      	adds	r3, #34	; 0x22
 800044e:	029b      	lsls	r3, r3, #10
 8000450:	4958      	ldr	r1, [pc, #352]	; (80005b4 <Add_New_Card+0x1d8>)
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fbf0 	bl	8000c38 <ConvertFlashValue>
                if ((memcmp(resultArray1, uid, UID_byte) == 0))
 8000458:	2204      	movs	r2, #4
 800045a:	4955      	ldr	r1, [pc, #340]	; (80005b0 <Add_New_Card+0x1d4>)
 800045c:	4855      	ldr	r0, [pc, #340]	; (80005b4 <Add_New_Card+0x1d8>)
 800045e:	f004 f85f 	bl	8004520 <memcmp>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d11a      	bne.n	800049e <Add_New_Card+0xc2>
                {
                    duplicate = true;
 8000468:	2301      	movs	r3, #1
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	e000      	b.n	8000470 <Add_New_Card+0x94>
                goto HERE1;
 800046e:	bf00      	nop
                HERE1:
                    STATUS_NOT_OK();
 8000470:	f000 fa34 	bl	80008dc <STATUS_NOT_OK>
                    Clear();
 8000474:	f003 fa85 	bl	8003982 <Clear>
                    SetCursor(2, 0);
 8000478:	2100      	movs	r1, #0
 800047a:	2002      	movs	r0, #2
 800047c:	f003 fa32 	bl	80038e4 <SetCursor>
                    WriteString("CARD ALREADY");
 8000480:	484d      	ldr	r0, [pc, #308]	; (80005b8 <Add_New_Card+0x1dc>)
 8000482:	f003 fa69 	bl	8003958 <WriteString>
                    SetCursor(2, 1);
 8000486:	2101      	movs	r1, #1
 8000488:	2002      	movs	r0, #2
 800048a:	f003 fa2b 	bl	80038e4 <SetCursor>
                    WriteString("EXISTS !!!");
 800048e:	484b      	ldr	r0, [pc, #300]	; (80005bc <Add_New_Card+0x1e0>)
 8000490:	f003 fa62 	bl	8003958 <WriteString>
                    HAL_Delay(1000);
 8000494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000498:	f000 fc5e 	bl	8000d58 <HAL_Delay>
                    break;
 800049c:	e008      	b.n	80004b0 <Add_New_Card+0xd4>
            for (int i = 0; i < num_uids; ++i)
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	3301      	adds	r3, #1
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	4b46      	ldr	r3, [pc, #280]	; (80005c0 <Add_New_Card+0x1e4>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	4293      	cmp	r3, r2
 80004ae:	dbca      	blt.n	8000446 <Add_New_Card+0x6a>
                }
            }
            if (!duplicate && num_uids < MAX_UIDS && (memcmp(uidMasterArray, uid, UID_byte) != 0))
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	f083 0301 	eor.w	r3, r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d03d      	beq.n	8000538 <Add_New_Card+0x15c>
 80004bc:	4b40      	ldr	r3, [pc, #256]	; (80005c0 <Add_New_Card+0x1e4>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d839      	bhi.n	8000538 <Add_New_Card+0x15c>
 80004c4:	2204      	movs	r2, #4
 80004c6:	493a      	ldr	r1, [pc, #232]	; (80005b0 <Add_New_Card+0x1d4>)
 80004c8:	4834      	ldr	r0, [pc, #208]	; (800059c <Add_New_Card+0x1c0>)
 80004ca:	f004 f829 	bl	8004520 <memcmp>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d031      	beq.n	8000538 <Add_New_Card+0x15c>
            {
                // Save uid to array
                STATUS_OK();
 80004d4:	f000 f9e8 	bl	80008a8 <STATUS_OK>
                Clear();
 80004d8:	f003 fa53 	bl	8003982 <Clear>
                SetCursor(1, 0);
 80004dc:	2100      	movs	r1, #0
 80004de:	2001      	movs	r0, #1
 80004e0:	f003 fa00 	bl	80038e4 <SetCursor>
                WriteString("CARD IS ADDED");
 80004e4:	4837      	ldr	r0, [pc, #220]	; (80005c4 <Add_New_Card+0x1e8>)
 80004e6:	f003 fa37 	bl	8003958 <WriteString>
                SetCursor(2, 1);
 80004ea:	2101      	movs	r1, #1
 80004ec:	2002      	movs	r0, #2
 80004ee:	f003 f9f9 	bl	80038e4 <SetCursor>
                WriteString("SUCCESFULLY");
 80004f2:	4835      	ldr	r0, [pc, #212]	; (80005c8 <Add_New_Card+0x1ec>)
 80004f4:	f003 fa30 	bl	8003958 <WriteString>
                HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 fc2c 	bl	8000d58 <HAL_Delay>
                Flash_Write_Array(UID_START_ADDRESS + 0x400 * num_uids, (uint8_t *)uid, (UID_byte - 2) * sizeof(uint16_t));
 8000500:	4b2f      	ldr	r3, [pc, #188]	; (80005c0 <Add_New_Card+0x1e4>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000508:	3322      	adds	r3, #34	; 0x22
 800050a:	029b      	lsls	r3, r3, #10
 800050c:	2204      	movs	r2, #4
 800050e:	4928      	ldr	r1, [pc, #160]	; (80005b0 <Add_New_Card+0x1d4>)
 8000510:	4618      	mov	r0, r3
 8000512:	f003 f831 	bl	8003578 <Flash_Write_Array>
                ++num_uids;
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <Add_New_Card+0x1e4>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <Add_New_Card+0x1e4>)
 8000520:	701a      	strb	r2, [r3, #0]
                Flash_Erase(UID_NUM_ADDRESS);
 8000522:	482a      	ldr	r0, [pc, #168]	; (80005cc <Add_New_Card+0x1f0>)
 8000524:	f002 fff4 	bl	8003510 <Flash_Erase>
                Flash_Write_2Byte(UID_NUM_ADDRESS, num_uids);
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <Add_New_Card+0x1e4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b29b      	uxth	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	4826      	ldr	r0, [pc, #152]	; (80005cc <Add_New_Card+0x1f0>)
 8000532:	f003 f809 	bl	8003548 <Flash_Write_2Byte>
 8000536:	e021      	b.n	800057c <Add_New_Card+0x1a0>
            }
            else if (!duplicate && num_uids == MAX_UIDS)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f083 0301 	eor.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	f43f af58 	beq.w	80003f6 <Add_New_Card+0x1a>
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <Add_New_Card+0x1e4>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b03      	cmp	r3, #3
 800054c:	f47f af53 	bne.w	80003f6 <Add_New_Card+0x1a>
            {
                STATUS_NOT_OK();
 8000550:	f000 f9c4 	bl	80008dc <STATUS_NOT_OK>
                Clear();
 8000554:	f003 fa15 	bl	8003982 <Clear>
                SetCursor(0, 0);
 8000558:	2100      	movs	r1, #0
 800055a:	2000      	movs	r0, #0
 800055c:	f003 f9c2 	bl	80038e4 <SetCursor>
                WriteString("THE SECURITY");
 8000560:	481b      	ldr	r0, [pc, #108]	; (80005d0 <Add_New_Card+0x1f4>)
 8000562:	f003 f9f9 	bl	8003958 <WriteString>
                SetCursor(0, 1);
 8000566:	2101      	movs	r1, #1
 8000568:	2000      	movs	r0, #0
 800056a:	f003 f9bb 	bl	80038e4 <SetCursor>
                WriteString("CARD LIST IS FULL");
 800056e:	4819      	ldr	r0, [pc, #100]	; (80005d4 <Add_New_Card+0x1f8>)
 8000570:	f003 f9f2 	bl	8003958 <WriteString>
                HAL_Delay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f000 fbee 	bl	8000d58 <HAL_Delay>
            }
            goto BACK1;
 800057c:	e73b      	b.n	80003f6 <Add_New_Card+0x1a>
    while (menu2_status)
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <Add_New_Card+0x1fc>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	f47f af4b 	bne.w	800041e <Add_New_Card+0x42>
        }
    }
    menu2_status = true;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <Add_New_Card+0x1fc>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
    EnterInterupt = false;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <Add_New_Card+0x200>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	08008000 	.word	0x08008000
 80005a4:	40010400 	.word	0x40010400
 80005a8:	080054e8 	.word	0x080054e8
 80005ac:	080054f8 	.word	0x080054f8
 80005b0:	20000084 	.word	0x20000084
 80005b4:	20000088 	.word	0x20000088
 80005b8:	08005508 	.word	0x08005508
 80005bc:	08005518 	.word	0x08005518
 80005c0:	20000092 	.word	0x20000092
 80005c4:	08005524 	.word	0x08005524
 80005c8:	08005534 	.word	0x08005534
 80005cc:	08008400 	.word	0x08008400
 80005d0:	08005540 	.word	0x08005540
 80005d4:	08005550 	.word	0x08005550
 80005d8:	20000097 	.word	0x20000097
 80005dc:	20000094 	.word	0x20000094

080005e0 <Del_1_Card>:
void Del_1_Card(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
    ConvertFlashValue(UID_MASTER_ADDRESS, uidMasterArray);
 80005e6:	4970      	ldr	r1, [pc, #448]	; (80007a8 <Del_1_Card+0x1c8>)
 80005e8:	4870      	ldr	r0, [pc, #448]	; (80007ac <Del_1_Card+0x1cc>)
 80005ea:	f000 fb25 	bl	8000c38 <ConvertFlashValue>
    EXTI->IMR |= (1UL << 12);
 80005ee:	4b70      	ldr	r3, [pc, #448]	; (80007b0 <Del_1_Card+0x1d0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a6f      	ldr	r2, [pc, #444]	; (80007b0 <Del_1_Card+0x1d0>)
 80005f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f8:	6013      	str	r3, [r2, #0]
    int index_delete;
BACK2:
    Clear();
 80005fa:	f003 f9c2 	bl	8003982 <Clear>
    HAL_Delay(10);
 80005fe:	200a      	movs	r0, #10
 8000600:	f000 fbaa 	bl	8000d58 <HAL_Delay>
    SetCursor(1, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f003 f96c 	bl	80038e4 <SetCursor>
    WriteString("SCAN YOUR CARD");
 800060c:	4869      	ldr	r0, [pc, #420]	; (80007b4 <Del_1_Card+0x1d4>)
 800060e:	f003 f9a3 	bl	8003958 <WriteString>
    bool card_exist = false;
 8000612:	2300      	movs	r3, #0
 8000614:	72fb      	strb	r3, [r7, #11]
    while (menu2_status)
 8000616:	e0b7      	b.n	8000788 <Del_1_Card+0x1a8>
    {
        if (rc522_checkCard(uid))
 8000618:	4867      	ldr	r0, [pc, #412]	; (80007b8 <Del_1_Card+0x1d8>)
 800061a:	f003 fa7e 	bl	8003b1a <rc522_checkCard>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	f000 80b1 	beq.w	8000788 <Del_1_Card+0x1a8>
        {
            if ((memcmp(uidMasterArray, uid, UID_byte) == 0))
 8000626:	2204      	movs	r2, #4
 8000628:	4963      	ldr	r1, [pc, #396]	; (80007b8 <Del_1_Card+0x1d8>)
 800062a:	485f      	ldr	r0, [pc, #380]	; (80007a8 <Del_1_Card+0x1c8>)
 800062c:	f003 ff78 	bl	8004520 <memcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d116      	bne.n	8000664 <Del_1_Card+0x84>
            {
                STATUS_NOT_OK();
 8000636:	f000 f951 	bl	80008dc <STATUS_NOT_OK>
                Clear();
 800063a:	f003 f9a2 	bl	8003982 <Clear>
                SetCursor(0, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	2000      	movs	r0, #0
 8000642:	f003 f94f 	bl	80038e4 <SetCursor>
                WriteString("MASTER CARD CAN");
 8000646:	485d      	ldr	r0, [pc, #372]	; (80007bc <Del_1_Card+0x1dc>)
 8000648:	f003 f986 	bl	8003958 <WriteString>
                SetCursor(0, 1);
 800064c:	2101      	movs	r1, #1
 800064e:	2000      	movs	r0, #0
 8000650:	f003 f948 	bl	80038e4 <SetCursor>
                WriteString("NOT BE DELETED");
 8000654:	485a      	ldr	r0, [pc, #360]	; (80007c0 <Del_1_Card+0x1e0>)
 8000656:	f003 f97f 	bl	8003958 <WriteString>
                HAL_Delay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065e:	f000 fb7b 	bl	8000d58 <HAL_Delay>
 8000662:	e7ca      	b.n	80005fa <Del_1_Card+0x1a>
            }
            else
            {
                for (int i = 0; i < num_uids; ++i)
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	e018      	b.n	800069c <Del_1_Card+0xbc>
                {
                    ConvertFlashValue(UID_START_ADDRESS + 0x400 * i, resultArray1);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000670:	3322      	adds	r3, #34	; 0x22
 8000672:	029b      	lsls	r3, r3, #10
 8000674:	4953      	ldr	r1, [pc, #332]	; (80007c4 <Del_1_Card+0x1e4>)
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fade 	bl	8000c38 <ConvertFlashValue>
                    if (memcmp(resultArray1, uid, UID_byte) == 0)
 800067c:	2204      	movs	r2, #4
 800067e:	494e      	ldr	r1, [pc, #312]	; (80007b8 <Del_1_Card+0x1d8>)
 8000680:	4850      	ldr	r0, [pc, #320]	; (80007c4 <Del_1_Card+0x1e4>)
 8000682:	f003 ff4d 	bl	8004520 <memcmp>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d104      	bne.n	8000696 <Del_1_Card+0xb6>
                    {
                        index_delete = i;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	60fb      	str	r3, [r7, #12]
                        card_exist = true;
 8000690:	2301      	movs	r3, #1
 8000692:	72fb      	strb	r3, [r7, #11]
                        break;
 8000694:	e008      	b.n	80006a8 <Del_1_Card+0xc8>
                for (int i = 0; i < num_uids; ++i)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b4a      	ldr	r3, [pc, #296]	; (80007c8 <Del_1_Card+0x1e8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4293      	cmp	r3, r2
 80006a6:	dbe0      	blt.n	800066a <Del_1_Card+0x8a>
                    }
                }
                if (card_exist)
 80006a8:	7afb      	ldrb	r3, [r7, #11]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d055      	beq.n	800075a <Del_1_Card+0x17a>
                {
                    for (int i = index_delete; i < num_uids - 1; ++i)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	e025      	b.n	8000700 <Del_1_Card+0x120>
                    {
                        ConvertFlashValue(UID_START_ADDRESS + 0x400 * (i + 1), resultArray1);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006ba:	3323      	adds	r3, #35	; 0x23
 80006bc:	029b      	lsls	r3, r3, #10
 80006be:	4941      	ldr	r1, [pc, #260]	; (80007c4 <Del_1_Card+0x1e4>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fab9 	bl	8000c38 <ConvertFlashValue>
                        Flash_Erase(UID_START_ADDRESS + 0x400 * (i + 1));
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006cc:	3323      	adds	r3, #35	; 0x23
 80006ce:	029b      	lsls	r3, r3, #10
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 ff1d 	bl	8003510 <Flash_Erase>
                        Flash_Erase(UID_START_ADDRESS + 0x400 * i);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006dc:	3322      	adds	r3, #34	; 0x22
 80006de:	029b      	lsls	r3, r3, #10
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 ff15 	bl	8003510 <Flash_Erase>
                        Flash_Write_Array(UID_START_ADDRESS + 0x400 * i, (uint8_t *)resultArray1, (UID_byte - 2) * sizeof(uint16_t));
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006ec:	3322      	adds	r3, #34	; 0x22
 80006ee:	029b      	lsls	r3, r3, #10
 80006f0:	2204      	movs	r2, #4
 80006f2:	4934      	ldr	r1, [pc, #208]	; (80007c4 <Del_1_Card+0x1e4>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 ff3f 	bl	8003578 <Flash_Write_Array>
                    for (int i = index_delete; i < num_uids - 1; ++i)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <Del_1_Card+0x1e8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbd3      	blt.n	80006b4 <Del_1_Card+0xd4>
                    }
                    STATUS_OK();
 800070c:	f000 f8cc 	bl	80008a8 <STATUS_OK>
                    Clear();
 8000710:	f003 f937 	bl	8003982 <Clear>
                    SetCursor(2, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2002      	movs	r0, #2
 8000718:	f003 f8e4 	bl	80038e4 <SetCursor>
                    WriteString("YOUR CARD IS");
 800071c:	482b      	ldr	r0, [pc, #172]	; (80007cc <Del_1_Card+0x1ec>)
 800071e:	f003 f91b 	bl	8003958 <WriteString>
                    SetCursor(2, 1);
 8000722:	2101      	movs	r1, #1
 8000724:	2002      	movs	r0, #2
 8000726:	f003 f8dd 	bl	80038e4 <SetCursor>
                    WriteString("DELETED");
 800072a:	4829      	ldr	r0, [pc, #164]	; (80007d0 <Del_1_Card+0x1f0>)
 800072c:	f003 f914 	bl	8003958 <WriteString>
                    HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 fb10 	bl	8000d58 <HAL_Delay>
                    --num_uids;
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <Del_1_Card+0x1e8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <Del_1_Card+0x1e8>)
 8000742:	701a      	strb	r2, [r3, #0]
                    Flash_Erase(UID_NUM_ADDRESS);
 8000744:	4823      	ldr	r0, [pc, #140]	; (80007d4 <Del_1_Card+0x1f4>)
 8000746:	f002 fee3 	bl	8003510 <Flash_Erase>
                    Flash_Write_2Byte(UID_NUM_ADDRESS, num_uids); // Update num_uids for flash
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <Del_1_Card+0x1e8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	4820      	ldr	r0, [pc, #128]	; (80007d4 <Del_1_Card+0x1f4>)
 8000754:	f002 fef8 	bl	8003548 <Flash_Write_2Byte>
 8000758:	e74f      	b.n	80005fa <Del_1_Card+0x1a>
                }
                else
                {
                    STATUS_NOT_OK();
 800075a:	f000 f8bf 	bl	80008dc <STATUS_NOT_OK>
                    Clear();
 800075e:	f003 f910 	bl	8003982 <Clear>
                    SetCursor(1, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f003 f8bd 	bl	80038e4 <SetCursor>
                    WriteString("SECURITY CARD");
 800076a:	481b      	ldr	r0, [pc, #108]	; (80007d8 <Del_1_Card+0x1f8>)
 800076c:	f003 f8f4 	bl	8003958 <WriteString>
                    SetCursor(1, 1);
 8000770:	2101      	movs	r1, #1
 8000772:	2001      	movs	r0, #1
 8000774:	f003 f8b6 	bl	80038e4 <SetCursor>
                    WriteString("IS NOT EXIST");
 8000778:	4818      	ldr	r0, [pc, #96]	; (80007dc <Del_1_Card+0x1fc>)
 800077a:	f003 f8ed 	bl	8003958 <WriteString>
                    HAL_Delay(1000);
 800077e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000782:	f000 fae9 	bl	8000d58 <HAL_Delay>
                }
            }
            goto BACK2;
 8000786:	e738      	b.n	80005fa <Del_1_Card+0x1a>
    while (menu2_status)
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <Del_1_Card+0x200>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	f47f af43 	bne.w	8000618 <Del_1_Card+0x38>
        }
    }
    menu2_status = true;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <Del_1_Card+0x200>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
    EnterInterupt = false;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <Del_1_Card+0x204>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	08008000 	.word	0x08008000
 80007b0:	40010400 	.word	0x40010400
 80007b4:	08005564 	.word	0x08005564
 80007b8:	20000084 	.word	0x20000084
 80007bc:	08005574 	.word	0x08005574
 80007c0:	08005584 	.word	0x08005584
 80007c4:	20000088 	.word	0x20000088
 80007c8:	20000092 	.word	0x20000092
 80007cc:	08005594 	.word	0x08005594
 80007d0:	080055a4 	.word	0x080055a4
 80007d4:	08008400 	.word	0x08008400
 80007d8:	080054f8 	.word	0x080054f8
 80007dc:	080055ac 	.word	0x080055ac
 80007e0:	20000097 	.word	0x20000097
 80007e4:	20000094 	.word	0x20000094

080007e8 <Del_All_Card>:
void Del_All_Card(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
    if (num_uids == 0)
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <Del_All_Card+0xac>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d116      	bne.n	8000824 <Del_All_Card+0x3c>
    {
        STATUS_NOT_OK();
 80007f6:	f000 f871 	bl	80008dc <STATUS_NOT_OK>
        Clear();
 80007fa:	f003 f8c2 	bl	8003982 <Clear>
        SetCursor(1, 0);
 80007fe:	2100      	movs	r1, #0
 8000800:	2001      	movs	r0, #1
 8000802:	f003 f86f 	bl	80038e4 <SetCursor>
        WriteString("THERE IS NO");
 8000806:	4824      	ldr	r0, [pc, #144]	; (8000898 <Del_All_Card+0xb0>)
 8000808:	f003 f8a6 	bl	8003958 <WriteString>
        SetCursor(1, 1);
 800080c:	2101      	movs	r1, #1
 800080e:	2001      	movs	r0, #1
 8000810:	f003 f868 	bl	80038e4 <SetCursor>
        WriteString("SECURITY CARDS");
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <Del_All_Card+0xb4>)
 8000816:	f003 f89f 	bl	8003958 <WriteString>
        HAL_Delay(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081e:	f000 fa9b 	bl	8000d58 <HAL_Delay>
        WriteString("SECURITY CARDS");
        SetCursor(1, 1);
        WriteString("ARE DELETED");
        HAL_Delay(1000);
    }
}
 8000822:	e033      	b.n	800088c <Del_All_Card+0xa4>
        for (int i = 0; i < num_uids; ++i)
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	e00a      	b.n	8000840 <Del_All_Card+0x58>
            Flash_Erase(UID_START_ADDRESS + 0x400 * i);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000830:	3322      	adds	r3, #34	; 0x22
 8000832:	029b      	lsls	r3, r3, #10
 8000834:	4618      	mov	r0, r3
 8000836:	f002 fe6b 	bl	8003510 <Flash_Erase>
        for (int i = 0; i < num_uids; ++i)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <Del_All_Card+0xac>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4293      	cmp	r3, r2
 800084a:	dbee      	blt.n	800082a <Del_All_Card+0x42>
        num_uids = 0;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <Del_All_Card+0xac>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
        Flash_Write_2Byte(UID_NUM_ADDRESS, num_uids);
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <Del_All_Card+0xac>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <Del_All_Card+0xb8>)
 800085c:	f002 fe74 	bl	8003548 <Flash_Write_2Byte>
        STATUS_OK();
 8000860:	f000 f822 	bl	80008a8 <STATUS_OK>
        Clear();
 8000864:	f003 f88d 	bl	8003982 <Clear>
        SetCursor(1, 0);
 8000868:	2100      	movs	r1, #0
 800086a:	2001      	movs	r0, #1
 800086c:	f003 f83a 	bl	80038e4 <SetCursor>
        WriteString("SECURITY CARDS");
 8000870:	480a      	ldr	r0, [pc, #40]	; (800089c <Del_All_Card+0xb4>)
 8000872:	f003 f871 	bl	8003958 <WriteString>
        SetCursor(1, 1);
 8000876:	2101      	movs	r1, #1
 8000878:	2001      	movs	r0, #1
 800087a:	f003 f833 	bl	80038e4 <SetCursor>
        WriteString("ARE DELETED");
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <Del_All_Card+0xbc>)
 8000880:	f003 f86a 	bl	8003958 <WriteString>
        HAL_Delay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fa66 	bl	8000d58 <HAL_Delay>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000092 	.word	0x20000092
 8000898:	080055bc 	.word	0x080055bc
 800089c:	080055c8 	.word	0x080055c8
 80008a0:	08008400 	.word	0x08008400
 80008a4:	080055d8 	.word	0x080055d8

080008a8 <STATUS_OK>:
void STATUS_OK(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOA, GREENLED);
 80008ac:	2102      	movs	r1, #2
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <STATUS_OK+0x30>)
 80008b0:	f000 fef2 	bl	8001698 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOA, BUZZER);
 80008b4:	2104      	movs	r1, #4
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <STATUS_OK+0x30>)
 80008b8:	f000 feee 	bl	8001698 <HAL_GPIO_TogglePin>
    HAL_Delay(400);
 80008bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008c0:	f000 fa4a 	bl	8000d58 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GREENLED);
 80008c4:	2102      	movs	r1, #2
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <STATUS_OK+0x30>)
 80008c8:	f000 fee6 	bl	8001698 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOA, BUZZER);
 80008cc:	2104      	movs	r1, #4
 80008ce:	4802      	ldr	r0, [pc, #8]	; (80008d8 <STATUS_OK+0x30>)
 80008d0:	f000 fee2 	bl	8001698 <HAL_GPIO_TogglePin>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40010800 	.word	0x40010800

080008dc <STATUS_NOT_OK>:
void STATUS_NOT_OK(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOA, REDLED);
 80008e0:	2101      	movs	r1, #1
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <STATUS_NOT_OK+0x30>)
 80008e4:	f000 fed8 	bl	8001698 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOA, BUZZER);
 80008e8:	2104      	movs	r1, #4
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <STATUS_NOT_OK+0x30>)
 80008ec:	f000 fed4 	bl	8001698 <HAL_GPIO_TogglePin>
    HAL_Delay(400);
 80008f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008f4:	f000 fa30 	bl	8000d58 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, REDLED);
 80008f8:	2101      	movs	r1, #1
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <STATUS_NOT_OK+0x30>)
 80008fc:	f000 fecc 	bl	8001698 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOA, BUZZER);
 8000900:	2104      	movs	r1, #4
 8000902:	4802      	ldr	r0, [pc, #8]	; (800090c <STATUS_NOT_OK+0x30>)
 8000904:	f000 fec8 	bl	8001698 <HAL_GPIO_TogglePin>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40010800 	.word	0x40010800

08000910 <initializeHardware>:
void initializeHardware()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    HAL_Init();
 8000914:	f000 f9ee 	bl	8000cf4 <HAL_Init>
    rcc_systemClockConfig();
 8000918:	f003 facf 	bl	8003eba <rcc_systemClockConfig>
    LCD_config_gpio();
 800091c:	f002 fea6 	bl	800366c <LCD_config_gpio>
    LCD_Init();
 8000920:	f002 ffa6 	bl	8003870 <LCD_Init>
    spi_GPIO_config();
 8000924:	f003 fb10 	bl	8003f48 <spi_GPIO_config>
    spi_config();
 8000928:	f003 fb5e 	bl	8003fe8 <spi_config>
    rc522_init();
 800092c:	f003 f834 	bl	8003998 <rc522_init>
    exti_buttonConfig();
 8000930:	f002 fdb8 	bl	80034a4 <exti_buttonConfig>
    gpio_Init();
 8000934:	f002 fe5a 	bl	80035ec <gpio_Init>
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <handleSecurityCard>:
void handleSecurityCard()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
    num_uids = Flash_Read_2Byte(UID_NUM_ADDRESS);
 8000942:	488d      	ldr	r0, [pc, #564]	; (8000b78 <handleSecurityCard+0x23c>)
 8000944:	f002 fe3b 	bl	80035be <Flash_Read_2Byte>
 8000948:	4603      	mov	r3, r0
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b8b      	ldr	r3, [pc, #556]	; (8000b7c <handleSecurityCard+0x240>)
 800094e:	701a      	strb	r2, [r3, #0]
    ConvertFlashValue(UID_MASTER_ADDRESS, uidMasterArray);
 8000950:	498b      	ldr	r1, [pc, #556]	; (8000b80 <handleSecurityCard+0x244>)
 8000952:	488c      	ldr	r0, [pc, #560]	; (8000b84 <handleSecurityCard+0x248>)
 8000954:	f000 f970 	bl	8000c38 <ConvertFlashValue>
    Clear();
 8000958:	f003 f813 	bl	8003982 <Clear>
    while (1)
    {
        if (dem == 0)
 800095c:	4b8a      	ldr	r3, [pc, #552]	; (8000b88 <handleSecurityCard+0x24c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10d      	bne.n	8000980 <handleSecurityCard+0x44>
        {
            SetCursor(0, 0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f002 ffbc 	bl	80038e4 <SetCursor>
            WriteString("***SCAN YOUR***");
 800096c:	4887      	ldr	r0, [pc, #540]	; (8000b8c <handleSecurityCard+0x250>)
 800096e:	f002 fff3 	bl	8003958 <WriteString>
            SetCursor(6, 1);
 8000972:	2101      	movs	r1, #1
 8000974:	2006      	movs	r0, #6
 8000976:	f002 ffb5 	bl	80038e4 <SetCursor>
            WriteString("CARD");
 800097a:	4885      	ldr	r0, [pc, #532]	; (8000b90 <handleSecurityCard+0x254>)
 800097c:	f002 ffec 	bl	8003958 <WriteString>
        }
        if (rc522_checkCard(uid) && !(menu1_status))
 8000980:	4884      	ldr	r0, [pc, #528]	; (8000b94 <handleSecurityCard+0x258>)
 8000982:	f003 f8ca 	bl	8003b1a <rc522_checkCard>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 809b 	beq.w	8000ac4 <handleSecurityCard+0x188>
 800098e:	4b82      	ldr	r3, [pc, #520]	; (8000b98 <handleSecurityCard+0x25c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	f083 0301 	eor.w	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 8093 	beq.w	8000ac4 <handleSecurityCard+0x188>
        {
            if (memcmp(uidMasterArray, uid, UID_byte) == 0)
 800099e:	2204      	movs	r2, #4
 80009a0:	497c      	ldr	r1, [pc, #496]	; (8000b94 <handleSecurityCard+0x258>)
 80009a2:	4877      	ldr	r0, [pc, #476]	; (8000b80 <handleSecurityCard+0x244>)
 80009a4:	f003 fdbc 	bl	8004520 <memcmp>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d112      	bne.n	80009d4 <handleSecurityCard+0x98>
            {
                STATUS_OK();
 80009ae:	f7ff ff7b 	bl	80008a8 <STATUS_OK>
                HAL_GPIO_TogglePin(GPIOA, LOCK);
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	4879      	ldr	r0, [pc, #484]	; (8000b9c <handleSecurityCard+0x260>)
 80009b8:	f000 fe6e 	bl	8001698 <HAL_GPIO_TogglePin>
                ++dem;
 80009bc:	4b72      	ldr	r3, [pc, #456]	; (8000b88 <handleSecurityCard+0x24c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b70      	ldr	r3, [pc, #448]	; (8000b88 <handleSecurityCard+0x24c>)
 80009c6:	701a      	strb	r2, [r3, #0]
                menu1_status = true;
 80009c8:	4b73      	ldr	r3, [pc, #460]	; (8000b98 <handleSecurityCard+0x25c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
                Menu1();
 80009ce:	f7ff fc79 	bl	80002c4 <Menu1>
 80009d2:	e077      	b.n	8000ac4 <handleSecurityCard+0x188>
            }
            else
            {
                bool valid_card = false;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71fb      	strb	r3, [r7, #7]
                for (int i = 0; i < num_uids; i++)
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	e03f      	b.n	8000a5e <handleSecurityCard+0x122>
                {
                    ConvertFlashValue(UID_START_ADDRESS + 0x400 * i, resultArray1);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80009e4:	3322      	adds	r3, #34	; 0x22
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	496d      	ldr	r1, [pc, #436]	; (8000ba0 <handleSecurityCard+0x264>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f924 	bl	8000c38 <ConvertFlashValue>
                    if ((memcmp(resultArray1, uid, UID_byte) == 0) || (memcmp(uidMasterArray, uid, UID_byte) == 0))
 80009f0:	2204      	movs	r2, #4
 80009f2:	4968      	ldr	r1, [pc, #416]	; (8000b94 <handleSecurityCard+0x258>)
 80009f4:	486a      	ldr	r0, [pc, #424]	; (8000ba0 <handleSecurityCard+0x264>)
 80009f6:	f003 fd93 	bl	8004520 <memcmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d007      	beq.n	8000a10 <handleSecurityCard+0xd4>
 8000a00:	2204      	movs	r2, #4
 8000a02:	4964      	ldr	r1, [pc, #400]	; (8000b94 <handleSecurityCard+0x258>)
 8000a04:	485e      	ldr	r0, [pc, #376]	; (8000b80 <handleSecurityCard+0x244>)
 8000a06:	f003 fd8b 	bl	8004520 <memcmp>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d123      	bne.n	8000a58 <handleSecurityCard+0x11c>
                    {
                        STATUS_OK();
 8000a10:	f7ff ff4a 	bl	80008a8 <STATUS_OK>
                        valid_card = true;
 8000a14:	2301      	movs	r3, #1
 8000a16:	71fb      	strb	r3, [r7, #7]
                        Clear();
 8000a18:	f002 ffb3 	bl	8003982 <Clear>
                        SetCursor(0, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f002 ff60 	bl	80038e4 <SetCursor>
                        WriteString("*SECURITY CARD*");
 8000a24:	485f      	ldr	r0, [pc, #380]	; (8000ba4 <handleSecurityCard+0x268>)
 8000a26:	f002 ff97 	bl	8003958 <WriteString>
                        SetCursor(4, 1);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f002 ff59 	bl	80038e4 <SetCursor>
                        WriteString("IS VALID");
 8000a32:	485d      	ldr	r0, [pc, #372]	; (8000ba8 <handleSecurityCard+0x26c>)
 8000a34:	f002 ff90 	bl	8003958 <WriteString>
                        HAL_GPIO_TogglePin(GPIOA, LOCK);
 8000a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3c:	4857      	ldr	r0, [pc, #348]	; (8000b9c <handleSecurityCard+0x260>)
 8000a3e:	f000 fe2b 	bl	8001698 <HAL_GPIO_TogglePin>
                        HAL_Delay(5000);
 8000a42:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a46:	f000 f987 	bl	8000d58 <HAL_Delay>
                        HAL_GPIO_TogglePin(GPIOA, LOCK);
 8000a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4e:	4853      	ldr	r0, [pc, #332]	; (8000b9c <handleSecurityCard+0x260>)
 8000a50:	f000 fe22 	bl	8001698 <HAL_GPIO_TogglePin>
                        Clear();
 8000a54:	f002 ff95 	bl	8003982 <Clear>
                for (int i = 0; i < num_uids; i++)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b47      	ldr	r3, [pc, #284]	; (8000b7c <handleSecurityCard+0x240>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	dbb9      	blt.n	80009de <handleSecurityCard+0xa2>
                    }
                }
                if (!valid_card)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f083 0301 	eor.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d026      	beq.n	8000ac4 <handleSecurityCard+0x188>
                {
                    STATUS_NOT_OK();
 8000a76:	f7ff ff31 	bl	80008dc <STATUS_NOT_OK>
                    Clear();
 8000a7a:	f002 ff82 	bl	8003982 <Clear>
                    SetCursor(0, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2000      	movs	r0, #0
 8000a82:	f002 ff2f 	bl	80038e4 <SetCursor>
                    WriteString("*SECURITY CARD*");
 8000a86:	4847      	ldr	r0, [pc, #284]	; (8000ba4 <handleSecurityCard+0x268>)
 8000a88:	f002 ff66 	bl	8003958 <WriteString>
                    SetCursor(3, 1);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f002 ff28 	bl	80038e4 <SetCursor>
                    WriteString("IS INVALID");
 8000a94:	4845      	ldr	r0, [pc, #276]	; (8000bac <handleSecurityCard+0x270>)
 8000a96:	f002 ff5f 	bl	8003958 <WriteString>
                    ++count_spam;
 8000a9a:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <handleSecurityCard+0x274>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <handleSecurityCard+0x274>)
 8000aa4:	701a      	strb	r2, [r3, #0]
                    HAL_Delay(1000);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aaa:	f000 f955 	bl	8000d58 <HAL_Delay>
                    if (count_spam == MAX_SPAM)
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <handleSecurityCard+0x274>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d104      	bne.n	8000ac0 <handleSecurityCard+0x184>
                    {
                        count_spam = 0;
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <handleSecurityCard+0x274>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
                        WAIT_TO_SCAN_AGAIN();
 8000abc:	f000 f882 	bl	8000bc4 <WAIT_TO_SCAN_AGAIN>
                    }
                    Clear();
 8000ac0:	f002 ff5f 	bl	8003982 <Clear>
                }
            }
        }
        if (EnterInterupt)
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <handleSecurityCard+0x278>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d01b      	beq.n	8000b04 <handleSecurityCard+0x1c8>
        {
            EnterInterupt = false;
 8000acc:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <handleSecurityCard+0x278>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
            if (menu1_status && !(menu2_status))
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <handleSecurityCard+0x25c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00b      	beq.n	8000af2 <handleSecurityCard+0x1b6>
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <handleSecurityCard+0x27c>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f083 0301 	eor.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d004      	beq.n	8000af2 <handleSecurityCard+0x1b6>
            {
                menu2_status = true;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <handleSecurityCard+0x27c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
                Menu2();
 8000aee:	f7ff fc53 	bl	8000398 <Menu2>
            }
            HAL_Delay(10);
 8000af2:	200a      	movs	r0, #10
 8000af4:	f000 f930 	bl	8000d58 <HAL_Delay>
            EXTI->IMR |= (1UL << 12);
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <handleSecurityCard+0x280>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <handleSecurityCard+0x280>)
 8000afe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b02:	6013      	str	r3, [r2, #0]
        }
        if (DownInterrupt)
 8000b04:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <handleSecurityCard+0x284>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f43f af27 	beq.w	800095c <handleSecurityCard+0x20>
        {
            DownInterrupt = false;
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <handleSecurityCard+0x284>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
            if (menu1_status && !(menu2_status))
 8000b14:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <handleSecurityCard+0x25c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d015      	beq.n	8000b48 <handleSecurityCard+0x20c>
 8000b1c:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <handleSecurityCard+0x27c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00e      	beq.n	8000b48 <handleSecurityCard+0x20c>
            {
                ++dem;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <handleSecurityCard+0x24c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <handleSecurityCard+0x24c>)
 8000b34:	701a      	strb	r2, [r3, #0]
                if (dem > 4)
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <handleSecurityCard+0x24c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d902      	bls.n	8000b44 <handleSecurityCard+0x208>
                    dem = 1;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <handleSecurityCard+0x24c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
                Menu1();
 8000b44:	f7ff fbbe 	bl	80002c4 <Menu1>
            }
            if (menu1_status && menu2_status)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <handleSecurityCard+0x25c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d008      	beq.n	8000b62 <handleSecurityCard+0x226>
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <handleSecurityCard+0x27c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <handleSecurityCard+0x226>
            {
                menu2_status = false;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <handleSecurityCard+0x27c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
                Menu1();
 8000b5e:	f7ff fbb1 	bl	80002c4 <Menu1>
            }
            HAL_Delay(10);
 8000b62:	200a      	movs	r0, #10
 8000b64:	f000 f8f8 	bl	8000d58 <HAL_Delay>
            EXTI->IMR |= (1UL << 13);
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <handleSecurityCard+0x280>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <handleSecurityCard+0x280>)
 8000b6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b72:	6013      	str	r3, [r2, #0]
        if (dem == 0)
 8000b74:	e6f2      	b.n	800095c <handleSecurityCard+0x20>
 8000b76:	bf00      	nop
 8000b78:	08008400 	.word	0x08008400
 8000b7c:	20000092 	.word	0x20000092
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	08008000 	.word	0x08008000
 8000b88:	20000091 	.word	0x20000091
 8000b8c:	08005458 	.word	0x08005458
 8000b90:	08005468 	.word	0x08005468
 8000b94:	20000084 	.word	0x20000084
 8000b98:	20000096 	.word	0x20000096
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	20000088 	.word	0x20000088
 8000ba4:	080055e4 	.word	0x080055e4
 8000ba8:	080055f4 	.word	0x080055f4
 8000bac:	08005600 	.word	0x08005600
 8000bb0:	20000090 	.word	0x20000090
 8000bb4:	20000094 	.word	0x20000094
 8000bb8:	20000097 	.word	0x20000097
 8000bbc:	40010400 	.word	0x40010400
 8000bc0:	20000093 	.word	0x20000093

08000bc4 <WAIT_TO_SCAN_AGAIN>:
        }
    }
}
void WAIT_TO_SCAN_AGAIN()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
    Clear();
 8000bca:	f002 feda 	bl	8003982 <Clear>
    SetCursor(0, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f002 fe87 	bl	80038e4 <SetCursor>
    WriteString("DISABLE SCANNING");
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <WAIT_TO_SCAN_AGAIN+0x68>)
 8000bd8:	f002 febe 	bl	8003958 <WriteString>
    SetCursor(0, 1);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2000      	movs	r0, #0
 8000be0:	f002 fe80 	bl	80038e4 <SetCursor>
    WriteString("PLEASE WAIT:");
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <WAIT_TO_SCAN_AGAIN+0x6c>)
 8000be6:	f002 feb7 	bl	8003958 <WriteString>
    for (int count = SECOND_WAIT; count >= 0; --count)
 8000bea:	233c      	movs	r3, #60	; 0x3c
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	e014      	b.n	8000c1a <WAIT_TO_SCAN_AGAIN+0x56>
    {
        char lcd_buffer[2];
        sprintf(lcd_buffer, "%02d", count);
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	490f      	ldr	r1, [pc, #60]	; (8000c34 <WAIT_TO_SCAN_AGAIN+0x70>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fb9a 	bl	8004330 <siprintf>
        SetCursor(12, 1);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	200c      	movs	r0, #12
 8000c00:	f002 fe70 	bl	80038e4 <SetCursor>
        WriteString(lcd_buffer);
 8000c04:	463b      	mov	r3, r7
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fea6 	bl	8003958 <WriteString>
        HAL_Delay(1000);
 8000c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c10:	f000 f8a2 	bl	8000d58 <HAL_Delay>
    for (int count = SECOND_WAIT; count >= 0; --count)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dae7      	bge.n	8000bf0 <WAIT_TO_SCAN_AGAIN+0x2c>
    }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800560c 	.word	0x0800560c
 8000c30:	08005620 	.word	0x08005620
 8000c34:	08005630 	.word	0x08005630

08000c38 <ConvertFlashValue>:
void ConvertFlashValue(uint32_t flashAddress, uint8_t *resultArray)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    // Read value from flash
    uint32_t flashValue = Flash_Read_4Byte(flashAddress);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f002 fcc7 	bl	80035d6 <Flash_Read_4Byte>
 8000c48:	60b8      	str	r0, [r7, #8]
    // Convert flash value to array uint8_t
    for (uint8_t i = 0; i < UID_byte; i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e00c      	b.n	8000c6a <ConvertFlashValue+0x32>
    {
        resultArray[i] = (uint8_t)(flashValue >> (8 * i));
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	fa22 f103 	lsr.w	r1, r2, r3
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	b2ca      	uxtb	r2, r1
 8000c62:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < UID_byte; i++)
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	3301      	adds	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d9ef      	bls.n	8000c50 <ConvertFlashValue+0x18>
    }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <Master_Setup_Display>:
void Master_Setup_Display(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    SetCursor(2, 0);
 8000c80:	2100      	movs	r1, #0
 8000c82:	2002      	movs	r0, #2
 8000c84:	f002 fe2e 	bl	80038e4 <SetCursor>
    WriteString("SETUP YOUR");
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <Master_Setup_Display+0x24>)
 8000c8a:	f002 fe65 	bl	8003958 <WriteString>
    SetCursor(2, 1);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2002      	movs	r0, #2
 8000c92:	f002 fe27 	bl	80038e4 <SetCursor>
    WriteString("MASTER CARD");
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <Master_Setup_Display+0x28>)
 8000c98:	f002 fe5e 	bl	8003958 <WriteString>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08005638 	.word	0x08005638
 8000ca4:	08005644 	.word	0x08005644

08000ca8 <SysTick_Handler>:
 *      Author: dell
 */
#include "main.h"
#include "stm32f1xx_it.h"
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000cac:	f000 f838 	bl	8000d20 <HAL_IncTick>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <EXTI15_10_IRQHandler>:

// External EXTI15_10 callback
void EXTI15_10_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(ENTER) != RESET)
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <EXTI15_10_IRQHandler+0x30>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <EXTI15_10_IRQHandler+0x18>
    {
    	HAL_GPIO_EXTI_IRQHandler(ENTER);
 8000cc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cc8:	f000 fd00 	bl	80016cc <HAL_GPIO_EXTI_IRQHandler>
    }
    if (__HAL_GPIO_EXTI_GET_IT(DOWN) != RESET)
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <EXTI15_10_IRQHandler+0x30>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <EXTI15_10_IRQHandler+0x2c>
    {
    	HAL_GPIO_EXTI_IRQHandler(DOWN);
 8000cd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cdc:	f000 fcf6 	bl	80016cc <HAL_GPIO_EXTI_IRQHandler>
    }
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x28>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f8f5 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f002 fa8e 	bl	800322c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f000 fcf4 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000098 	.word	0x20000098

08000d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	20000098 	.word	0x20000098

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff fff0 	bl	8000d44 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffe0 	bl	8000d44 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <__NVIC_EnableIRQ+0x34>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff4f 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff64 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ffb2 	bl	8000e90 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff81 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff57 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <HAL_FLASH_Program+0xd8>)
 8000f7c:	7e1b      	ldrb	r3, [r3, #24]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_FLASH_Program+0x26>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e054      	b.n	8001030 <HAL_FLASH_Program+0xd0>
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <HAL_FLASH_Program+0xd8>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f90:	f000 f8a8 	bl	80010e4 <FLASH_WaitForLastOperation>
 8000f94:	4603      	mov	r3, r0
 8000f96:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d144      	bne.n	8001028 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d102      	bne.n	8000faa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	757b      	strb	r3, [r7, #21]
 8000fa8:	e007      	b.n	8000fba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d102      	bne.n	8000fb6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	757b      	strb	r3, [r7, #21]
 8000fb4:	e001      	b.n	8000fba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75bb      	strb	r3, [r7, #22]
 8000fbe:	e02d      	b.n	800101c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fc0:	7dbb      	ldrb	r3, [r7, #22]
 8000fc2:	005a      	lsls	r2, r3, #1
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	eb02 0c03 	add.w	ip, r2, r3
 8000fca:	7dbb      	ldrb	r3, [r7, #22]
 8000fcc:	0119      	lsls	r1, r3, #4
 8000fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fd2:	f1c1 0620 	rsb	r6, r1, #32
 8000fd6:	f1a1 0020 	sub.w	r0, r1, #32
 8000fda:	fa22 f401 	lsr.w	r4, r2, r1
 8000fde:	fa03 f606 	lsl.w	r6, r3, r6
 8000fe2:	4334      	orrs	r4, r6
 8000fe4:	fa23 f000 	lsr.w	r0, r3, r0
 8000fe8:	4304      	orrs	r4, r0
 8000fea:	fa23 f501 	lsr.w	r5, r3, r1
 8000fee:	b2a3      	uxth	r3, r4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4660      	mov	r0, ip
 8000ff4:	f000 f85a 	bl	80010ac <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ff8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ffc:	f000 f872 	bl	80010e4 <FLASH_WaitForLastOperation>
 8001000:	4603      	mov	r3, r0
 8001002:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_FLASH_Program+0xdc>)
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_FLASH_Program+0xdc>)
 800100a:	f023 0301 	bic.w	r3, r3, #1
 800100e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001016:	7dbb      	ldrb	r3, [r7, #22]
 8001018:	3301      	adds	r3, #1
 800101a:	75bb      	strb	r3, [r7, #22]
 800101c:	7dba      	ldrb	r2, [r7, #22]
 800101e:	7d7b      	ldrb	r3, [r7, #21]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3cd      	bcc.n	8000fc0 <HAL_FLASH_Program+0x60>
 8001024:	e000      	b.n	8001028 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001026:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_FLASH_Program+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	761a      	strb	r2, [r3, #24]

  return status;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001030:	4618      	mov	r0, r3
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001038:	200000a0 	.word	0x200000a0
 800103c:	40022000 	.word	0x40022000

08001040 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_FLASH_Unlock+0x40>)
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00d      	beq.n	8001072 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_FLASH_Unlock+0x40>)
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_FLASH_Unlock+0x44>)
 800105a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_FLASH_Unlock+0x40>)
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_FLASH_Unlock+0x48>)
 8001060:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_FLASH_Unlock+0x40>)
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001072:	79fb      	ldrb	r3, [r7, #7]
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40022000 	.word	0x40022000
 8001084:	45670123 	.word	0x45670123
 8001088:	cdef89ab 	.word	0xcdef89ab

0800108c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_FLASH_Lock+0x1c>)
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_FLASH_Lock+0x1c>)
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000

080010ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <FLASH_Program_HalfWord+0x30>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <FLASH_Program_HalfWord+0x34>)
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <FLASH_Program_HalfWord+0x34>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	801a      	strh	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200000a0 	.word	0x200000a0
 80010e0:	40022000 	.word	0x40022000

080010e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff fe2a 	bl	8000d44 <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010f2:	e010      	b.n	8001116 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fa:	d00c      	beq.n	8001116 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <FLASH_WaitForLastOperation+0x2e>
 8001102:	f7ff fe1f 	bl	8000d44 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	d201      	bcs.n	8001116 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e025      	b.n	8001162 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <FLASH_WaitForLastOperation+0x88>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e8      	bne.n	80010f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <FLASH_WaitForLastOperation+0x88>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <FLASH_WaitForLastOperation+0x88>)
 8001130:	2220      	movs	r2, #32
 8001132:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <FLASH_WaitForLastOperation+0x88>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	f003 0310 	and.w	r3, r3, #16
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10b      	bne.n	8001158 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <FLASH_WaitForLastOperation+0x88>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <FLASH_WaitForLastOperation+0x88>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001158:	f000 f80a 	bl	8001170 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000

08001170 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <FLASH_SetErrorCode+0x98>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <FLASH_SetErrorCode+0x9c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	4a1f      	ldr	r2, [pc, #124]	; (800120c <FLASH_SetErrorCode+0x9c>)
 8001190:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <FLASH_SetErrorCode+0x98>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d009      	beq.n	80011ba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <FLASH_SetErrorCode+0x9c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <FLASH_SetErrorCode+0x9c>)
 80011b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <FLASH_SetErrorCode+0x98>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <FLASH_SetErrorCode+0x9c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <FLASH_SetErrorCode+0x9c>)
 80011d0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <FLASH_SetErrorCode+0x98>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <FLASH_SetErrorCode+0x98>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f240 1201 	movw	r2, #257	; 0x101
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d106      	bne.n	80011f6 <FLASH_SetErrorCode+0x86>
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <FLASH_SetErrorCode+0x98>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <FLASH_SetErrorCode+0x98>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	61d3      	str	r3, [r2, #28]
}  
 80011f4:	e002      	b.n	80011fc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <FLASH_SetErrorCode+0x98>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	60d3      	str	r3, [r2, #12]
}  
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000
 800120c:	200000a0 	.word	0x200000a0

08001210 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_FLASHEx_Erase+0xd0>)
 8001224:	7e1b      	ldrb	r3, [r3, #24]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_FLASHEx_Erase+0x1e>
 800122a:	2302      	movs	r3, #2
 800122c:	e053      	b.n	80012d6 <HAL_FLASHEx_Erase+0xc6>
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_FLASHEx_Erase+0xd0>)
 8001230:	2201      	movs	r2, #1
 8001232:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d116      	bne.n	800126a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800123c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001240:	f7ff ff50 	bl	80010e4 <FLASH_WaitForLastOperation>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d141      	bne.n	80012ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 f84c 	bl	80012e8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001250:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001254:	f7ff ff46 	bl	80010e4 <FLASH_WaitForLastOperation>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_FLASHEx_Erase+0xd4>)
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <HAL_FLASHEx_Erase+0xd4>)
 8001262:	f023 0304 	bic.w	r3, r3, #4
 8001266:	6113      	str	r3, [r2, #16]
 8001268:	e031      	b.n	80012ce <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800126a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800126e:	f7ff ff39 	bl	80010e4 <FLASH_WaitForLastOperation>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d12a      	bne.n	80012ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f04f 32ff 	mov.w	r2, #4294967295
 800127e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	e019      	b.n	80012bc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f000 f849 	bl	8001320 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800128e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001292:	f7ff ff27 	bl	80010e4 <FLASH_WaitForLastOperation>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_FLASHEx_Erase+0xd4>)
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_FLASHEx_Erase+0xd4>)
 80012a0:	f023 0302 	bic.w	r3, r3, #2
 80012a4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
            break;
 80012b2:	e00c      	b.n	80012ce <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012ba:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	029a      	lsls	r2, r3, #10
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3dc      	bcc.n	8001288 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_FLASHEx_Erase+0xd0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	761a      	strb	r2, [r3, #24]

  return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000a0 	.word	0x200000a0
 80012e4:	40022000 	.word	0x40022000

080012e8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <FLASH_MassErase+0x30>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <FLASH_MassErase+0x34>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <FLASH_MassErase+0x34>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <FLASH_MassErase+0x34>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <FLASH_MassErase+0x34>)
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	200000a0 	.word	0x200000a0
 800131c:	40022000 	.word	0x40022000

08001320 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <FLASH_PageErase+0x38>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <FLASH_PageErase+0x3c>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <FLASH_PageErase+0x3c>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <FLASH_PageErase+0x3c>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <FLASH_PageErase+0x3c>)
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <FLASH_PageErase+0x3c>)
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	200000a0 	.word	0x200000a0
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_GPIO_Init>:
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
    uint32_t position = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ioposition;
    uint32_t iocurrent;
    uint32_t temp;
    uint32_t config = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

    /* Configure the port pins */
    while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e169      	b.n	8001648 <HAL_GPIO_Init+0x2e8>
    {
        /* Get the IO position */
        ioposition = (0x01uL << position);
 8001374:	2201      	movs	r2, #1
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	61fb      	str	r3, [r7, #28]

        /* Get the current IO position */
        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

        if (iocurrent == ioposition)
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8158 	bne.w	8001642 <HAL_GPIO_Init+0x2e2>
        {
            /* Check the Alternate function parameters */
            assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

            /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
            switch (GPIO_Init->Mode)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a9a      	ldr	r2, [pc, #616]	; (8001600 <HAL_GPIO_Init+0x2a0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d05e      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 800139c:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_GPIO_Init+0x2a0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d875      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013a2:	4a98      	ldr	r2, [pc, #608]	; (8001604 <HAL_GPIO_Init+0x2a4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d058      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013a8:	4a96      	ldr	r2, [pc, #600]	; (8001604 <HAL_GPIO_Init+0x2a4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d86f      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ae:	4a96      	ldr	r2, [pc, #600]	; (8001608 <HAL_GPIO_Init+0x2a8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d052      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013b4:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_GPIO_Init+0x2a8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d869      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ba:	4a94      	ldr	r2, [pc, #592]	; (800160c <HAL_GPIO_Init+0x2ac>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d04c      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013c0:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_GPIO_Init+0x2ac>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d863      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013c6:	4a92      	ldr	r2, [pc, #584]	; (8001610 <HAL_GPIO_Init+0x2b0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d046      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013cc:	4a90      	ldr	r2, [pc, #576]	; (8001610 <HAL_GPIO_Init+0x2b0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d85d      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d82a      	bhi.n	800142c <HAL_GPIO_Init+0xcc>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d859      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <HAL_GPIO_Init+0x80>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	08001435 	.word	0x08001435
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001489 	.word	0x08001489
 80013f0:	0800148f 	.word	0x0800148f
 80013f4:	0800148f 	.word	0x0800148f
 80013f8:	0800148f 	.word	0x0800148f
 80013fc:	0800148f 	.word	0x0800148f
 8001400:	0800148f 	.word	0x0800148f
 8001404:	0800148f 	.word	0x0800148f
 8001408:	0800148f 	.word	0x0800148f
 800140c:	0800148f 	.word	0x0800148f
 8001410:	0800148f 	.word	0x0800148f
 8001414:	0800148f 	.word	0x0800148f
 8001418:	0800148f 	.word	0x0800148f
 800141c:	0800148f 	.word	0x0800148f
 8001420:	0800148f 	.word	0x0800148f
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001451 	.word	0x08001451
 800142c:	4a79      	ldr	r2, [pc, #484]	; (8001614 <HAL_GPIO_Init+0x2b4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0xfa>
                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
                break;

            /* Parameters are checked with assert_param */
            default:
                break;
 8001432:	e02c      	b.n	800148e <HAL_GPIO_Init+0x12e>
                config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	623b      	str	r3, [r7, #32]
                break;
 800143a:	e029      	b.n	8001490 <HAL_GPIO_Init+0x130>
                config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	623b      	str	r3, [r7, #32]
                break;
 8001444:	e024      	b.n	8001490 <HAL_GPIO_Init+0x130>
                config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	3308      	adds	r3, #8
 800144c:	623b      	str	r3, [r7, #32]
                break;
 800144e:	e01f      	b.n	8001490 <HAL_GPIO_Init+0x130>
                config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	330c      	adds	r3, #12
 8001456:	623b      	str	r3, [r7, #32]
                break;
 8001458:	e01a      	b.n	8001490 <HAL_GPIO_Init+0x130>
                if (GPIO_Init->Pull == GPIO_NOPULL)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_Init+0x108>
                    config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001462:	2304      	movs	r3, #4
 8001464:	623b      	str	r3, [r7, #32]
                break;
 8001466:	e013      	b.n	8001490 <HAL_GPIO_Init+0x130>
                else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_GPIO_Init+0x11c>
                    config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
                    GPIOx->BSRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	611a      	str	r2, [r3, #16]
                break;
 800147a:	e009      	b.n	8001490 <HAL_GPIO_Init+0x130>
                    config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
                    GPIOx->BRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	615a      	str	r2, [r3, #20]
                break;
 8001486:	e003      	b.n	8001490 <HAL_GPIO_Init+0x130>
                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
                break;
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x130>
                break;
 800148e:	bf00      	nop
            }

            /* Check if the current bit belongs to first half or last half of the pin count number
             in order to address CRH or CRL register*/
            configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d801      	bhi.n	800149a <HAL_GPIO_Init+0x13a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e001      	b.n	800149e <HAL_GPIO_Init+0x13e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]
            registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d802      	bhi.n	80014ac <HAL_GPIO_Init+0x14c>
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	e002      	b.n	80014b2 <HAL_GPIO_Init+0x152>
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3b08      	subs	r3, #8
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]

            /* Apply the new configuration of the pin to the register */
            MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	210f      	movs	r1, #15
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	6a39      	ldr	r1, [r7, #32]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]

            /*--------------------- EXTI Mode Configuration ------------------------*/
            /* Configure the External Interrupt or event for the current IO */
            if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80b1 	beq.w	8001642 <HAL_GPIO_Init+0x2e2>
            {
                /* Enable AFIO Clock */
                __HAL_RCC_AFIO_CLK_ENABLE();
 80014e0:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
                temp = AFIO->EXTICR[position >> 2u];
 80014f8:	4a48      	ldr	r2, [pc, #288]	; (800161c <HAL_GPIO_Init+0x2bc>)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	60fb      	str	r3, [r7, #12]
                CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
                SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a40      	ldr	r2, [pc, #256]	; (8001620 <HAL_GPIO_Init+0x2c0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d013      	beq.n	800154c <HAL_GPIO_Init+0x1ec>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3f      	ldr	r2, [pc, #252]	; (8001624 <HAL_GPIO_Init+0x2c4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00d      	beq.n	8001548 <HAL_GPIO_Init+0x1e8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <HAL_GPIO_Init+0x2c8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3d      	ldr	r2, [pc, #244]	; (800162c <HAL_GPIO_Init+0x2cc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d101      	bne.n	8001540 <HAL_GPIO_Init+0x1e0>
 800153c:	2303      	movs	r3, #3
 800153e:	e006      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001540:	2304      	movs	r3, #4
 8001542:	e004      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001544:	2302      	movs	r3, #2
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 800154c:	2300      	movs	r3, #0
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	f002 0203 	and.w	r2, r2, #3
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	4093      	lsls	r3, r2
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
                AFIO->EXTICR[position >> 2u] = temp;
 800155e:	492f      	ldr	r1, [pc, #188]	; (800161c <HAL_GPIO_Init+0x2bc>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                /* Enable or disable the rising trigger */
                if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_GPIO_Init+0x226>
                {
                    SET_BIT(EXTI->RTSR, iocurrent);
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	492c      	ldr	r1, [pc, #176]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x234>
                }
                else
                {
                    CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	43db      	mvns	r3, r3
 800158e:	4928      	ldr	r1, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 8001590:	4013      	ands	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
                }

                /* Enable or disable the falling trigger */
                if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_GPIO_Init+0x24e>
                {
                    SET_BIT(EXTI->FTSR, iocurrent);
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	4922      	ldr	r1, [pc, #136]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60cb      	str	r3, [r1, #12]
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x25c>
                }
                else
                {
                    CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	491e      	ldr	r1, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
                }

                /* Configure the event mask */
                if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x276>
                {
                    SET_BIT(EXTI->EMR, iocurrent);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4918      	ldr	r1, [pc, #96]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x284>
                }
                else
                {
                    CLEAR_BIT(EXTI->EMR, iocurrent);
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4914      	ldr	r1, [pc, #80]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                }

                /* Configure the interrupt mask */
                if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d021      	beq.n	8001634 <HAL_GPIO_Init+0x2d4>
                {
                    SET_BIT(EXTI->IMR, iocurrent);
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e021      	b.n	8001642 <HAL_GPIO_Init+0x2e2>
 80015fe:	bf00      	nop
 8001600:	10320000 	.word	0x10320000
 8001604:	10310000 	.word	0x10310000
 8001608:	10220000 	.word	0x10220000
 800160c:	10210000 	.word	0x10210000
 8001610:	10120000 	.word	0x10120000
 8001614:	10110000 	.word	0x10110000
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	40010800 	.word	0x40010800
 8001624:	40010c00 	.word	0x40010c00
 8001628:	40011000 	.word	0x40011000
 800162c:	40011400 	.word	0x40011400
 8001630:	40010400 	.word	0x40010400
                }
                else
                {
                    CLEAR_BIT(EXTI->IMR, iocurrent);
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	43db      	mvns	r3, r3
 800163c:	4909      	ldr	r1, [pc, #36]	; (8001664 <HAL_GPIO_Init+0x304>)
 800163e:	4013      	ands	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
                }
            }
        }

        position++;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	f47f ae8e 	bne.w	8001374 <HAL_GPIO_Init+0x14>
    }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	372c      	adds	r7, #44	; 0x2c
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));
    assert_param(IS_GPIO_PIN_ACTION(PinState));

    if (PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
    {
        GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	611a      	str	r2, [r3, #16]
    }
    else
    {
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
    }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_GPIO_TogglePin>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Pin: Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]

    /* Check the parameters */
    assert_param(IS_GPIO_PIN(GPIO_Pin));

    /* get current Output Data Register value */
    odr = GPIOx->ODR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60fb      	str	r3, [r7, #12]

    /* Set selected pins that were at low level, and reset ones that were high */
    GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	041a      	lsls	r2, r3, #16
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43d9      	mvns	r1, r3
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	400b      	ands	r3, r1
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_GPIO_EXTI_IRQHandler>:
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
    /* EXTI line interrupt detected */

    if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	6153      	str	r3, [r2, #20]
        HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fd42 	bl	8000174 <HAL_GPIO_EXTI_Callback>
    }
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e272      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8087 	beq.w	8001836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	4b8f      	ldr	r3, [pc, #572]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d112      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
 8001740:	4b8c      	ldr	r3, [pc, #560]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d10b      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	4b89      	ldr	r3, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d06c      	beq.n	8001834 <HAL_RCC_OscConfig+0x12c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d168      	bne.n	8001834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e24c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x76>
 8001770:	4b80      	ldr	r3, [pc, #512]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a7f      	ldr	r2, [pc, #508]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e02e      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b7b      	ldr	r3, [pc, #492]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7a      	ldr	r2, [pc, #488]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b78      	ldr	r3, [pc, #480]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a77      	ldr	r2, [pc, #476]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0xbc>
 80017aa:	4b72      	ldr	r3, [pc, #456]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a71      	ldr	r2, [pc, #452]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017c4:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6a      	ldr	r2, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a67      	ldr	r2, [pc, #412]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff faae 	bl	8000d44 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff faaa 	bl	8000d44 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e200      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xe4>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fa9a 	bl	8000d44 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fa96 	bl	8000d44 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1ec      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x10c>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001842:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
 800185a:	4b46      	ldr	r3, [pc, #280]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e1c0      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4939      	ldr	r1, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e03a      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa4f 	bl	8000d44 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa4b 	bl	8000d44 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1a1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4927      	ldr	r1, [pc, #156]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x270>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fa2e 	bl	8000d44 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fa2a 	bl	8000d44 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e180      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03a      	beq.n	800198c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x274>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fa0e 	bl	8000d44 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fa0a 	bl	8000d44 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e160      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 faba 	bl	8001ec4 <RCC_Delay>
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x274>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff f9f4 	bl	8000d44 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff f9f0 	bl	8000d44 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d908      	bls.n	8001980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e146      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	42420000 	.word	0x42420000
 800197c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e9      	bne.n	8001960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a6 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a87      	ldr	r2, [pc, #540]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b85      	ldr	r3, [pc, #532]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7e      	ldr	r2, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019de:	f7ff f9b1 	bl	8000d44 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff f9ad 	bl	8000d44 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e103      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x312>
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	e02d      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x334>
 8001a22:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a66      	ldr	r2, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	e01c      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x356>
 8001a44:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a60      	ldr	r2, [pc, #384]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a5d      	ldr	r2, [pc, #372]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a5a      	ldr	r2, [pc, #360]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f961 	bl	8000d44 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff f95d 	bl	8000d44 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0b1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	4b4b      	ldr	r3, [pc, #300]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ee      	beq.n	8001a86 <HAL_RCC_OscConfig+0x37e>
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f94b 	bl	8000d44 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff f947 	bl	8000d44 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e09b      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d061      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d146      	bne.n	8001b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f91b 	bl	8000d44 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff f917 	bl	8000d44 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e06d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4921      	ldr	r1, [pc, #132]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a19      	ldr	r1, [r3, #32]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	491b      	ldr	r1, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f8eb 	bl	8000d44 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f8e7 	bl	8000d44 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e03d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46a>
 8001b90:	e035      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f8d4 	bl	8000d44 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f8d0 	bl	8000d44 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e026      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x498>
 8001bbe:	e01e      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e019      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x500>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0d0      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4965      	ldr	r1, [pc, #404]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d040      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e073      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06b      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4936      	ldr	r1, [pc, #216]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f822 	bl	8000d44 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f81e 	bl	8000d44 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e053      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d210      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4922      	ldr	r1, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1d0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fa36 	bl	800322c <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08005664 	.word	0x08005664
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x30>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x36>
 8001e0e:	e027      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e12:	613b      	str	r3, [r7, #16]
      break;
 8001e14:	e027      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d010      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0c5b      	lsrs	r3, r3, #17
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e004      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	613b      	str	r3, [r7, #16]
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e62:	613b      	str	r3, [r7, #16]
      break;
 8001e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e66:	693b      	ldr	r3, [r7, #16]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	0800567c 	.word	0x0800567c
 8001e80:	0800568c 	.word	0x0800568c
 8001e84:	003d0900 	.word	0x003d0900

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea0:	f7ff fff2 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0adb      	lsrs	r3, r3, #11
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08005674 	.word	0x08005674

08001ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <RCC_Delay+0x34>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <RCC_Delay+0x38>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0a5b      	lsrs	r3, r3, #9
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee0:	bf00      	nop
  }
  while (Delay --);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <RCC_Delay+0x1c>
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	10624dd3 	.word	0x10624dd3

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d07d      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f20:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	61d3      	str	r3, [r2, #28]
 8001f38:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d118      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f54:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a42      	ldr	r2, [pc, #264]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f60:	f7fe fef0 	bl	8000d44 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	e008      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe feec 	bl	8000d44 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e06d      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d02e      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d027      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fae:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fba:	4a29      	ldr	r2, [pc, #164]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d014      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7fe febb 	bl	8000d44 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe feb7 	bl	8000d44 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e036      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ee      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4917      	ldr	r1, [pc, #92]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	4313      	orrs	r3, r2
 8002004:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	490b      	ldr	r1, [pc, #44]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4904      	ldr	r1, [pc, #16]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	42420440 	.word	0x42420440

0800206c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b10      	cmp	r3, #16
 8002092:	f200 808a 	bhi.w	80021aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d045      	beq.n	8002128 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d075      	beq.n	800218e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80020a2:	e082      	b.n	80021aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80020a4:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80020aa:	4b45      	ldr	r3, [pc, #276]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07b      	beq.n	80021ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a41      	ldr	r2, [pc, #260]	; (80021c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d015      	beq.n	80020fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ce:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	0c5b      	lsrs	r3, r3, #17
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00d      	beq.n	8002104 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020e8:	4a38      	ldr	r2, [pc, #224]	; (80021cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	e004      	b.n	8002104 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002104:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002110:	d102      	bne.n	8002118 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	61bb      	str	r3, [r7, #24]
      break;
 8002116:	e04a      	b.n	80021ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4a2d      	ldr	r2, [pc, #180]	; (80021d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
      break;
 8002126:	e042      	b.n	80021ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002138:	d108      	bne.n	800214c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e01f      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002156:	d109      	bne.n	800216c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002164:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	e00f      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002176:	d11c      	bne.n	80021b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d016      	beq.n	80021b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002184:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002188:	61bb      	str	r3, [r7, #24]
      break;
 800218a:	e012      	b.n	80021b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800218c:	e011      	b.n	80021b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800218e:	f7ff fe85 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0b9b      	lsrs	r3, r3, #14
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	3301      	adds	r3, #1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	61bb      	str	r3, [r7, #24]
      break;
 80021a8:	e004      	b.n	80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021aa:	bf00      	nop
 80021ac:	e002      	b.n	80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021ae:	bf00      	nop
 80021b0:	e000      	b.n	80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021b2:	bf00      	nop
    }
  }
  return (frequency);
 80021b4:	69bb      	ldr	r3, [r7, #24]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08005690 	.word	0x08005690
 80021c8:	080056a0 	.word	0x080056a0
 80021cc:	007a1200 	.word	0x007a1200
 80021d0:	003d0900 	.word	0x003d0900
 80021d4:	aaaaaaab 	.word	0xaaaaaaab

080021d8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07a      	b.n	80022e4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7c5b      	ldrb	r3, [r3, #17]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f876 	bl	80022f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8a4 	bl	8002358 <HAL_RTC_WaitForSynchro>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2204      	movs	r2, #4
 800221a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e061      	b.n	80022e4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f8c6 	bl	80023b2 <RTC_EnterInitMode>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2204      	movs	r2, #4
 8002230:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e056      	b.n	80022e4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0207 	bic.w	r2, r2, #7
 8002244:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RTC_Init+0x114>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a26      	ldr	r2, [pc, #152]	; (80022ec <HAL_RTC_Init+0x114>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RTC_Init+0x114>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4921      	ldr	r1, [pc, #132]	; (80022ec <HAL_RTC_Init+0x114>)
 8002268:	4313      	orrs	r3, r2
 800226a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d003      	beq.n	800227e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e00e      	b.n	800229c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff fef4 	bl	800206c <HAL_RCCEx_GetPeriphCLKFreq>
 8002284:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2204      	movs	r2, #4
 8002290:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e026      	b.n	80022e4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3b01      	subs	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	0c1a      	lsrs	r2, r3, #16
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 020f 	and.w	r2, r2, #15
 80022a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	b292      	uxth	r2, r2
 80022b2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f8a4 	bl	8002402 <RTC_ExitInitMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2204      	movs	r2, #4
 80022c4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00c      	b.n	80022e4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80022e2:	2300      	movs	r3, #0
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40006c00 	.word	0x40006c00

080022f0 <HAL_RTC_MspInit>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
	...

08002304 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d011      	beq.n	800233e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f001 f86b 	bl	8003404 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0202 	bic.w	r2, r2, #2
 800233c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002340:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002344:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	745a      	strb	r2, [r3, #17]
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e01d      	b.n	80023aa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0208 	bic.w	r2, r2, #8
 800237c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800237e:	f7fe fce1 	bl	8000d44 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002384:	e009      	b.n	800239a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002386:	f7fe fcdd 	bl	8000d44 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002394:	d901      	bls.n	800239a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e007      	b.n	80023aa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80023be:	f7fe fcc1 	bl	8000d44 <HAL_GetTick>
 80023c2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80023c4:	e009      	b.n	80023da <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80023c6:	f7fe fcbd 	bl	8000d44 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d4:	d901      	bls.n	80023da <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e00f      	b.n	80023fa <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ee      	beq.n	80023c6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0210 	orr.w	r2, r2, #16
 80023f6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0210 	bic.w	r2, r2, #16
 800241c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800241e:	f7fe fc91 	bl	8000d44 <HAL_GetTick>
 8002422:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002424:	e009      	b.n	800243a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002426:	f7fe fc8d 	bl	8000d44 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002434:	d901      	bls.n	800243a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e007      	b.n	800244a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e07e      	b.n	8002562 <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d108      	bne.n	800247e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002474:	d009      	beq.n	800248a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	61da      	str	r2, [r3, #28]
 800247c:	e005      	b.n	800248a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f863 	bl	800256a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002508:	ea42 0103 	orr.w	r1, r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	0c1a      	lsrs	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f002 0204 	and.w	r2, r2, #4
 800252a:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002534:	d105      	bne.n	8002542 <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b292      	uxth	r2, r2
 8002540:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_SPI_Transmit+0x22>
 800259a:	2302      	movs	r3, #2
 800259c:	e14f      	b.n	800283e <HAL_SPI_Transmit+0x2c2>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025a6:	f7fe fbcd 	bl	8000d44 <HAL_GetTick>
 80025aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
 80025be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025c0:	e138      	b.n	8002834 <HAL_SPI_Transmit+0x2b8>
  }

  if ((pData == NULL) || (Size == 0U))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_SPI_Transmit+0x52>
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025d2:	e12f      	b.n	8002834 <HAL_SPI_Transmit+0x2b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2203      	movs	r2, #3
 80025d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261a:	d10f      	bne.n	800263c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002644:	d10f      	bne.n	8002666 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002664:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d007      	beq.n	8002684 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268c:	d14f      	bne.n	800272e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_Transmit+0x120>
 8002696:	8afb      	ldrh	r3, [r7, #22]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d142      	bne.n	8002722 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026c0:	e02f      	b.n	8002722 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d112      	bne.n	80026f6 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80026f4:	e015      	b.n	8002722 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f6:	f7fe fb25 	bl	8000d44 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d803      	bhi.n	800270e <HAL_SPI_Transmit+0x192>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d102      	bne.n	8002714 <HAL_SPI_Transmit+0x198>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002720:	e088      	b.n	8002834 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ca      	bne.n	80026c2 <HAL_SPI_Transmit+0x146>
 800272c:	e050      	b.n	80027d0 <HAL_SPI_Transmit+0x254>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_SPI_Transmit+0x1c0>
 8002736:	8afb      	ldrh	r3, [r7, #22]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d144      	bne.n	80027c6 <HAL_SPI_Transmit+0x24a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002762:	e030      	b.n	80027c6 <HAL_SPI_Transmit+0x24a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d113      	bne.n	800279a <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	330c      	adds	r3, #12
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	86da      	strh	r2, [r3, #54]	; 0x36
 8002798:	e015      	b.n	80027c6 <HAL_SPI_Transmit+0x24a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800279a:	f7fe fad3 	bl	8000d44 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d803      	bhi.n	80027b2 <HAL_SPI_Transmit+0x236>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d102      	bne.n	80027b8 <HAL_SPI_Transmit+0x23c>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_SPI_Transmit+0x24a>
        {
          errorcode = HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027c4:	e036      	b.n	8002834 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1c9      	bne.n	8002764 <HAL_SPI_Transmit+0x1e8>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d8:	d107      	bne.n	80027ea <HAL_SPI_Transmit+0x26e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027e8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fcf4 	bl	80031dc <SPI_EndRxTxTransaction>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e003      	b.n	8002834 <HAL_SPI_Transmit+0x2b8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800283c:	7ffb      	ldrb	r3, [r7, #31]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b08a      	sub	sp, #40	; 0x28
 800284a:	af02      	add	r7, sp, #8
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	77fb      	strb	r3, [r7, #31]

  if (hspi->State != HAL_SPI_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Receive+0x2a>
  {
    errorcode = HAL_BUSY;
 800286a:	2302      	movs	r3, #2
 800286c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800286e:	e199      	b.n	8002ba4 <HAL_SPI_Receive+0x35e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002878:	d112      	bne.n	80028a0 <HAL_SPI_Receive+0x5a>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10e      	bne.n	80028a0 <HAL_SPI_Receive+0x5a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2204      	movs	r2, #4
 8002886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f98d 	bl	8002bb6 <HAL_SPI_TransmitReceive>
 800289c:	4603      	mov	r3, r0
 800289e:	e186      	b.n	8002bae <HAL_SPI_Receive+0x368>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_SPI_Receive+0x68>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e17f      	b.n	8002bae <HAL_SPI_Receive+0x368>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028b6:	f7fe fa45 	bl	8000d44 <HAL_GetTick>
 80028ba:	61b8      	str	r0, [r7, #24]

  if ((pData == NULL) || (Size == 0U))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_SPI_Receive+0x82>
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028cc:	e16a      	b.n	8002ba4 <HAL_SPI_Receive+0x35e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2204      	movs	r2, #4
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002914:	d116      	bne.n	8002944 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002934:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294c:	d10f      	bne.n	800296e <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d007      	beq.n	800298c <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d16a      	bne.n	8002a6a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002994:	e032      	b.n	80029fc <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d115      	bne.n	80029d0 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f103 020c 	add.w	r2, r3, #12
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029ce:	e015      	b.n	80029fc <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029d0:	f7fe f9b8 	bl	8000d44 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d803      	bhi.n	80029e8 <HAL_SPI_Receive+0x1a2>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d102      	bne.n	80029ee <HAL_SPI_Receive+0x1a8>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029fa:	e0d3      	b.n	8002ba4 <HAL_SPI_Receive+0x35e>
    while (hspi->RxXferCount > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1c7      	bne.n	8002996 <HAL_SPI_Receive+0x150>
 8002a06:	e035      	b.n	8002a74 <HAL_SPI_Receive+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d113      	bne.n	8002a3e <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	b292      	uxth	r2, r2
 8002a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	1c9a      	adds	r2, r3, #2
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a3c:	e015      	b.n	8002a6a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a3e:	f7fe f981 	bl	8000d44 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d803      	bhi.n	8002a56 <HAL_SPI_Receive+0x210>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d102      	bne.n	8002a5c <HAL_SPI_Receive+0x216>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002a68:	e09c      	b.n	8002ba4 <HAL_SPI_Receive+0x35e>
    while (hspi->RxXferCount > 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1c9      	bne.n	8002a08 <HAL_SPI_Receive+0x1c2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7c:	d153      	bne.n	8002b26 <HAL_SPI_Receive+0x2e0>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Check if CRCNEXT is well reset by hardware */
    if (READ_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_SPI_Receive+0x266>
    {
      /* Workaround to force CRCNEXT bit to zero in case of CRCNEXT is not reset automatically by hardware */
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aaa:	601a      	str	r2, [r3, #0]
    }
    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fab6 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_Receive+0x282>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002ac6:	e06d      	b.n	8002ba4 <HAL_SPI_Receive+0x35e>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad0:	d107      	bne.n	8002ae2 <HAL_SPI_Receive+0x29c>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	b292      	uxth	r2, r2
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	e008      	b.n	8002af4 <HAL_SPI_Receive+0x2ae>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f103 020c 	add.w	r2, r3, #12
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	7812      	ldrb	r2, [r2, #0]
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	2101      	movs	r1, #1
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fa92 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_SPI_Receive+0x2d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002b1a:	e043      	b.n	8002ba4 <HAL_SPI_Receive+0x35e>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002b24:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fb04 	bl	8003138 <SPI_EndRxTransaction>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_Receive+0x2f6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d121      	bne.n	8002b8e <HAL_SPI_Receive+0x348>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fb64 	bl	8003218 <SPI_ISCRCErrorValid>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d116      	bne.n	8002b84 <HAL_SPI_Receive+0x33e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e004      	b.n	8002b8e <HAL_SPI_Receive+0x348>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002b8c:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Receive+0x356>
  {
    errorcode = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	e003      	b.n	8002ba4 <HAL_SPI_Receive+0x35e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b08e      	sub	sp, #56	; 0x38
 8002bba:	af02      	add	r7, sp, #8
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x2a>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e21e      	b.n	800301e <HAL_SPI_TransmitReceive+0x468>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be8:	f7fe f8ac 	bl	8000d44 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d00f      	beq.n	8002c2a <HAL_SPI_TransmitReceive+0x74>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c10:	d107      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x6c>
 8002c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d003      	beq.n	8002c2a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c28:	e1f3      	b.n	8003012 <HAL_SPI_TransmitReceive+0x45c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x86>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x86>
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c42:	e1e6      	b.n	8003012 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d003      	beq.n	8002c58 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2205      	movs	r2, #5
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	887a      	ldrh	r2, [r7, #2]
 8002c6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	d10f      	bne.n	8002cb8 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d007      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cde:	f040 808f 	bne.w	8002e00 <HAL_SPI_TransmitReceive+0x24a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x13a>
 8002cea:	8b7b      	ldrh	r3, [r7, #26]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d17c      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x234>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	881a      	ldrh	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	1c9a      	adds	r2, r3, #2
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d14:	e069      	b.n	8002dea <HAL_SPI_TransmitReceive+0x234>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d12d      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x1ca>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x1ca>
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d125      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x1ca>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6e:	d107      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d7e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d119      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x20c>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d014      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	b292      	uxth	r2, r2
 8002da4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dc2:	f7fd ffbf 	bl	8000d44 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d80b      	bhi.n	8002dea <HAL_SPI_TransmitReceive+0x234>
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d007      	beq.n	8002dea <HAL_SPI_TransmitReceive+0x234>
      {
        errorcode = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002de8:	e113      	b.n	8003012 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d190      	bne.n	8002d16 <HAL_SPI_TransmitReceive+0x160>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d18b      	bne.n	8002d16 <HAL_SPI_TransmitReceive+0x160>
 8002dfe:	e093      	b.n	8002f28 <HAL_SPI_TransmitReceive+0x372>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_SPI_TransmitReceive+0x25a>
 8002e08:	8b7b      	ldrh	r3, [r7, #26]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f040 8082 	bne.w	8002f14 <HAL_SPI_TransmitReceive+0x35e>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e36:	e06d      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x35e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d12e      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x2ee>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d029      	beq.n	8002ea4 <HAL_SPI_TransmitReceive+0x2ee>
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d126      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x2ee>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x2ee>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e92:	d107      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x2ee>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ea2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d119      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x330>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d014      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0x330>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ee6:	f7fd ff2d 	bl	8000d44 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d803      	bhi.n	8002efe <HAL_SPI_TransmitReceive+0x348>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d102      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x34e>
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x35e>
      {
        errorcode = HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002f12:	e07e      	b.n	8003012 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d18c      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x282>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d187      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x282>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f30:	d119      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x3b0>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f873 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x3a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f043 0202 	orr.w	r2, r3, #2
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8002f5a:	e05a      	b.n	8003012 <HAL_SPI_TransmitReceive+0x45c>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002f64:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d124      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x408>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f94f 	bl	8003218 <SPI_ISCRCErrorValid>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d119      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x3fe>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0202 	orr.w	r2, r3, #2
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002faa:	601a      	str	r2, [r3, #0]

      errorcode = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fb2:	e004      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x408>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002fbc:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f90a 	bl	80031dc <SPI_EndRxTxTransaction>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x426>
  {
    errorcode = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fda:	e01a      	b.n	8003012 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x444>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003008:	e003      	b.n	8003012 <HAL_SPI_TransmitReceive+0x45c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800301a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800301e:	4618      	mov	r0, r3
 8003020:	3730      	adds	r7, #48	; 0x30
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003038:	f7fd fe84 	bl	8000d44 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	4413      	add	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003048:	f7fd fe7c 	bl	8000d44 <HAL_GetTick>
 800304c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	0d1b      	lsrs	r3, r3, #20
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800305e:	e054      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d050      	beq.n	800310a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003068:	f7fd fe6c 	bl	8000d44 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	d902      	bls.n	800307e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d13d      	bne.n	80030fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800308c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003096:	d111      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a0:	d004      	beq.n	80030ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	d107      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d10f      	bne.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e017      	b.n	800312a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3b01      	subs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d19b      	bne.n	8003060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000

08003138 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314c:	d111      	bne.n	8003172 <SPI_EndRxTransaction+0x3a>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d004      	beq.n	8003162 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003160:	d107      	bne.n	8003172 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003170:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317a:	d117      	bne.n	80031ac <SPI_EndRxTransaction+0x74>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	d112      	bne.n	80031ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2200      	movs	r2, #0
 800318e:	2101      	movs	r1, #1
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff ff49 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01a      	beq.n	80031d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f043 0220 	orr.w	r2, r3, #32
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e013      	b.n	80031d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff ff36 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e000      	b.n	80031d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff ff18 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e000      	b.n	8003210 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  }
#endif /* USE_SPI_CRC_ERROR_WORKAROUND */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 8003220:	2301      	movs	r3, #1
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b092      	sub	sp, #72	; 0x48
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
#elif defined (RTC_CLOCK_SOURCE_HSE)
  /* Configue HSE as RTC clock soucre */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003238:	2301      	movs	r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800323c:	2300      	movs	r3, #0
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003244:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8003246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800324a:	60fb      	str	r3, [r7, #12]
#else
#error Please select the RTC Clock source
#endif /* RTC_CLOCK_SOURCE_LSE */
  status = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800324c:	f107 0318 	add.w	r3, r7, #24
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fa59 	bl	8001708 <HAL_RCC_OscConfig>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (status == HAL_OK)
 800325c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003260:	2b00      	cmp	r3, #0
 8003262:	d127      	bne.n	80032b4 <HAL_InitTick+0x88>
  {
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003264:	2301      	movs	r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
    status = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe fe47 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (status == HAL_OK)
 8003278:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800327c:	2b00      	cmp	r3, #0
 800327e:	d119      	bne.n	80032b4 <HAL_InitTick+0x88>
    {
      /* Enable RTC Clock */
      __HAL_RCC_RTC_ENABLE();
 8003280:	4b58      	ldr	r3, [pc, #352]	; (80033e4 <HAL_InitTick+0x1b8>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

      /* Configure RTC time base to 10Khz */
      hRTC_Handle.Instance = RTC;
 8003286:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <HAL_InitTick+0x1bc>)
 8003288:	4a58      	ldr	r2, [pc, #352]	; (80033ec <HAL_InitTick+0x1c0>)
 800328a:	601a      	str	r2, [r3, #0]
      hRTC_Handle.Init.AsynchPrediv = (HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC) / 10000) - 1;
 800328c:	2001      	movs	r0, #1
 800328e:	f7fe feed 	bl	800206c <HAL_RCCEx_GetPeriphCLKFreq>
 8003292:	4603      	mov	r3, r0
 8003294:	4a56      	ldr	r2, [pc, #344]	; (80033f0 <HAL_InitTick+0x1c4>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0b5b      	lsrs	r3, r3, #13
 800329c:	3b01      	subs	r3, #1
 800329e:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_InitTick+0x1bc>)
 80032a0:	6053      	str	r3, [r2, #4]
      hRTC_Handle.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_InitTick+0x1bc>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
      status = HAL_RTC_Init(&hRTC_Handle);
 80032a8:	484f      	ldr	r0, [pc, #316]	; (80033e8 <HAL_InitTick+0x1bc>)
 80032aa:	f7fe ff95 	bl	80021d8 <HAL_RTC_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }
  if (status == HAL_OK)
 80032b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d127      	bne.n	800330c <HAL_InitTick+0xe0>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(&hRTC_Handle);
 80032bc:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_InitTick+0x1bc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_InitTick+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0210 	orr.w	r2, r2, #16
 80032ca:	605a      	str	r2, [r3, #4]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(&hRTC_Handle, RTC_FLAG_ALRAF);
 80032cc:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_InitTick+0x1bc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_InitTick+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0202 	bic.w	r2, r2, #2
 80032da:	605a      	str	r2, [r3, #4]

    counter = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	643b      	str	r3, [r7, #64]	; 0x40
    /* Wait till RTC ALRAF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(&hRTC_Handle, RTC_FLAG_ALRAF) != RESET)
 80032e0:	e00d      	b.n	80032fe <HAL_InitTick+0xd2>
    {
      if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 80032e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	643a      	str	r2, [r7, #64]	; 0x40
 80032e8:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <HAL_InitTick+0x1c8>)
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	4942      	ldr	r1, [pc, #264]	; (80033f8 <HAL_InitTick+0x1cc>)
 80032ee:	fba1 1202 	umull	r1, r2, r1, r2
 80032f2:	0952      	lsrs	r2, r2, #5
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d102      	bne.n	80032fe <HAL_InitTick+0xd2>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    while (__HAL_RTC_ALARM_GET_FLAG(&hRTC_Handle, RTC_FLAG_ALRAF) != RESET)
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_InitTick+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ea      	bne.n	80032e2 <HAL_InitTick+0xb6>
      }
    }
  }
  if (status == HAL_OK)
 800330c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003310:	2b00      	cmp	r3, #0
 8003312:	d14b      	bne.n	80033ac <HAL_InitTick+0x180>
  {
    /* Set RTC COUNTER MSB word */
    hRTC_Handle.Instance->ALRH = 0x00U;
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_InitTick+0x1bc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2200      	movs	r2, #0
 800331a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    hRTC_Handle.Instance->ALRL = 0x09U;
 800331c:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <HAL_InitTick+0x1bc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2209      	movs	r2, #9
 8003322:	625a      	str	r2, [r3, #36]	; 0x24

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003324:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_InitTick+0x1d0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a34      	ldr	r2, [pc, #208]	; (80033fc <HAL_InitTick+0x1d0>)
 800332a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003330:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_InitTick+0x1d0>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a31      	ldr	r2, [pc, #196]	; (80033fc <HAL_InitTick+0x1d0>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333a:	6093      	str	r3, [r2, #8]

    /* Clear Second and overflow flags */
    CLEAR_BIT(hRTC_Handle.Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_InitTick+0x1bc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_InitTick+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0205 	bic.w	r2, r2, #5
 800334a:	605a      	str	r2, [r3, #4]

    /* Set RTC COUNTER MSB word */
    hRTC_Handle.Instance->CNTH = 0x00U;
 800334c:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_InitTick+0x1bc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    hRTC_Handle.Instance->CNTL = 0x00U;
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_InitTick+0x1bc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(&hRTC_Handle, RTC_IT_ALRA);
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_InitTick+0x1bc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <HAL_InitTick+0x1bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0202 	orr.w	r2, r2, #2
 800336a:	601a      	str	r2, [r3, #0]

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(&hRTC_Handle);
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_InitTick+0x1bc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_InitTick+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0210 	bic.w	r2, r2, #16
 800337a:	605a      	str	r2, [r3, #4]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    counter = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
    while ((hRTC_Handle.Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003380:	e00d      	b.n	800339e <HAL_InitTick+0x172>
    {
      if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 8003382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	643a      	str	r2, [r7, #64]	; 0x40
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_InitTick+0x1c8>)
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	491a      	ldr	r1, [pc, #104]	; (80033f8 <HAL_InitTick+0x1cc>)
 800338e:	fba1 1202 	umull	r1, r2, r1, r2
 8003392:	0952      	lsrs	r2, r2, #5
 8003394:	4293      	cmp	r3, r2
 8003396:	d102      	bne.n	800339e <HAL_InitTick+0x172>
      {
        status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    while ((hRTC_Handle.Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_InitTick+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ea      	beq.n	8003382 <HAL_InitTick+0x156>
      }
    } 
  }
  if (status == HAL_OK)
 80033ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d111      	bne.n	80033d8 <HAL_InitTick+0x1ac>
  {
    /* Enable the RTC global Interrupt */
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80033b4:	2029      	movs	r0, #41	; 0x29
 80033b6:	f7fd fdc4 	bl	8000f42 <HAL_NVIC_EnableIRQ>

    /* Configure the SysTick IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d808      	bhi.n	80033d2 <HAL_InitTick+0x1a6>
    {
      HAL_NVIC_SetPriority(RTC_Alarm_IRQn, TickPriority ,0U);
 80033c0:	2200      	movs	r2, #0
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	2029      	movs	r0, #41	; 0x29
 80033c6:	f7fd fda0 	bl	8000f0a <HAL_NVIC_SetPriority>
      uwTickPrio = TickPriority;
 80033ca:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <HAL_InitTick+0x1d4>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e002      	b.n	80033d8 <HAL_InitTick+0x1ac>
    }
    else
    {
      status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }

  return status;
 80033d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3748      	adds	r7, #72	; 0x48
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	4242043c 	.word	0x4242043c
 80033e8:	200000c0 	.word	0x200000c0
 80033ec:	40002800 	.word	0x40002800
 80033f0:	d1b71759 	.word	0xd1b71759
 80033f4:	20000000 	.word	0x20000000
 80033f8:	aaaaaaab 	.word	0xaaaaaaab
 80033fc:	40010400 	.word	0x40010400
 8003400:	20000004 	.word	0x20000004

08003404 <HAL_RTC_AlarmAEventCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]

  HAL_IncTick();
 8003410:	f7fd fc86 	bl	8000d20 <HAL_IncTick>

  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0210 	orr.w	r2, r2, #16
 8003422:	605a      	str	r2, [r3, #4]

  /* Set RTC COUNTER MSB word */
  WRITE_REG(hrtc->Instance->CNTH, 0x00U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  WRITE_REG(hrtc->Instance->CNTL, 0x00U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]

  /* Clear Second and overflow flags */
  CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0205 	bic.w	r2, r2, #5
 8003442:	605a      	str	r2, [r3, #4]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0210 	bic.w	r2, r2, #16
 8003452:	605a      	str	r2, [r3, #4]

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003454:	e00a      	b.n	800346c <HAL_RTC_AlarmAEventCallback+0x68>
  {
    if (counter++ == SystemCoreClock / 48U) /* Timeout = ~ 1s */
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	60fa      	str	r2, [r7, #12]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_RTC_AlarmAEventCallback+0x84>)
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	490a      	ldr	r1, [pc, #40]	; (800348c <HAL_RTC_AlarmAEventCallback+0x88>)
 8003462:	fba1 1202 	umull	r1, r2, r1, r2
 8003466:	0952      	lsrs	r2, r2, #5
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_RTC_AlarmAEventCallback+0x78>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0ed      	beq.n	8003456 <HAL_RTC_AlarmAEventCallback+0x52>
    {
      break;
    }
  }
}
 800347a:	e000      	b.n	800347e <HAL_RTC_AlarmAEventCallback+0x7a>
      break;
 800347c:	bf00      	nop
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000000 	.word	0x20000000
 800348c:	aaaaaaab 	.word	0xaaaaaaab

08003490 <RTC_Alarm_IRQHandler>:
/**
  * @brief  This function handles RTC ALARM interrupt request.
  * @retval None
  */
void RTC_Alarm_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  HAL_RTC_AlarmIRQHandler(&hRTC_Handle);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <RTC_Alarm_IRQHandler+0x10>)
 8003496:	f7fe ff35 	bl	8002304 <HAL_RTC_AlarmIRQHandler>
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200000c0 	.word	0x200000c0

080034a4 <exti_buttonConfig>:
 */

#include "exti.h"

void exti_buttonConfig(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <exti_buttonConfig+0x60>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <exti_buttonConfig+0x60>)
 80034be:	f043 0308 	orr.w	r3, r3, #8
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <exti_buttonConfig+0x60>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStruct.Pin = ENTER | DOWN;
 80034d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING ;
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <exti_buttonConfig+0x64>)
 80034d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2302      	movs	r3, #2
 80034dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	4619      	mov	r1, r3
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <exti_buttonConfig+0x68>)
 80034e6:	f7fd ff3b 	bl	8001360 <HAL_GPIO_Init>

    //Enable Interupt
    HAL_NVIC_SetPriority(EXTI15_10_IRQn ,0,0);// Đặt ưu tiên cho các ngắt EXTI
 80034ea:	2200      	movs	r2, #0
 80034ec:	2100      	movs	r1, #0
 80034ee:	2028      	movs	r0, #40	; 0x28
 80034f0:	f7fd fd0b 	bl	8000f0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);// Kích hoạt ngắt EXTI
 80034f4:	2028      	movs	r0, #40	; 0x28
 80034f6:	f7fd fd24 	bl	8000f42 <HAL_NVIC_EnableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	10210000 	.word	0x10210000
 800350c:	40010c00 	.word	0x40010c00

08003510 <Flash_Erase>:



#include <flash.h>

void Flash_Erase(uint32_t address){
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8003518:	f7fd fd92 	bl	8001040 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8003520:	2301      	movs	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 800352c:	f107 020c 	add.w	r2, r7, #12
 8003530:	f107 0310 	add.w	r3, r7, #16
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fe6a 	bl	8001210 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800353c:	f7fd fda6 	bl	800108c <HAL_FLASH_Lock>
}
 8003540:	bf00      	nop
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8003548:	b5b0      	push	{r4, r5, r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8003554:	f7fd fd74 	bl	8001040 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8003558:	887b      	ldrh	r3, [r7, #2]
 800355a:	2200      	movs	r2, #0
 800355c:	461c      	mov	r4, r3
 800355e:	4615      	mov	r5, r2
 8003560:	4622      	mov	r2, r4
 8003562:	462b      	mov	r3, r5
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	2001      	movs	r0, #1
 8003568:	f7fd fcfa 	bl	8000f60 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800356c:	f7fd fd8e 	bl	800108c <HAL_FLASH_Lock>
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bdb0      	pop	{r4, r5, r7, pc}

08003578 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8003586:	f7fd fd5b 	bl	8001040 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 800358a:	2300      	movs	r3, #0
 800358c:	82fb      	strh	r3, [r7, #22]
 800358e:	e00c      	b.n	80035aa <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8003590:	8afa      	ldrh	r2, [r7, #22]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	18d0      	adds	r0, r2, r3
 8003596:	8afb      	ldrh	r3, [r7, #22]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	4619      	mov	r1, r3
 80035a0:	f7ff ffd2 	bl	8003548 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80035a4:	8afb      	ldrh	r3, [r7, #22]
 80035a6:	3302      	adds	r3, #2
 80035a8:	82fb      	strh	r3, [r7, #22]
 80035aa:	8afa      	ldrh	r2, [r7, #22]
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d3ee      	bcc.n	8003590 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 80035b2:	f7fd fd6b 	bl	800108c <HAL_FLASH_Lock>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <Flash_Read_2Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
	return *(__IO uint8_t *)(address);
}
uint16_t Flash_Read_2Byte(uint32_t address){
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <Flash_Read_4Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
	return *(__IO uint32_t *)(address);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <gpio_Init>:
 *      Author: dell
 */
#include "gpio.h"

void gpio_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <gpio_Init+0x78>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <gpio_Init+0x78>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b15      	ldr	r3, [pc, #84]	; (8003664 <gpio_Init+0x78>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStruct.Pin = REDLED | GREENLED | LOCK | BUZZER;
 8003618:	f640 0307 	movw	r3, #2055	; 0x807
 800361c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361e:	2301      	movs	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003622:	2302      	movs	r3, #2
 8003624:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003626:	f107 0308 	add.w	r3, r7, #8
 800362a:	4619      	mov	r1, r3
 800362c:	480e      	ldr	r0, [pc, #56]	; (8003668 <gpio_Init+0x7c>)
 800362e:	f7fd fe97 	bl	8001360 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, REDLED, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2101      	movs	r1, #1
 8003636:	480c      	ldr	r0, [pc, #48]	; (8003668 <gpio_Init+0x7c>)
 8003638:	f7fe f816 	bl	8001668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GREENLED, 0);
 800363c:	2200      	movs	r2, #0
 800363e:	2102      	movs	r1, #2
 8003640:	4809      	ldr	r0, [pc, #36]	; (8003668 <gpio_Init+0x7c>)
 8003642:	f7fe f811 	bl	8001668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LOCK, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800364c:	4806      	ldr	r0, [pc, #24]	; (8003668 <gpio_Init+0x7c>)
 800364e:	f7fe f80b 	bl	8001668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BUZZER, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2104      	movs	r1, #4
 8003656:	4804      	ldr	r0, [pc, #16]	; (8003668 <gpio_Init+0x7c>)
 8003658:	f7fe f806 	bl	8001668 <HAL_GPIO_WritePin>
}
 800365c:	bf00      	nop
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	40010800 	.word	0x40010800

0800366c <LCD_config_gpio>:

#include "lcd_4bit.h"


void LCD_config_gpio()
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <LCD_config_gpio+0x8c>)
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <LCD_config_gpio+0x8c>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	6193      	str	r3, [r2, #24]
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <LCD_config_gpio+0x8c>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <LCD_config_gpio+0x8c>)
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <LCD_config_gpio+0x8c>)
 8003690:	f043 0308 	orr.w	r3, r3, #8
 8003694:	6193      	str	r3, [r2, #24]
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <LCD_config_gpio+0x8c>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
    // Khởi tạo chân GPIO
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = LCD_RS | LCD_E;
 80036a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036a6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a8:	2301      	movs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH ;
 80036ac:	2303      	movs	r3, #3
 80036ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LCD_PORT, &GPIO_InitStruct);
 80036b0:	f107 0308 	add.w	r3, r7, #8
 80036b4:	4619      	mov	r1, r3
 80036b6:	4811      	ldr	r0, [pc, #68]	; (80036fc <LCD_config_gpio+0x90>)
 80036b8:	f7fd fe52 	bl	8001360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 80036bc:	f640 4303 	movw	r3, #3075	; 0xc03
 80036c0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c2:	2301      	movs	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH ;
 80036c6:	2303      	movs	r3, #3
 80036c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4619      	mov	r1, r3
 80036d0:	480b      	ldr	r0, [pc, #44]	; (8003700 <LCD_config_gpio+0x94>)
 80036d2:	f7fd fe45 	bl	8001360 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LCD_PORT, LCD_RS | LCD_E, GPIO_PIN_RESET);
 80036d6:	2200      	movs	r2, #0
 80036d8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80036dc:	4807      	ldr	r0, [pc, #28]	; (80036fc <LCD_config_gpio+0x90>)
 80036de:	f7fd ffc3 	bl	8001668 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7, GPIO_PIN_RESET);
 80036e2:	2200      	movs	r2, #0
 80036e4:	f640 4103 	movw	r1, #3075	; 0xc03
 80036e8:	4805      	ldr	r0, [pc, #20]	; (8003700 <LCD_config_gpio+0x94>)
 80036ea:	f7fd ffbd 	bl	8001668 <HAL_GPIO_WritePin>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010800 	.word	0x40010800
 8003700:	40010c00 	.word	0x40010c00

08003704 <LCD_Write>:
void LCD_Write(uint8_t Data, uint8_t Mode)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	460a      	mov	r2, r1
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	4613      	mov	r3, r2
 8003712:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_H = Data >> 4;
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	73bb      	strb	r3, [r7, #14]
	if (Mode == cmd_reg)
 800371e:	79bb      	ldrb	r3, [r7, #6]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <LCD_Write+0x2e>
	{
		HAL_GPIO_WritePin(LCD_PORT, LCD_RS, GPIO_PIN_RESET); // RS = 0, write cmd
 8003724:	2200      	movs	r2, #0
 8003726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800372a:	484f      	ldr	r0, [pc, #316]	; (8003868 <LCD_Write+0x164>)
 800372c:	f7fd ff9c 	bl	8001668 <HAL_GPIO_WritePin>
 8003730:	e008      	b.n	8003744 <LCD_Write+0x40>
	}
	else if (Mode == data_reg)
 8003732:	79bb      	ldrb	r3, [r7, #6]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <LCD_Write+0x40>
	{
		HAL_GPIO_WritePin(LCD_PORT, LCD_RS,GPIO_PIN_SET); // RS = 1, write data
 8003738:	2201      	movs	r2, #1
 800373a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800373e:	484a      	ldr	r0, [pc, #296]	; (8003868 <LCD_Write+0x164>)
 8003740:	f7fd ff92 	bl	8001668 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOB, LCD_D4, Data_H & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	2101      	movs	r1, #1
 8003750:	4846      	ldr	r0, [pc, #280]	; (800386c <LCD_Write+0x168>)
 8003752:	f7fd ff89 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_D5, Data_H >> 1 & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	2102      	movs	r1, #2
 8003766:	4841      	ldr	r0, [pc, #260]	; (800386c <LCD_Write+0x168>)
 8003768:	f7fd ff7e 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_D6, Data_H >> 2 & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800377e:	483b      	ldr	r0, [pc, #236]	; (800386c <LCD_Write+0x168>)
 8003780:	f7fd ff72 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_D7, Data_H >> 3 & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003796:	4835      	ldr	r0, [pc, #212]	; (800386c <LCD_Write+0x168>)
 8003798:	f7fd ff66 	bl	8001668 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT, LCD_E, GPIO_PIN_RESET);
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037a2:	4831      	ldr	r0, [pc, #196]	; (8003868 <LCD_Write+0x164>)
 80037a4:	f7fd ff60 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80037a8:	2001      	movs	r0, #1
 80037aa:	f7fd fad5 	bl	8000d58 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, LCD_E, GPIO_PIN_SET);
 80037ae:	2201      	movs	r2, #1
 80037b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037b4:	482c      	ldr	r0, [pc, #176]	; (8003868 <LCD_Write+0x164>)
 80037b6:	f7fd ff57 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7fd facc 	bl	8000d58 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, LCD_E, GPIO_PIN_RESET);
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037c6:	4828      	ldr	r0, [pc, #160]	; (8003868 <LCD_Write+0x164>)
 80037c8:	f7fd ff4e 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80037cc:	2001      	movs	r0, #1
 80037ce:	f7fd fac3 	bl	8000d58 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, LCD_D4, Data_L & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80037d2:	7bbb      	ldrb	r3, [r7, #14]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	2101      	movs	r1, #1
 80037de:	4823      	ldr	r0, [pc, #140]	; (800386c <LCD_Write+0x168>)
 80037e0:	f7fd ff42 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_D5, Data_L >> 1 & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	2102      	movs	r1, #2
 80037f4:	481d      	ldr	r0, [pc, #116]	; (800386c <LCD_Write+0x168>)
 80037f6:	f7fd ff37 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_D6, Data_L >> 2 & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80037fa:	7bbb      	ldrb	r3, [r7, #14]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800380c:	4817      	ldr	r0, [pc, #92]	; (800386c <LCD_Write+0x168>)
 800380e:	f7fd ff2b 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_D7, Data_L >> 3 & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003812:	7bbb      	ldrb	r3, [r7, #14]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003824:	4811      	ldr	r0, [pc, #68]	; (800386c <LCD_Write+0x168>)
 8003826:	f7fd ff1f 	bl	8001668 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT, LCD_E, GPIO_PIN_RESET);
 800382a:	2200      	movs	r2, #0
 800382c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003830:	480d      	ldr	r0, [pc, #52]	; (8003868 <LCD_Write+0x164>)
 8003832:	f7fd ff19 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003836:	2001      	movs	r0, #1
 8003838:	f7fd fa8e 	bl	8000d58 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, LCD_E, GPIO_PIN_SET);
 800383c:	2201      	movs	r2, #1
 800383e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003842:	4809      	ldr	r0, [pc, #36]	; (8003868 <LCD_Write+0x164>)
 8003844:	f7fd ff10 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003848:	2001      	movs	r0, #1
 800384a:	f7fd fa85 	bl	8000d58 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, LCD_E, GPIO_PIN_RESET);
 800384e:	2200      	movs	r2, #0
 8003850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003854:	4804      	ldr	r0, [pc, #16]	; (8003868 <LCD_Write+0x164>)
 8003856:	f7fd ff07 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800385a:	2001      	movs	r0, #1
 800385c:	f7fd fa7c 	bl	8000d58 <HAL_Delay>
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40010800 	.word	0x40010800
 800386c:	40010c00 	.word	0x40010c00

08003870 <LCD_Init>:

void LCD_Init()
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0

	HAL_Delay(150);
 8003874:	2096      	movs	r0, #150	; 0x96
 8003876:	f7fd fa6f 	bl	8000d58 <HAL_Delay>
	LCD_Write(0x33, cmd_reg);
 800387a:	2100      	movs	r1, #0
 800387c:	2033      	movs	r0, #51	; 0x33
 800387e:	f7ff ff41 	bl	8003704 <LCD_Write>
	HAL_Delay(50);
 8003882:	2032      	movs	r0, #50	; 0x32
 8003884:	f7fd fa68 	bl	8000d58 <HAL_Delay>
	LCD_Write(0x33, cmd_reg);
 8003888:	2100      	movs	r1, #0
 800388a:	2033      	movs	r0, #51	; 0x33
 800388c:	f7ff ff3a 	bl	8003704 <LCD_Write>
	HAL_Delay(50);
 8003890:	2032      	movs	r0, #50	; 0x32
 8003892:	f7fd fa61 	bl	8000d58 <HAL_Delay>
	LCD_Write(0x32, cmd_reg);
 8003896:	2100      	movs	r1, #0
 8003898:	2032      	movs	r0, #50	; 0x32
 800389a:	f7ff ff33 	bl	8003704 <LCD_Write>
	HAL_Delay(50);
 800389e:	2032      	movs	r0, #50	; 0x32
 80038a0:	f7fd fa5a 	bl	8000d58 <HAL_Delay>

	LCD_Write(LCD_FUNCTIONSET, cmd_reg);
 80038a4:	2100      	movs	r1, #0
 80038a6:	2028      	movs	r0, #40	; 0x28
 80038a8:	f7ff ff2c 	bl	8003704 <LCD_Write>
	LCD_Write(LCD_CLEARDISPLAY, cmd_reg);
 80038ac:	2100      	movs	r1, #0
 80038ae:	2001      	movs	r0, #1
 80038b0:	f7ff ff28 	bl	8003704 <LCD_Write>
	HAL_Delay(2);
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7fd fa4f 	bl	8000d58 <HAL_Delay>
	LCD_Write(LCD_DISPLAYONOFF, cmd_reg);
 80038ba:	2100      	movs	r1, #0
 80038bc:	200c      	movs	r0, #12
 80038be:	f7ff ff21 	bl	8003704 <LCD_Write>
	LCD_Write(LCD_ENTRYMODESET, cmd_reg);
 80038c2:	2100      	movs	r1, #0
 80038c4:	2006      	movs	r0, #6
 80038c6:	f7ff ff1d 	bl	8003704 <LCD_Write>

	LCD_Write(LCD_CLEARDISPLAY, cmd_reg);
 80038ca:	2100      	movs	r1, #0
 80038cc:	2001      	movs	r0, #1
 80038ce:	f7ff ff19 	bl	8003704 <LCD_Write>
	HAL_Delay(2);
 80038d2:	2002      	movs	r0, #2
 80038d4:	f7fd fa40 	bl	8000d58 <HAL_Delay>
	LCD_Write(LCD_RETURNHOME, cmd_reg);
 80038d8:	2100      	movs	r1, #0
 80038da:	2002      	movs	r0, #2
 80038dc:	f7ff ff12 	bl	8003704 <LCD_Write>
}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <SetCursor>:

void SetCursor(uint8_t Xpos, uint8_t Ypos)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	460a      	mov	r2, r1
 80038ee:	71fb      	strb	r3, [r7, #7]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71bb      	strb	r3, [r7, #6]
	uint8_t DRAM_ADDRESS = 0x00;
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <SetCursor+0x54>)
 80038fa:	60bb      	str	r3, [r7, #8]
	if (Xpos >= 16)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d901      	bls.n	8003906 <SetCursor+0x22>
	{
		Xpos = 16 - 1;
 8003902:	230f      	movs	r3, #15
 8003904:	71fb      	strb	r3, [r7, #7]
	}
	if (Ypos >= 2)
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d901      	bls.n	8003910 <SetCursor+0x2c>
	{
		Ypos = 2;
 800390c:	2302      	movs	r3, #2
 800390e:	71bb      	strb	r3, [r7, #6]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8003910:	79bb      	ldrb	r3, [r7, #6]
 8003912:	3310      	adds	r3, #16
 8003914:	443b      	add	r3, r7
 8003916:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	4413      	add	r3, r2
 800391e:	73fb      	strb	r3, [r7, #15]
	LCD_Write(LCD_SETDDRAMADDR | DRAM_ADDRESS, cmd_reg);
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff feea 	bl	8003704 <LCD_Write>
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	54144000 	.word	0x54144000

0800393c <WriteChar>:
void WriteChar(char character)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
	LCD_Write(character, data_reg);
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff feda 	bl	8003704 <LCD_Write>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <WriteString>:
void WriteString(char *String)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	while (*String)
 8003960:	e006      	b.n	8003970 <WriteString+0x18>
	{
		WriteChar(*String++);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ffe6 	bl	800393c <WriteChar>
	while (*String)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f4      	bne.n	8003962 <WriteString+0xa>
		//		HAL_Delay(100);
	}
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <Clear>:
void Clear()
{
 8003982:	b580      	push	{r7, lr}
 8003984:	af00      	add	r7, sp, #0
	LCD_Write(LCD_CLEARDISPLAY, cmd_reg);
 8003986:	2100      	movs	r1, #0
 8003988:	2001      	movs	r0, #1
 800398a:	f7ff febb 	bl	8003704 <LCD_Write>
	HAL_Delay(5);
 800398e:	2005      	movs	r0, #5
 8003990:	f7fd f9e2 	bl	8000d58 <HAL_Delay>
}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}

08003998 <rc522_init>:

/**
 * @brief initialize function
 */
void rc522_init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  rc522_reset();
 800399c:	f000 f8a0 	bl	8003ae0 <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	202a      	movs	r0, #42	; 0x2a
 80039a4:	f000 f842 	bl	8003a2c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 80039a8:	21a9      	movs	r1, #169	; 0xa9
 80039aa:	202b      	movs	r0, #43	; 0x2b
 80039ac:	f000 f83e 	bl	8003a2c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 80039b0:	21e8      	movs	r1, #232	; 0xe8
 80039b2:	202d      	movs	r0, #45	; 0x2d
 80039b4:	f000 f83a 	bl	8003a2c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 80039b8:	2103      	movs	r1, #3
 80039ba:	202c      	movs	r0, #44	; 0x2c
 80039bc:	f000 f836 	bl	8003a2c <rc522_regWrite8>

  /* 48dB gain */
//  rc522_regWrite8(MFRC522_REG_RF_CFG, 0x70);

  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	2015      	movs	r0, #21
 80039c4:	f000 f832 	bl	8003a2c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 80039c8:	213d      	movs	r1, #61	; 0x3d
 80039ca:	2011      	movs	r0, #17
 80039cc:	f000 f82e 	bl	8003a2c <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 80039d0:	f000 f88e 	bl	8003af0 <rc522_antennaON>
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <rc522_regRead8>:

/**
 * @brief read register
 */
uint8_t rc522_regRead8(uint8_t reg)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
  spi_CS1_enable();
 80039e2:	f000 fb49 	bl	8004078 <spi_CS1_enable>
  reg = ((reg << 1) & 0x7E) | 0x80;
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80039f0:	b25b      	sxtb	r3, r3
 80039f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f6:	b25b      	sxtb	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80039fc:	1df9      	adds	r1, r7, #7
 80039fe:	2364      	movs	r3, #100	; 0x64
 8003a00:	2201      	movs	r2, #1
 8003a02:	4809      	ldr	r0, [pc, #36]	; (8003a28 <rc522_regRead8+0x50>)
 8003a04:	f7fe fdba 	bl	800257c <HAL_SPI_Transmit>
  uint8_t dataRd=0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&hspi1, &dataRd, 1, 100);
 8003a0c:	f107 010f 	add.w	r1, r7, #15
 8003a10:	2364      	movs	r3, #100	; 0x64
 8003a12:	2201      	movs	r2, #1
 8003a14:	4804      	ldr	r0, [pc, #16]	; (8003a28 <rc522_regRead8+0x50>)
 8003a16:	f7fe ff16 	bl	8002846 <HAL_SPI_Receive>
  spi_CS1_disable();
 8003a1a:	f000 fb39 	bl	8004090 <spi_CS1_disable>
  return dataRd;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200000d4 	.word	0x200000d4

08003a2c <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	460a      	mov	r2, r1
 8003a36:	71fb      	strb	r3, [r7, #7]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	71bb      	strb	r3, [r7, #6]
  spi_CS1_enable();
 8003a3c:	f000 fb1c 	bl	8004078 <spi_CS1_enable>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	733b      	strb	r3, [r7, #12]
 8003a4e:	79bb      	ldrb	r3, [r7, #6]
 8003a50:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(&hspi1, txData, 2, 100);
 8003a52:	f107 010c 	add.w	r1, r7, #12
 8003a56:	2364      	movs	r3, #100	; 0x64
 8003a58:	2202      	movs	r2, #2
 8003a5a:	4804      	ldr	r0, [pc, #16]	; (8003a6c <rc522_regWrite8+0x40>)
 8003a5c:	f7fe fd8e 	bl	800257c <HAL_SPI_Transmit>
  spi_CS1_disable();
 8003a60:	f000 fb16 	bl	8004090 <spi_CS1_disable>
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	200000d4 	.word	0x200000d4

08003a70 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	460a      	mov	r2, r1
 8003a7a:	71fb      	strb	r3, [r7, #7]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ffa8 	bl	80039d8 <rc522_regRead8>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	79bb      	ldrb	r3, [r7, #6]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ffc8 	bl	8003a2c <rc522_regWrite8>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460a      	mov	r2, r1
 8003aae:	71fb      	strb	r3, [r7, #7]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff8e 	bl	80039d8 <rc522_regRead8>
 8003abc:	4603      	mov	r3, r0
 8003abe:	b25a      	sxtb	r2, r3
 8003ac0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ffaa 	bl	8003a2c <rc522_regWrite8>
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 8003ae4:	210f      	movs	r1, #15
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f7ff ffa0 	bl	8003a2c <rc522_regWrite8>
}
 8003aec:	bf00      	nop
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 8003af6:	2014      	movs	r0, #20
 8003af8:	f7ff ff6e 	bl	80039d8 <rc522_regRead8>
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	2014      	movs	r0, #20
 8003b0e:	f7ff ffaf 	bl	8003a70 <rc522_setBit>
  }
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  bool status=false;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	2026      	movs	r0, #38	; 0x26
 8003b2a:	f000 f811 	bl	8003b50 <rc522_request>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f91d 	bl	8003d78 <rc522_antiColl>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 8003b42:	f000 f956 	bl	8003df2 <rc522_halt>

    return status;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 8003b60:	2107      	movs	r1, #7
 8003b62:	200d      	movs	r0, #13
 8003b64:	f7ff ff62 	bl	8003a2c <rc522_regWrite8>
  tagType[0] = reqMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	79fa      	ldrb	r2, [r7, #7]
 8003b6c:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	200c      	movs	r0, #12
 8003b7c:	f000 f812 	bl	8003ba4 <rc522_toCard>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	f083 0301 	eor.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <rc522_request+0x46>
 8003b90:	89bb      	ldrh	r3, [r7, #12]
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d001      	beq.n	8003b9a <rc522_request+0x4a>
    status = false;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	77bb      	strb	r3, [r7, #30]
  uint8_t waitIRq = 0x00;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d006      	beq.n	8003bd6 <rc522_toCard+0x32>
 8003bc8:	2b0e      	cmp	r3, #14
 8003bca:	d109      	bne.n	8003be0 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 8003bcc:	2312      	movs	r3, #18
 8003bce:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x10;
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	777b      	strb	r3, [r7, #29]
      break;
 8003bd4:	e005      	b.n	8003be2 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 8003bd6:	2377      	movs	r3, #119	; 0x77
 8003bd8:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x30;
 8003bda:	2330      	movs	r3, #48	; 0x30
 8003bdc:	777b      	strb	r3, [r7, #29]
      break;
 8003bde:	e000      	b.n	8003be2 <rc522_toCard+0x3e>
    }
    default:
      break;
 8003be0:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003be2:	7fbb      	ldrb	r3, [r7, #30]
 8003be4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	4619      	mov	r1, r3
 8003bec:	2002      	movs	r0, #2
 8003bee:	f7ff ff1d 	bl	8003a2c <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	2004      	movs	r0, #4
 8003bf6:	f7ff ff55 	bl	8003aa4 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	200a      	movs	r0, #10
 8003bfe:	f7ff ff37 	bl	8003a70 <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 8003c02:	2100      	movs	r1, #0
 8003c04:	2001      	movs	r0, #1
 8003c06:	f7ff ff11 	bl	8003a2c <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	837b      	strh	r3, [r7, #26]
 8003c0e:	e00a      	b.n	8003c26 <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003c10:	8b7b      	ldrh	r3, [r7, #26]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4413      	add	r3, r2
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	2009      	movs	r0, #9
 8003c1c:	f7ff ff06 	bl	8003a2c <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	3301      	adds	r3, #1
 8003c24:	837b      	strh	r3, [r7, #26]
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8b7a      	ldrh	r2, [r7, #26]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3ef      	bcc.n	8003c10 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	4619      	mov	r1, r3
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7ff fef9 	bl	8003a2c <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d103      	bne.n	8003c48 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	200d      	movs	r0, #13
 8003c44:	f7ff ff14 	bl	8003a70 <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003c48:	2364      	movs	r3, #100	; 0x64
 8003c4a:	837b      	strh	r3, [r7, #26]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 8003c4c:	2004      	movs	r0, #4
 8003c4e:	f7ff fec3 	bl	80039d8 <rc522_regRead8>
 8003c52:	4603      	mov	r3, r0
 8003c54:	773b      	strb	r3, [r7, #28]
    i--;
 8003c56:	8b7b      	ldrh	r3, [r7, #26]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	837b      	strh	r3, [r7, #26]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003c5c:	8b7b      	ldrh	r3, [r7, #26]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <rc522_toCard+0xd4>
 8003c62:	7f3b      	ldrb	r3, [r7, #28]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <rc522_toCard+0xd4>
 8003c6c:	7f3a      	ldrb	r2, [r7, #28]
 8003c6e:	7f7b      	ldrb	r3, [r7, #29]
 8003c70:	4013      	ands	r3, r2
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0e9      	beq.n	8003c4c <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	200d      	movs	r0, #13
 8003c7c:	f7ff ff12 	bl	8003aa4 <rc522_clearBit>

  if (i != 0)  {
 8003c80:	8b7b      	ldrh	r3, [r7, #26]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d06d      	beq.n	8003d62 <rc522_toCard+0x1be>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8003c86:	2006      	movs	r0, #6
 8003c88:	f7ff fea6 	bl	80039d8 <rc522_regRead8>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 031b 	and.w	r3, r3, #27
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d160      	bne.n	8003d58 <rc522_toCard+0x1b4>
      status = true;
 8003c96:	2301      	movs	r3, #1
 8003c98:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 8003c9a:	7f3a      	ldrb	r2, [r7, #28]
 8003c9c:	7fbb      	ldrb	r3, [r7, #30]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <rc522_toCard+0x10a>
        status = false;
 8003caa:	2300      	movs	r3, #0
 8003cac:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE) {
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d156      	bne.n	8003d62 <rc522_toCard+0x1be>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8003cb4:	200a      	movs	r0, #10
 8003cb6:	f7ff fe8f 	bl	80039d8 <rc522_regRead8>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	773b      	strb	r3, [r7, #28]
        uint8_t l = n;
 8003cbe:	7f3b      	ldrb	r3, [r7, #28]
 8003cc0:	767b      	strb	r3, [r7, #25]
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 8003cc2:	200c      	movs	r0, #12
 8003cc4:	f7ff fe88 	bl	80039d8 <rc522_regRead8>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	763b      	strb	r3, [r7, #24]
        if (lastBits) {
 8003cd0:	7e3b      	ldrb	r3, [r7, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <rc522_toCard+0x14a>
          *backLen = (n - 1) * 8 + lastBits;
 8003cd6:	7f3b      	ldrb	r3, [r7, #28]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	7e3b      	ldrb	r3, [r7, #24]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	e005      	b.n	8003cfa <rc522_toCard+0x156>
        } else {
          *backLen = n * 8;
 8003cee:	7f3b      	ldrb	r3, [r7, #28]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 8003cfa:	7f3b      	ldrb	r3, [r7, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <rc522_toCard+0x160>
          n = 1;
 8003d00:	2301      	movs	r3, #1
 8003d02:	773b      	strb	r3, [r7, #28]
        }
        if (n > MFRC522_MAX_LEN) {
 8003d04:	7f3b      	ldrb	r3, [r7, #28]
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d901      	bls.n	8003d0e <rc522_toCard+0x16a>
          n = MFRC522_MAX_LEN;
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	773b      	strb	r3, [r7, #28]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) {
 8003d0e:	2300      	movs	r3, #0
 8003d10:	837b      	strh	r3, [r7, #26]
 8003d12:	e014      	b.n	8003d3e <rc522_toCard+0x19a>
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 8003d14:	2009      	movs	r0, #9
 8003d16:	f7ff fe5f 	bl	80039d8 <rc522_regRead8>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]
          if (l == 4)
 8003d1e:	7e7b      	ldrb	r3, [r7, #25]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d104      	bne.n	8003d2e <rc522_toCard+0x18a>
            printf("%02x ", d);
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	4619      	mov	r1, r3
 8003d28:	4810      	ldr	r0, [pc, #64]	; (8003d6c <rc522_toCard+0x1c8>)
 8003d2a:	f000 fa93 	bl	8004254 <iprintf>
          backData[i] = d;
 8003d2e:	8b7b      	ldrh	r3, [r7, #26]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	7dfa      	ldrb	r2, [r7, #23]
 8003d36:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) {
 8003d38:	8b7b      	ldrh	r3, [r7, #26]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	837b      	strh	r3, [r7, #26]
 8003d3e:	7f3b      	ldrb	r3, [r7, #28]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	8b7a      	ldrh	r2, [r7, #26]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3e5      	bcc.n	8003d14 <rc522_toCard+0x170>
        }
        if (l==4)
 8003d48:	7e7b      	ldrb	r3, [r7, #25]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d102      	bne.n	8003d54 <rc522_toCard+0x1b0>
          printf("\r\n");
 8003d4e:	4808      	ldr	r0, [pc, #32]	; (8003d70 <rc522_toCard+0x1cc>)
 8003d50:	f000 fae6 	bl	8004320 <puts>
        return status;
 8003d54:	7ffb      	ldrb	r3, [r7, #31]
 8003d56:	e005      	b.n	8003d64 <rc522_toCard+0x1c0>
      }
    } else {
      printf("error\r\n");
 8003d58:	4806      	ldr	r0, [pc, #24]	; (8003d74 <rc522_toCard+0x1d0>)
 8003d5a:	f000 fae1 	bl	8004320 <puts>
      status = false;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8003d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	08005650 	.word	0x08005650
 8003d70:	08005658 	.word	0x08005658
 8003d74:	0800565c 	.word	0x0800565c

08003d78 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 8003d84:	2100      	movs	r1, #0
 8003d86:	200d      	movs	r0, #13
 8003d88:	f7ff fe50 	bl	8003a2c <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2293      	movs	r2, #147	; 0x93
 8003d90:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3301      	adds	r3, #1
 8003d96:	2220      	movs	r2, #32
 8003d98:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003d9a:	f107 030a 	add.w	r3, r7, #10
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	200c      	movs	r0, #12
 8003da8:	f7ff fefc 	bl	8003ba4 <rc522_toCard>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 8003db6:	2300      	movs	r3, #0
 8003db8:	73bb      	strb	r3, [r7, #14]
 8003dba:	e009      	b.n	8003dd0 <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8003dbc:	7bbb      	ldrb	r3, [r7, #14]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	7b7b      	ldrb	r3, [r7, #13]
 8003dc6:	4053      	eors	r3, r2
 8003dc8:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 8003dca:	7bbb      	ldrb	r3, [r7, #14]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	73bb      	strb	r3, [r7, #14]
 8003dd0:	7bbb      	ldrb	r3, [r7, #14]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d9f2      	bls.n	8003dbc <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 8003dd6:	7bbb      	ldrb	r3, [r7, #14]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	7b7a      	ldrb	r2, [r7, #13]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <rc522_antiColl+0x70>
      status = false;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <rc522_halt>:

void rc522_halt(void)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8003df8:	2350      	movs	r3, #80	; 0x50
 8003dfa:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8003e00:	463b      	mov	r3, r7
 8003e02:	1c9a      	adds	r2, r3, #2
 8003e04:	463b      	mov	r3, r7
 8003e06:	2102      	movs	r1, #2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f80d 	bl	8003e28 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003e0e:	463a      	mov	r2, r7
 8003e10:	4639      	mov	r1, r7
 8003e12:	1dbb      	adds	r3, r7, #6
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	2204      	movs	r2, #4
 8003e1a:	200c      	movs	r0, #12
 8003e1c:	f7ff fec2 	bl	8003ba4 <rc522_toCard>
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	460b      	mov	r3, r1
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8003e36:	2104      	movs	r1, #4
 8003e38:	2005      	movs	r0, #5
 8003e3a:	f7ff fe33 	bl	8003aa4 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8003e3e:	2180      	movs	r1, #128	; 0x80
 8003e40:	200a      	movs	r0, #10
 8003e42:	f7ff fe15 	bl	8003a70 <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]
 8003e4a:	e00a      	b.n	8003e62 <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	4619      	mov	r1, r3
 8003e56:	2009      	movs	r0, #9
 8003e58:	f7ff fde8 	bl	8003a2c <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
 8003e62:	7dfa      	ldrb	r2, [r7, #23]
 8003e64:	7afb      	ldrb	r3, [r7, #11]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d3f0      	bcc.n	8003e4c <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7ff fddd 	bl	8003a2c <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8003e72:	23ff      	movs	r3, #255	; 0xff
 8003e74:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8003e76:	2005      	movs	r0, #5
 8003e78:	f7ff fdae 	bl	80039d8 <rc522_regRead8>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	75bb      	strb	r3, [r7, #22]
    i--;
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <rc522_calculateCRC+0x6e>
 8003e8c:	7dbb      	ldrb	r3, [r7, #22]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ef      	beq.n	8003e76 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8003e96:	2022      	movs	r0, #34	; 0x22
 8003e98:	f7ff fd9e 	bl	80039d8 <rc522_regRead8>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1c5c      	adds	r4, r3, #1
 8003ea8:	2021      	movs	r0, #33	; 0x21
 8003eaa:	f7ff fd95 	bl	80039d8 <rc522_regRead8>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	7023      	strb	r3, [r4, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd90      	pop	{r4, r7, pc}

08003eba <rcc_systemClockConfig>:
#include <stdbool.h>
/**
 * @brief RCC System Clock Configuration
 */
bool rcc_systemClockConfig(void)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b090      	sub	sp, #64	; 0x40
 8003ebe:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ec0:	f107 0318 	add.w	r3, r7, #24
 8003ec4:	2228      	movs	r2, #40	; 0x28
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fb39 	bl	8004540 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ee4:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003eea:	2301      	movs	r3, #1
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ef8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003efe:	f107 0318 	add.w	r3, r7, #24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fc00 	bl	8001708 <HAL_RCC_OscConfig>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <rcc_systemClockConfig+0x58>
    {
        return false;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e015      	b.n	8003f3e <rcc_systemClockConfig+0x84>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f12:	230f      	movs	r3, #15
 8003f14:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f16:	2302      	movs	r3, #2
 8003f18:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f22:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd fe6d 	bl	8001c0c <HAL_RCC_ClockConfig>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <rcc_systemClockConfig+0x82>
    {
        return false;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <rcc_systemClockConfig+0x84>
    }
    return true;
 8003f3c:	2301      	movs	r3, #1
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3740      	adds	r7, #64	; 0x40
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <spi_GPIO_config>:

/**
 * @brief SPI1 GPIO Configuration
 */
void spi_GPIO_config(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4e:	f107 0308 	add.w	r3, r7, #8
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <spi_GPIO_config+0x98>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <spi_GPIO_config+0x98>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6193      	str	r3, [r2, #24]
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <spi_GPIO_config+0x98>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <spi_GPIO_config+0x98>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <spi_GPIO_config+0x98>)
 8003f7a:	f043 0308 	orr.w	r3, r3, #8
 8003f7e:	6193      	str	r3, [r2, #24]
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <spi_GPIO_config+0x98>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f8c:	23a0      	movs	r3, #160	; 0xa0
 8003f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f94:	2303      	movs	r3, #3
 8003f96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f98:	f107 0308 	add.w	r3, r7, #8
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4811      	ldr	r0, [pc, #68]	; (8003fe4 <spi_GPIO_config+0x9c>)
 8003fa0:	f7fd f9de 	bl	8001360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fa4:	2340      	movs	r3, #64	; 0x40
 8003fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb0:	f107 0308 	add.w	r3, r7, #8
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	480b      	ldr	r0, [pc, #44]	; (8003fe4 <spi_GPIO_config+0x9c>)
 8003fb8:	f7fd f9d2 	bl	8001360 <HAL_GPIO_Init>

  //CS Pin - PA4
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fcc:	f107 0308 	add.w	r3, r7, #8
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <spi_GPIO_config+0x9c>)
 8003fd4:	f7fd f9c4 	bl	8001360 <HAL_GPIO_Init>
}
 8003fd8:	bf00      	nop
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40010800 	.word	0x40010800

08003fe8 <spi_config>:

/**
 * @brief SPI1 Configuration
 */
bool spi_config(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  __HAL_RCC_SPI1_CLK_ENABLE();
 8003fee:	4b1f      	ldr	r3, [pc, #124]	; (800406c <spi_config+0x84>)
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <spi_config+0x84>)
 8003ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ff8:	6193      	str	r3, [r2, #24]
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <spi_config+0x84>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]

  hspi1.Instance = SPI1;
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <spi_config+0x88>)
 8004008:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <spi_config+0x8c>)
 800400a:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <spi_config+0x88>)
 800400e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004012:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004014:	4b16      	ldr	r3, [pc, #88]	; (8004070 <spi_config+0x88>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <spi_config+0x88>)
 800401c:	2200      	movs	r2, #0
 800401e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <spi_config+0x88>)
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <spi_config+0x88>)
 8004028:	2200      	movs	r2, #0
 800402a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <spi_config+0x88>)
 800402e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004032:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <spi_config+0x88>)
 8004036:	2210      	movs	r2, #16
 8004038:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <spi_config+0x88>)
 800403c:	2200      	movs	r2, #0
 800403e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <spi_config+0x88>)
 8004042:	2200      	movs	r2, #0
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <spi_config+0x88>)
 8004048:	2200      	movs	r2, #0
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <spi_config+0x88>)
 800404e:	220a      	movs	r2, #10
 8004050:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004052:	4807      	ldr	r0, [pc, #28]	; (8004070 <spi_config+0x88>)
 8004054:	f7fe f9fd 	bl	8002452 <HAL_SPI_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <spi_config+0x7a>
  {
    return false;
 800405e:	2300      	movs	r3, #0
 8004060:	e000      	b.n	8004064 <spi_config+0x7c>
  }
  return true;
 8004062:	2301      	movs	r3, #1
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000
 8004070:	200000d4 	.word	0x200000d4
 8004074:	40013000 	.word	0x40013000

08004078 <spi_CS1_enable>:

/**
 * @brief SPI CS1 enable/disable
 */
void spi_CS1_enable(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800407c:	2200      	movs	r2, #0
 800407e:	2110      	movs	r1, #16
 8004080:	4802      	ldr	r0, [pc, #8]	; (800408c <spi_CS1_enable+0x14>)
 8004082:	f7fd faf1 	bl	8001668 <HAL_GPIO_WritePin>
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40010800 	.word	0x40010800

08004090 <spi_CS1_disable>:

void spi_CS1_disable(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004094:	2201      	movs	r2, #1
 8004096:	2110      	movs	r1, #16
 8004098:	4802      	ldr	r0, [pc, #8]	; (80040a4 <spi_CS1_disable+0x14>)
 800409a:	f7fd fae5 	bl	8001668 <HAL_GPIO_WritePin>
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40010800 	.word	0x40010800

080040a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040a8:	f7fc fe1e 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040ac:	480b      	ldr	r0, [pc, #44]	; (80040dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80040ae:	490c      	ldr	r1, [pc, #48]	; (80040e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80040b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040b4:	e002      	b.n	80040bc <LoopCopyDataInit>

080040b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ba:	3304      	adds	r3, #4

080040bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040c0:	d3f9      	bcc.n	80040b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040c4:	4c09      	ldr	r4, [pc, #36]	; (80040ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c8:	e001      	b.n	80040ce <LoopFillZerobss>

080040ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040cc:	3204      	adds	r2, #4

080040ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040d0:	d3fb      	bcc.n	80040ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040d2:	f000 fa83 	bl	80045dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040d6:	f7fc f839 	bl	800014c <main>
  bx lr
 80040da:	4770      	bx	lr
  ldr r0, =_sdata
 80040dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80040e4:	080056e0 	.word	0x080056e0
  ldr r2, =_sbss
 80040e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80040ec:	2000027c 	.word	0x2000027c

080040f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040f0:	e7fe      	b.n	80040f0 <ADC1_2_IRQHandler>
	...

080040f4 <std>:
 80040f4:	2300      	movs	r3, #0
 80040f6:	b510      	push	{r4, lr}
 80040f8:	4604      	mov	r4, r0
 80040fa:	e9c0 3300 	strd	r3, r3, [r0]
 80040fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004102:	6083      	str	r3, [r0, #8]
 8004104:	8181      	strh	r1, [r0, #12]
 8004106:	6643      	str	r3, [r0, #100]	; 0x64
 8004108:	81c2      	strh	r2, [r0, #14]
 800410a:	6183      	str	r3, [r0, #24]
 800410c:	4619      	mov	r1, r3
 800410e:	2208      	movs	r2, #8
 8004110:	305c      	adds	r0, #92	; 0x5c
 8004112:	f000 fa15 	bl	8004540 <memset>
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <std+0x38>)
 8004118:	6224      	str	r4, [r4, #32]
 800411a:	6263      	str	r3, [r4, #36]	; 0x24
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <std+0x3c>)
 800411e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <std+0x40>)
 8004122:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <std+0x44>)
 8004126:	6323      	str	r3, [r4, #48]	; 0x30
 8004128:	bd10      	pop	{r4, pc}
 800412a:	bf00      	nop
 800412c:	08004371 	.word	0x08004371
 8004130:	08004393 	.word	0x08004393
 8004134:	080043cb 	.word	0x080043cb
 8004138:	080043ef 	.word	0x080043ef

0800413c <stdio_exit_handler>:
 800413c:	4a02      	ldr	r2, [pc, #8]	; (8004148 <stdio_exit_handler+0xc>)
 800413e:	4903      	ldr	r1, [pc, #12]	; (800414c <stdio_exit_handler+0x10>)
 8004140:	4803      	ldr	r0, [pc, #12]	; (8004150 <stdio_exit_handler+0x14>)
 8004142:	f000 b869 	b.w	8004218 <_fwalk_sglue>
 8004146:	bf00      	nop
 8004148:	2000000c 	.word	0x2000000c
 800414c:	08005171 	.word	0x08005171
 8004150:	20000018 	.word	0x20000018

08004154 <cleanup_stdio>:
 8004154:	6841      	ldr	r1, [r0, #4]
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <cleanup_stdio+0x34>)
 8004158:	b510      	push	{r4, lr}
 800415a:	4299      	cmp	r1, r3
 800415c:	4604      	mov	r4, r0
 800415e:	d001      	beq.n	8004164 <cleanup_stdio+0x10>
 8004160:	f001 f806 	bl	8005170 <_fflush_r>
 8004164:	68a1      	ldr	r1, [r4, #8]
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <cleanup_stdio+0x38>)
 8004168:	4299      	cmp	r1, r3
 800416a:	d002      	beq.n	8004172 <cleanup_stdio+0x1e>
 800416c:	4620      	mov	r0, r4
 800416e:	f000 ffff 	bl	8005170 <_fflush_r>
 8004172:	68e1      	ldr	r1, [r4, #12]
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <cleanup_stdio+0x3c>)
 8004176:	4299      	cmp	r1, r3
 8004178:	d004      	beq.n	8004184 <cleanup_stdio+0x30>
 800417a:	4620      	mov	r0, r4
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	f000 bff6 	b.w	8005170 <_fflush_r>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	bf00      	nop
 8004188:	2000012c 	.word	0x2000012c
 800418c:	20000194 	.word	0x20000194
 8004190:	200001fc 	.word	0x200001fc

08004194 <global_stdio_init.part.0>:
 8004194:	b510      	push	{r4, lr}
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <global_stdio_init.part.0+0x30>)
 8004198:	4c0b      	ldr	r4, [pc, #44]	; (80041c8 <global_stdio_init.part.0+0x34>)
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <global_stdio_init.part.0+0x38>)
 800419c:	4620      	mov	r0, r4
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	2104      	movs	r1, #4
 80041a2:	2200      	movs	r2, #0
 80041a4:	f7ff ffa6 	bl	80040f4 <std>
 80041a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80041ac:	2201      	movs	r2, #1
 80041ae:	2109      	movs	r1, #9
 80041b0:	f7ff ffa0 	bl	80040f4 <std>
 80041b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80041b8:	2202      	movs	r2, #2
 80041ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041be:	2112      	movs	r1, #18
 80041c0:	f7ff bf98 	b.w	80040f4 <std>
 80041c4:	20000264 	.word	0x20000264
 80041c8:	2000012c 	.word	0x2000012c
 80041cc:	0800413d 	.word	0x0800413d

080041d0 <__sfp_lock_acquire>:
 80041d0:	4801      	ldr	r0, [pc, #4]	; (80041d8 <__sfp_lock_acquire+0x8>)
 80041d2:	f000 ba27 	b.w	8004624 <__retarget_lock_acquire_recursive>
 80041d6:	bf00      	nop
 80041d8:	2000026d 	.word	0x2000026d

080041dc <__sfp_lock_release>:
 80041dc:	4801      	ldr	r0, [pc, #4]	; (80041e4 <__sfp_lock_release+0x8>)
 80041de:	f000 ba22 	b.w	8004626 <__retarget_lock_release_recursive>
 80041e2:	bf00      	nop
 80041e4:	2000026d 	.word	0x2000026d

080041e8 <__sinit>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4604      	mov	r4, r0
 80041ec:	f7ff fff0 	bl	80041d0 <__sfp_lock_acquire>
 80041f0:	6a23      	ldr	r3, [r4, #32]
 80041f2:	b11b      	cbz	r3, 80041fc <__sinit+0x14>
 80041f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f8:	f7ff bff0 	b.w	80041dc <__sfp_lock_release>
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <__sinit+0x28>)
 80041fe:	6223      	str	r3, [r4, #32]
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <__sinit+0x2c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f5      	bne.n	80041f4 <__sinit+0xc>
 8004208:	f7ff ffc4 	bl	8004194 <global_stdio_init.part.0>
 800420c:	e7f2      	b.n	80041f4 <__sinit+0xc>
 800420e:	bf00      	nop
 8004210:	08004155 	.word	0x08004155
 8004214:	20000264 	.word	0x20000264

08004218 <_fwalk_sglue>:
 8004218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800421c:	4607      	mov	r7, r0
 800421e:	4688      	mov	r8, r1
 8004220:	4614      	mov	r4, r2
 8004222:	2600      	movs	r6, #0
 8004224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004228:	f1b9 0901 	subs.w	r9, r9, #1
 800422c:	d505      	bpl.n	800423a <_fwalk_sglue+0x22>
 800422e:	6824      	ldr	r4, [r4, #0]
 8004230:	2c00      	cmp	r4, #0
 8004232:	d1f7      	bne.n	8004224 <_fwalk_sglue+0xc>
 8004234:	4630      	mov	r0, r6
 8004236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800423a:	89ab      	ldrh	r3, [r5, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d907      	bls.n	8004250 <_fwalk_sglue+0x38>
 8004240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004244:	3301      	adds	r3, #1
 8004246:	d003      	beq.n	8004250 <_fwalk_sglue+0x38>
 8004248:	4629      	mov	r1, r5
 800424a:	4638      	mov	r0, r7
 800424c:	47c0      	blx	r8
 800424e:	4306      	orrs	r6, r0
 8004250:	3568      	adds	r5, #104	; 0x68
 8004252:	e7e9      	b.n	8004228 <_fwalk_sglue+0x10>

08004254 <iprintf>:
 8004254:	b40f      	push	{r0, r1, r2, r3}
 8004256:	b507      	push	{r0, r1, r2, lr}
 8004258:	4906      	ldr	r1, [pc, #24]	; (8004274 <iprintf+0x20>)
 800425a:	ab04      	add	r3, sp, #16
 800425c:	6808      	ldr	r0, [r1, #0]
 800425e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004262:	6881      	ldr	r1, [r0, #8]
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	f000 fc53 	bl	8004b10 <_vfiprintf_r>
 800426a:	b003      	add	sp, #12
 800426c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004270:	b004      	add	sp, #16
 8004272:	4770      	bx	lr
 8004274:	20000064 	.word	0x20000064

08004278 <_puts_r>:
 8004278:	6a03      	ldr	r3, [r0, #32]
 800427a:	b570      	push	{r4, r5, r6, lr}
 800427c:	4605      	mov	r5, r0
 800427e:	460e      	mov	r6, r1
 8004280:	6884      	ldr	r4, [r0, #8]
 8004282:	b90b      	cbnz	r3, 8004288 <_puts_r+0x10>
 8004284:	f7ff ffb0 	bl	80041e8 <__sinit>
 8004288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800428a:	07db      	lsls	r3, r3, #31
 800428c:	d405      	bmi.n	800429a <_puts_r+0x22>
 800428e:	89a3      	ldrh	r3, [r4, #12]
 8004290:	0598      	lsls	r0, r3, #22
 8004292:	d402      	bmi.n	800429a <_puts_r+0x22>
 8004294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004296:	f000 f9c5 	bl	8004624 <__retarget_lock_acquire_recursive>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	0719      	lsls	r1, r3, #28
 800429e:	d513      	bpl.n	80042c8 <_puts_r+0x50>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	b18b      	cbz	r3, 80042c8 <_puts_r+0x50>
 80042a4:	3e01      	subs	r6, #1
 80042a6:	68a3      	ldr	r3, [r4, #8]
 80042a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042ac:	3b01      	subs	r3, #1
 80042ae:	60a3      	str	r3, [r4, #8]
 80042b0:	b9e9      	cbnz	r1, 80042ee <_puts_r+0x76>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da2e      	bge.n	8004314 <_puts_r+0x9c>
 80042b6:	4622      	mov	r2, r4
 80042b8:	210a      	movs	r1, #10
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 f89b 	bl	80043f6 <__swbuf_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d007      	beq.n	80042d4 <_puts_r+0x5c>
 80042c4:	250a      	movs	r5, #10
 80042c6:	e007      	b.n	80042d8 <_puts_r+0x60>
 80042c8:	4621      	mov	r1, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 f8d0 	bl	8004470 <__swsetup_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d0e7      	beq.n	80042a4 <_puts_r+0x2c>
 80042d4:	f04f 35ff 	mov.w	r5, #4294967295
 80042d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042da:	07da      	lsls	r2, r3, #31
 80042dc:	d405      	bmi.n	80042ea <_puts_r+0x72>
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	059b      	lsls	r3, r3, #22
 80042e2:	d402      	bmi.n	80042ea <_puts_r+0x72>
 80042e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e6:	f000 f99e 	bl	8004626 <__retarget_lock_release_recursive>
 80042ea:	4628      	mov	r0, r5
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da04      	bge.n	80042fc <_puts_r+0x84>
 80042f2:	69a2      	ldr	r2, [r4, #24]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	dc06      	bgt.n	8004306 <_puts_r+0x8e>
 80042f8:	290a      	cmp	r1, #10
 80042fa:	d004      	beq.n	8004306 <_puts_r+0x8e>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	6022      	str	r2, [r4, #0]
 8004302:	7019      	strb	r1, [r3, #0]
 8004304:	e7cf      	b.n	80042a6 <_puts_r+0x2e>
 8004306:	4622      	mov	r2, r4
 8004308:	4628      	mov	r0, r5
 800430a:	f000 f874 	bl	80043f6 <__swbuf_r>
 800430e:	3001      	adds	r0, #1
 8004310:	d1c9      	bne.n	80042a6 <_puts_r+0x2e>
 8004312:	e7df      	b.n	80042d4 <_puts_r+0x5c>
 8004314:	250a      	movs	r5, #10
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	6022      	str	r2, [r4, #0]
 800431c:	701d      	strb	r5, [r3, #0]
 800431e:	e7db      	b.n	80042d8 <_puts_r+0x60>

08004320 <puts>:
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <puts+0xc>)
 8004322:	4601      	mov	r1, r0
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f7ff bfa7 	b.w	8004278 <_puts_r>
 800432a:	bf00      	nop
 800432c:	20000064 	.word	0x20000064

08004330 <siprintf>:
 8004330:	b40e      	push	{r1, r2, r3}
 8004332:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004336:	b500      	push	{lr}
 8004338:	b09c      	sub	sp, #112	; 0x70
 800433a:	ab1d      	add	r3, sp, #116	; 0x74
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9006      	str	r0, [sp, #24]
 8004340:	9107      	str	r1, [sp, #28]
 8004342:	9104      	str	r1, [sp, #16]
 8004344:	4808      	ldr	r0, [pc, #32]	; (8004368 <siprintf+0x38>)
 8004346:	4909      	ldr	r1, [pc, #36]	; (800436c <siprintf+0x3c>)
 8004348:	f853 2b04 	ldr.w	r2, [r3], #4
 800434c:	9105      	str	r1, [sp, #20]
 800434e:	6800      	ldr	r0, [r0, #0]
 8004350:	a902      	add	r1, sp, #8
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	f000 fab6 	bl	80048c4 <_svfiprintf_r>
 8004358:	2200      	movs	r2, #0
 800435a:	9b02      	ldr	r3, [sp, #8]
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	b01c      	add	sp, #112	; 0x70
 8004360:	f85d eb04 	ldr.w	lr, [sp], #4
 8004364:	b003      	add	sp, #12
 8004366:	4770      	bx	lr
 8004368:	20000064 	.word	0x20000064
 800436c:	ffff0208 	.word	0xffff0208

08004370 <__sread>:
 8004370:	b510      	push	{r4, lr}
 8004372:	460c      	mov	r4, r1
 8004374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004378:	f000 f90c 	bl	8004594 <_read_r>
 800437c:	2800      	cmp	r0, #0
 800437e:	bfab      	itete	ge
 8004380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004382:	89a3      	ldrhlt	r3, [r4, #12]
 8004384:	181b      	addge	r3, r3, r0
 8004386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800438a:	bfac      	ite	ge
 800438c:	6563      	strge	r3, [r4, #84]	; 0x54
 800438e:	81a3      	strhlt	r3, [r4, #12]
 8004390:	bd10      	pop	{r4, pc}

08004392 <__swrite>:
 8004392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	461f      	mov	r7, r3
 8004398:	898b      	ldrh	r3, [r1, #12]
 800439a:	4605      	mov	r5, r0
 800439c:	05db      	lsls	r3, r3, #23
 800439e:	460c      	mov	r4, r1
 80043a0:	4616      	mov	r6, r2
 80043a2:	d505      	bpl.n	80043b0 <__swrite+0x1e>
 80043a4:	2302      	movs	r3, #2
 80043a6:	2200      	movs	r2, #0
 80043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ac:	f000 f8e0 	bl	8004570 <_lseek_r>
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	4632      	mov	r2, r6
 80043b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b8:	81a3      	strh	r3, [r4, #12]
 80043ba:	4628      	mov	r0, r5
 80043bc:	463b      	mov	r3, r7
 80043be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	f000 b8f7 	b.w	80045b8 <_write_r>

080043ca <__sseek>:
 80043ca:	b510      	push	{r4, lr}
 80043cc:	460c      	mov	r4, r1
 80043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d2:	f000 f8cd 	bl	8004570 <_lseek_r>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	bf15      	itete	ne
 80043dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80043de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043e6:	81a3      	strheq	r3, [r4, #12]
 80043e8:	bf18      	it	ne
 80043ea:	81a3      	strhne	r3, [r4, #12]
 80043ec:	bd10      	pop	{r4, pc}

080043ee <__sclose>:
 80043ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f2:	f000 b8ad 	b.w	8004550 <_close_r>

080043f6 <__swbuf_r>:
 80043f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f8:	460e      	mov	r6, r1
 80043fa:	4614      	mov	r4, r2
 80043fc:	4605      	mov	r5, r0
 80043fe:	b118      	cbz	r0, 8004408 <__swbuf_r+0x12>
 8004400:	6a03      	ldr	r3, [r0, #32]
 8004402:	b90b      	cbnz	r3, 8004408 <__swbuf_r+0x12>
 8004404:	f7ff fef0 	bl	80041e8 <__sinit>
 8004408:	69a3      	ldr	r3, [r4, #24]
 800440a:	60a3      	str	r3, [r4, #8]
 800440c:	89a3      	ldrh	r3, [r4, #12]
 800440e:	071a      	lsls	r2, r3, #28
 8004410:	d525      	bpl.n	800445e <__swbuf_r+0x68>
 8004412:	6923      	ldr	r3, [r4, #16]
 8004414:	b31b      	cbz	r3, 800445e <__swbuf_r+0x68>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	6922      	ldr	r2, [r4, #16]
 800441a:	b2f6      	uxtb	r6, r6
 800441c:	1a98      	subs	r0, r3, r2
 800441e:	6963      	ldr	r3, [r4, #20]
 8004420:	4637      	mov	r7, r6
 8004422:	4283      	cmp	r3, r0
 8004424:	dc04      	bgt.n	8004430 <__swbuf_r+0x3a>
 8004426:	4621      	mov	r1, r4
 8004428:	4628      	mov	r0, r5
 800442a:	f000 fea1 	bl	8005170 <_fflush_r>
 800442e:	b9e0      	cbnz	r0, 800446a <__swbuf_r+0x74>
 8004430:	68a3      	ldr	r3, [r4, #8]
 8004432:	3b01      	subs	r3, #1
 8004434:	60a3      	str	r3, [r4, #8]
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	6022      	str	r2, [r4, #0]
 800443c:	701e      	strb	r6, [r3, #0]
 800443e:	6962      	ldr	r2, [r4, #20]
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	429a      	cmp	r2, r3
 8004444:	d004      	beq.n	8004450 <__swbuf_r+0x5a>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	07db      	lsls	r3, r3, #31
 800444a:	d506      	bpl.n	800445a <__swbuf_r+0x64>
 800444c:	2e0a      	cmp	r6, #10
 800444e:	d104      	bne.n	800445a <__swbuf_r+0x64>
 8004450:	4621      	mov	r1, r4
 8004452:	4628      	mov	r0, r5
 8004454:	f000 fe8c 	bl	8005170 <_fflush_r>
 8004458:	b938      	cbnz	r0, 800446a <__swbuf_r+0x74>
 800445a:	4638      	mov	r0, r7
 800445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800445e:	4621      	mov	r1, r4
 8004460:	4628      	mov	r0, r5
 8004462:	f000 f805 	bl	8004470 <__swsetup_r>
 8004466:	2800      	cmp	r0, #0
 8004468:	d0d5      	beq.n	8004416 <__swbuf_r+0x20>
 800446a:	f04f 37ff 	mov.w	r7, #4294967295
 800446e:	e7f4      	b.n	800445a <__swbuf_r+0x64>

08004470 <__swsetup_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <__swsetup_r+0xac>)
 8004474:	4605      	mov	r5, r0
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	460c      	mov	r4, r1
 800447a:	b118      	cbz	r0, 8004484 <__swsetup_r+0x14>
 800447c:	6a03      	ldr	r3, [r0, #32]
 800447e:	b90b      	cbnz	r3, 8004484 <__swsetup_r+0x14>
 8004480:	f7ff feb2 	bl	80041e8 <__sinit>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800448a:	0718      	lsls	r0, r3, #28
 800448c:	d422      	bmi.n	80044d4 <__swsetup_r+0x64>
 800448e:	06d9      	lsls	r1, r3, #27
 8004490:	d407      	bmi.n	80044a2 <__swsetup_r+0x32>
 8004492:	2309      	movs	r3, #9
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	81a3      	strh	r3, [r4, #12]
 80044a0:	e034      	b.n	800450c <__swsetup_r+0x9c>
 80044a2:	0758      	lsls	r0, r3, #29
 80044a4:	d512      	bpl.n	80044cc <__swsetup_r+0x5c>
 80044a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a8:	b141      	cbz	r1, 80044bc <__swsetup_r+0x4c>
 80044aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ae:	4299      	cmp	r1, r3
 80044b0:	d002      	beq.n	80044b8 <__swsetup_r+0x48>
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 f8b8 	bl	8004628 <_free_r>
 80044b8:	2300      	movs	r3, #0
 80044ba:	6363      	str	r3, [r4, #52]	; 0x34
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	2300      	movs	r3, #0
 80044c6:	6063      	str	r3, [r4, #4]
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f043 0308 	orr.w	r3, r3, #8
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	6923      	ldr	r3, [r4, #16]
 80044d6:	b94b      	cbnz	r3, 80044ec <__swsetup_r+0x7c>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e2:	d003      	beq.n	80044ec <__swsetup_r+0x7c>
 80044e4:	4621      	mov	r1, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 fe8f 	bl	800520a <__smakebuf_r>
 80044ec:	89a0      	ldrh	r0, [r4, #12]
 80044ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044f2:	f010 0301 	ands.w	r3, r0, #1
 80044f6:	d00a      	beq.n	800450e <__swsetup_r+0x9e>
 80044f8:	2300      	movs	r3, #0
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	6963      	ldr	r3, [r4, #20]
 80044fe:	425b      	negs	r3, r3
 8004500:	61a3      	str	r3, [r4, #24]
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	b943      	cbnz	r3, 8004518 <__swsetup_r+0xa8>
 8004506:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800450a:	d1c4      	bne.n	8004496 <__swsetup_r+0x26>
 800450c:	bd38      	pop	{r3, r4, r5, pc}
 800450e:	0781      	lsls	r1, r0, #30
 8004510:	bf58      	it	pl
 8004512:	6963      	ldrpl	r3, [r4, #20]
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	e7f4      	b.n	8004502 <__swsetup_r+0x92>
 8004518:	2000      	movs	r0, #0
 800451a:	e7f7      	b.n	800450c <__swsetup_r+0x9c>
 800451c:	20000064 	.word	0x20000064

08004520 <memcmp>:
 8004520:	b510      	push	{r4, lr}
 8004522:	3901      	subs	r1, #1
 8004524:	4402      	add	r2, r0
 8004526:	4290      	cmp	r0, r2
 8004528:	d101      	bne.n	800452e <memcmp+0xe>
 800452a:	2000      	movs	r0, #0
 800452c:	e005      	b.n	800453a <memcmp+0x1a>
 800452e:	7803      	ldrb	r3, [r0, #0]
 8004530:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004534:	42a3      	cmp	r3, r4
 8004536:	d001      	beq.n	800453c <memcmp+0x1c>
 8004538:	1b18      	subs	r0, r3, r4
 800453a:	bd10      	pop	{r4, pc}
 800453c:	3001      	adds	r0, #1
 800453e:	e7f2      	b.n	8004526 <memcmp+0x6>

08004540 <memset>:
 8004540:	4603      	mov	r3, r0
 8004542:	4402      	add	r2, r0
 8004544:	4293      	cmp	r3, r2
 8004546:	d100      	bne.n	800454a <memset+0xa>
 8004548:	4770      	bx	lr
 800454a:	f803 1b01 	strb.w	r1, [r3], #1
 800454e:	e7f9      	b.n	8004544 <memset+0x4>

08004550 <_close_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	2300      	movs	r3, #0
 8004554:	4d05      	ldr	r5, [pc, #20]	; (800456c <_close_r+0x1c>)
 8004556:	4604      	mov	r4, r0
 8004558:	4608      	mov	r0, r1
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	f000 ff32 	bl	80053c4 <_close>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_close_r+0x1a>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_close_r+0x1a>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	20000268 	.word	0x20000268

08004570 <_lseek_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	2200      	movs	r2, #0
 800457a:	4d05      	ldr	r5, [pc, #20]	; (8004590 <_lseek_r+0x20>)
 800457c:	602a      	str	r2, [r5, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	f000 ff38 	bl	80053f4 <_lseek>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_lseek_r+0x1e>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	b103      	cbz	r3, 800458e <_lseek_r+0x1e>
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	20000268 	.word	0x20000268

08004594 <_read_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	2200      	movs	r2, #0
 800459e:	4d05      	ldr	r5, [pc, #20]	; (80045b4 <_read_r+0x20>)
 80045a0:	602a      	str	r2, [r5, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f000 ff2e 	bl	8005404 <_read>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_read_r+0x1e>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_read_r+0x1e>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	20000268 	.word	0x20000268

080045b8 <_write_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4604      	mov	r4, r0
 80045bc:	4608      	mov	r0, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	2200      	movs	r2, #0
 80045c2:	4d05      	ldr	r5, [pc, #20]	; (80045d8 <_write_r+0x20>)
 80045c4:	602a      	str	r2, [r5, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 ff32 	bl	8005430 <_write>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d102      	bne.n	80045d6 <_write_r+0x1e>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	b103      	cbz	r3, 80045d6 <_write_r+0x1e>
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	20000268 	.word	0x20000268

080045dc <__libc_init_array>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	2600      	movs	r6, #0
 80045e0:	4d0c      	ldr	r5, [pc, #48]	; (8004614 <__libc_init_array+0x38>)
 80045e2:	4c0d      	ldr	r4, [pc, #52]	; (8004618 <__libc_init_array+0x3c>)
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	d109      	bne.n	8004600 <__libc_init_array+0x24>
 80045ec:	f000 ff28 	bl	8005440 <_init>
 80045f0:	2600      	movs	r6, #0
 80045f2:	4d0a      	ldr	r5, [pc, #40]	; (800461c <__libc_init_array+0x40>)
 80045f4:	4c0a      	ldr	r4, [pc, #40]	; (8004620 <__libc_init_array+0x44>)
 80045f6:	1b64      	subs	r4, r4, r5
 80045f8:	10a4      	asrs	r4, r4, #2
 80045fa:	42a6      	cmp	r6, r4
 80045fc:	d105      	bne.n	800460a <__libc_init_array+0x2e>
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	f855 3b04 	ldr.w	r3, [r5], #4
 8004604:	4798      	blx	r3
 8004606:	3601      	adds	r6, #1
 8004608:	e7ee      	b.n	80045e8 <__libc_init_array+0xc>
 800460a:	f855 3b04 	ldr.w	r3, [r5], #4
 800460e:	4798      	blx	r3
 8004610:	3601      	adds	r6, #1
 8004612:	e7f2      	b.n	80045fa <__libc_init_array+0x1e>
 8004614:	080056d8 	.word	0x080056d8
 8004618:	080056d8 	.word	0x080056d8
 800461c:	080056d8 	.word	0x080056d8
 8004620:	080056dc 	.word	0x080056dc

08004624 <__retarget_lock_acquire_recursive>:
 8004624:	4770      	bx	lr

08004626 <__retarget_lock_release_recursive>:
 8004626:	4770      	bx	lr

08004628 <_free_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4605      	mov	r5, r0
 800462c:	2900      	cmp	r1, #0
 800462e:	d040      	beq.n	80046b2 <_free_r+0x8a>
 8004630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004634:	1f0c      	subs	r4, r1, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	bfb8      	it	lt
 800463a:	18e4      	addlt	r4, r4, r3
 800463c:	f000 f8dc 	bl	80047f8 <__malloc_lock>
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <_free_r+0x8c>)
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	b933      	cbnz	r3, 8004654 <_free_r+0x2c>
 8004646:	6063      	str	r3, [r4, #4]
 8004648:	6014      	str	r4, [r2, #0]
 800464a:	4628      	mov	r0, r5
 800464c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004650:	f000 b8d8 	b.w	8004804 <__malloc_unlock>
 8004654:	42a3      	cmp	r3, r4
 8004656:	d908      	bls.n	800466a <_free_r+0x42>
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	1821      	adds	r1, r4, r0
 800465c:	428b      	cmp	r3, r1
 800465e:	bf01      	itttt	eq
 8004660:	6819      	ldreq	r1, [r3, #0]
 8004662:	685b      	ldreq	r3, [r3, #4]
 8004664:	1809      	addeq	r1, r1, r0
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	e7ed      	b.n	8004646 <_free_r+0x1e>
 800466a:	461a      	mov	r2, r3
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	b10b      	cbz	r3, 8004674 <_free_r+0x4c>
 8004670:	42a3      	cmp	r3, r4
 8004672:	d9fa      	bls.n	800466a <_free_r+0x42>
 8004674:	6811      	ldr	r1, [r2, #0]
 8004676:	1850      	adds	r0, r2, r1
 8004678:	42a0      	cmp	r0, r4
 800467a:	d10b      	bne.n	8004694 <_free_r+0x6c>
 800467c:	6820      	ldr	r0, [r4, #0]
 800467e:	4401      	add	r1, r0
 8004680:	1850      	adds	r0, r2, r1
 8004682:	4283      	cmp	r3, r0
 8004684:	6011      	str	r1, [r2, #0]
 8004686:	d1e0      	bne.n	800464a <_free_r+0x22>
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4408      	add	r0, r1
 800468e:	6010      	str	r0, [r2, #0]
 8004690:	6053      	str	r3, [r2, #4]
 8004692:	e7da      	b.n	800464a <_free_r+0x22>
 8004694:	d902      	bls.n	800469c <_free_r+0x74>
 8004696:	230c      	movs	r3, #12
 8004698:	602b      	str	r3, [r5, #0]
 800469a:	e7d6      	b.n	800464a <_free_r+0x22>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	1821      	adds	r1, r4, r0
 80046a0:	428b      	cmp	r3, r1
 80046a2:	bf01      	itttt	eq
 80046a4:	6819      	ldreq	r1, [r3, #0]
 80046a6:	685b      	ldreq	r3, [r3, #4]
 80046a8:	1809      	addeq	r1, r1, r0
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	6054      	str	r4, [r2, #4]
 80046b0:	e7cb      	b.n	800464a <_free_r+0x22>
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	20000270 	.word	0x20000270

080046b8 <sbrk_aligned>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4e0e      	ldr	r6, [pc, #56]	; (80046f4 <sbrk_aligned+0x3c>)
 80046bc:	460c      	mov	r4, r1
 80046be:	6831      	ldr	r1, [r6, #0]
 80046c0:	4605      	mov	r5, r0
 80046c2:	b911      	cbnz	r1, 80046ca <sbrk_aligned+0x12>
 80046c4:	f000 fe1a 	bl	80052fc <_sbrk_r>
 80046c8:	6030      	str	r0, [r6, #0]
 80046ca:	4621      	mov	r1, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	f000 fe15 	bl	80052fc <_sbrk_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d00a      	beq.n	80046ec <sbrk_aligned+0x34>
 80046d6:	1cc4      	adds	r4, r0, #3
 80046d8:	f024 0403 	bic.w	r4, r4, #3
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d007      	beq.n	80046f0 <sbrk_aligned+0x38>
 80046e0:	1a21      	subs	r1, r4, r0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 fe0a 	bl	80052fc <_sbrk_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d101      	bne.n	80046f0 <sbrk_aligned+0x38>
 80046ec:	f04f 34ff 	mov.w	r4, #4294967295
 80046f0:	4620      	mov	r0, r4
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	20000274 	.word	0x20000274

080046f8 <_malloc_r>:
 80046f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046fc:	1ccd      	adds	r5, r1, #3
 80046fe:	f025 0503 	bic.w	r5, r5, #3
 8004702:	3508      	adds	r5, #8
 8004704:	2d0c      	cmp	r5, #12
 8004706:	bf38      	it	cc
 8004708:	250c      	movcc	r5, #12
 800470a:	2d00      	cmp	r5, #0
 800470c:	4607      	mov	r7, r0
 800470e:	db01      	blt.n	8004714 <_malloc_r+0x1c>
 8004710:	42a9      	cmp	r1, r5
 8004712:	d905      	bls.n	8004720 <_malloc_r+0x28>
 8004714:	230c      	movs	r3, #12
 8004716:	2600      	movs	r6, #0
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4630      	mov	r0, r6
 800471c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004720:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047f4 <_malloc_r+0xfc>
 8004724:	f000 f868 	bl	80047f8 <__malloc_lock>
 8004728:	f8d8 3000 	ldr.w	r3, [r8]
 800472c:	461c      	mov	r4, r3
 800472e:	bb5c      	cbnz	r4, 8004788 <_malloc_r+0x90>
 8004730:	4629      	mov	r1, r5
 8004732:	4638      	mov	r0, r7
 8004734:	f7ff ffc0 	bl	80046b8 <sbrk_aligned>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	4604      	mov	r4, r0
 800473c:	d155      	bne.n	80047ea <_malloc_r+0xf2>
 800473e:	f8d8 4000 	ldr.w	r4, [r8]
 8004742:	4626      	mov	r6, r4
 8004744:	2e00      	cmp	r6, #0
 8004746:	d145      	bne.n	80047d4 <_malloc_r+0xdc>
 8004748:	2c00      	cmp	r4, #0
 800474a:	d048      	beq.n	80047de <_malloc_r+0xe6>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	4631      	mov	r1, r6
 8004750:	4638      	mov	r0, r7
 8004752:	eb04 0903 	add.w	r9, r4, r3
 8004756:	f000 fdd1 	bl	80052fc <_sbrk_r>
 800475a:	4581      	cmp	r9, r0
 800475c:	d13f      	bne.n	80047de <_malloc_r+0xe6>
 800475e:	6821      	ldr	r1, [r4, #0]
 8004760:	4638      	mov	r0, r7
 8004762:	1a6d      	subs	r5, r5, r1
 8004764:	4629      	mov	r1, r5
 8004766:	f7ff ffa7 	bl	80046b8 <sbrk_aligned>
 800476a:	3001      	adds	r0, #1
 800476c:	d037      	beq.n	80047de <_malloc_r+0xe6>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	442b      	add	r3, r5
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	f8d8 3000 	ldr.w	r3, [r8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d038      	beq.n	80047ee <_malloc_r+0xf6>
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	42a2      	cmp	r2, r4
 8004780:	d12b      	bne.n	80047da <_malloc_r+0xe2>
 8004782:	2200      	movs	r2, #0
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	e00f      	b.n	80047a8 <_malloc_r+0xb0>
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	1b52      	subs	r2, r2, r5
 800478c:	d41f      	bmi.n	80047ce <_malloc_r+0xd6>
 800478e:	2a0b      	cmp	r2, #11
 8004790:	d917      	bls.n	80047c2 <_malloc_r+0xca>
 8004792:	1961      	adds	r1, r4, r5
 8004794:	42a3      	cmp	r3, r4
 8004796:	6025      	str	r5, [r4, #0]
 8004798:	bf18      	it	ne
 800479a:	6059      	strne	r1, [r3, #4]
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	bf08      	it	eq
 80047a0:	f8c8 1000 	streq.w	r1, [r8]
 80047a4:	5162      	str	r2, [r4, r5]
 80047a6:	604b      	str	r3, [r1, #4]
 80047a8:	4638      	mov	r0, r7
 80047aa:	f104 060b 	add.w	r6, r4, #11
 80047ae:	f000 f829 	bl	8004804 <__malloc_unlock>
 80047b2:	f026 0607 	bic.w	r6, r6, #7
 80047b6:	1d23      	adds	r3, r4, #4
 80047b8:	1af2      	subs	r2, r6, r3
 80047ba:	d0ae      	beq.n	800471a <_malloc_r+0x22>
 80047bc:	1b9b      	subs	r3, r3, r6
 80047be:	50a3      	str	r3, [r4, r2]
 80047c0:	e7ab      	b.n	800471a <_malloc_r+0x22>
 80047c2:	42a3      	cmp	r3, r4
 80047c4:	6862      	ldr	r2, [r4, #4]
 80047c6:	d1dd      	bne.n	8004784 <_malloc_r+0x8c>
 80047c8:	f8c8 2000 	str.w	r2, [r8]
 80047cc:	e7ec      	b.n	80047a8 <_malloc_r+0xb0>
 80047ce:	4623      	mov	r3, r4
 80047d0:	6864      	ldr	r4, [r4, #4]
 80047d2:	e7ac      	b.n	800472e <_malloc_r+0x36>
 80047d4:	4634      	mov	r4, r6
 80047d6:	6876      	ldr	r6, [r6, #4]
 80047d8:	e7b4      	b.n	8004744 <_malloc_r+0x4c>
 80047da:	4613      	mov	r3, r2
 80047dc:	e7cc      	b.n	8004778 <_malloc_r+0x80>
 80047de:	230c      	movs	r3, #12
 80047e0:	4638      	mov	r0, r7
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	f000 f80e 	bl	8004804 <__malloc_unlock>
 80047e8:	e797      	b.n	800471a <_malloc_r+0x22>
 80047ea:	6025      	str	r5, [r4, #0]
 80047ec:	e7dc      	b.n	80047a8 <_malloc_r+0xb0>
 80047ee:	605b      	str	r3, [r3, #4]
 80047f0:	deff      	udf	#255	; 0xff
 80047f2:	bf00      	nop
 80047f4:	20000270 	.word	0x20000270

080047f8 <__malloc_lock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__malloc_lock+0x8>)
 80047fa:	f7ff bf13 	b.w	8004624 <__retarget_lock_acquire_recursive>
 80047fe:	bf00      	nop
 8004800:	2000026c 	.word	0x2000026c

08004804 <__malloc_unlock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_unlock+0x8>)
 8004806:	f7ff bf0e 	b.w	8004626 <__retarget_lock_release_recursive>
 800480a:	bf00      	nop
 800480c:	2000026c 	.word	0x2000026c

08004810 <__ssputs_r>:
 8004810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	461f      	mov	r7, r3
 8004816:	688e      	ldr	r6, [r1, #8]
 8004818:	4682      	mov	sl, r0
 800481a:	42be      	cmp	r6, r7
 800481c:	460c      	mov	r4, r1
 800481e:	4690      	mov	r8, r2
 8004820:	680b      	ldr	r3, [r1, #0]
 8004822:	d82c      	bhi.n	800487e <__ssputs_r+0x6e>
 8004824:	898a      	ldrh	r2, [r1, #12]
 8004826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800482a:	d026      	beq.n	800487a <__ssputs_r+0x6a>
 800482c:	6965      	ldr	r5, [r4, #20]
 800482e:	6909      	ldr	r1, [r1, #16]
 8004830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004834:	eba3 0901 	sub.w	r9, r3, r1
 8004838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800483c:	1c7b      	adds	r3, r7, #1
 800483e:	444b      	add	r3, r9
 8004840:	106d      	asrs	r5, r5, #1
 8004842:	429d      	cmp	r5, r3
 8004844:	bf38      	it	cc
 8004846:	461d      	movcc	r5, r3
 8004848:	0553      	lsls	r3, r2, #21
 800484a:	d527      	bpl.n	800489c <__ssputs_r+0x8c>
 800484c:	4629      	mov	r1, r5
 800484e:	f7ff ff53 	bl	80046f8 <_malloc_r>
 8004852:	4606      	mov	r6, r0
 8004854:	b360      	cbz	r0, 80048b0 <__ssputs_r+0xa0>
 8004856:	464a      	mov	r2, r9
 8004858:	6921      	ldr	r1, [r4, #16]
 800485a:	f000 fd6d 	bl	8005338 <memcpy>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	6126      	str	r6, [r4, #16]
 800486c:	444e      	add	r6, r9
 800486e:	6026      	str	r6, [r4, #0]
 8004870:	463e      	mov	r6, r7
 8004872:	6165      	str	r5, [r4, #20]
 8004874:	eba5 0509 	sub.w	r5, r5, r9
 8004878:	60a5      	str	r5, [r4, #8]
 800487a:	42be      	cmp	r6, r7
 800487c:	d900      	bls.n	8004880 <__ssputs_r+0x70>
 800487e:	463e      	mov	r6, r7
 8004880:	4632      	mov	r2, r6
 8004882:	4641      	mov	r1, r8
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	f000 fcfc 	bl	8005282 <memmove>
 800488a:	2000      	movs	r0, #0
 800488c:	68a3      	ldr	r3, [r4, #8]
 800488e:	1b9b      	subs	r3, r3, r6
 8004890:	60a3      	str	r3, [r4, #8]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	4433      	add	r3, r6
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	462a      	mov	r2, r5
 800489e:	f000 fd59 	bl	8005354 <_realloc_r>
 80048a2:	4606      	mov	r6, r0
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d1e0      	bne.n	800486a <__ssputs_r+0x5a>
 80048a8:	4650      	mov	r0, sl
 80048aa:	6921      	ldr	r1, [r4, #16]
 80048ac:	f7ff febc 	bl	8004628 <_free_r>
 80048b0:	230c      	movs	r3, #12
 80048b2:	f8ca 3000 	str.w	r3, [sl]
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	e7e9      	b.n	8004898 <__ssputs_r+0x88>

080048c4 <_svfiprintf_r>:
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	4698      	mov	r8, r3
 80048ca:	898b      	ldrh	r3, [r1, #12]
 80048cc:	4607      	mov	r7, r0
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	460d      	mov	r5, r1
 80048d2:	4614      	mov	r4, r2
 80048d4:	b09d      	sub	sp, #116	; 0x74
 80048d6:	d50e      	bpl.n	80048f6 <_svfiprintf_r+0x32>
 80048d8:	690b      	ldr	r3, [r1, #16]
 80048da:	b963      	cbnz	r3, 80048f6 <_svfiprintf_r+0x32>
 80048dc:	2140      	movs	r1, #64	; 0x40
 80048de:	f7ff ff0b 	bl	80046f8 <_malloc_r>
 80048e2:	6028      	str	r0, [r5, #0]
 80048e4:	6128      	str	r0, [r5, #16]
 80048e6:	b920      	cbnz	r0, 80048f2 <_svfiprintf_r+0x2e>
 80048e8:	230c      	movs	r3, #12
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e0d0      	b.n	8004a94 <_svfiprintf_r+0x1d0>
 80048f2:	2340      	movs	r3, #64	; 0x40
 80048f4:	616b      	str	r3, [r5, #20]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9309      	str	r3, [sp, #36]	; 0x24
 80048fa:	2320      	movs	r3, #32
 80048fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004900:	2330      	movs	r3, #48	; 0x30
 8004902:	f04f 0901 	mov.w	r9, #1
 8004906:	f8cd 800c 	str.w	r8, [sp, #12]
 800490a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004aac <_svfiprintf_r+0x1e8>
 800490e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004912:	4623      	mov	r3, r4
 8004914:	469a      	mov	sl, r3
 8004916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800491a:	b10a      	cbz	r2, 8004920 <_svfiprintf_r+0x5c>
 800491c:	2a25      	cmp	r2, #37	; 0x25
 800491e:	d1f9      	bne.n	8004914 <_svfiprintf_r+0x50>
 8004920:	ebba 0b04 	subs.w	fp, sl, r4
 8004924:	d00b      	beq.n	800493e <_svfiprintf_r+0x7a>
 8004926:	465b      	mov	r3, fp
 8004928:	4622      	mov	r2, r4
 800492a:	4629      	mov	r1, r5
 800492c:	4638      	mov	r0, r7
 800492e:	f7ff ff6f 	bl	8004810 <__ssputs_r>
 8004932:	3001      	adds	r0, #1
 8004934:	f000 80a9 	beq.w	8004a8a <_svfiprintf_r+0x1c6>
 8004938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800493a:	445a      	add	r2, fp
 800493c:	9209      	str	r2, [sp, #36]	; 0x24
 800493e:	f89a 3000 	ldrb.w	r3, [sl]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80a1 	beq.w	8004a8a <_svfiprintf_r+0x1c6>
 8004948:	2300      	movs	r3, #0
 800494a:	f04f 32ff 	mov.w	r2, #4294967295
 800494e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004952:	f10a 0a01 	add.w	sl, sl, #1
 8004956:	9304      	str	r3, [sp, #16]
 8004958:	9307      	str	r3, [sp, #28]
 800495a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800495e:	931a      	str	r3, [sp, #104]	; 0x68
 8004960:	4654      	mov	r4, sl
 8004962:	2205      	movs	r2, #5
 8004964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004968:	4850      	ldr	r0, [pc, #320]	; (8004aac <_svfiprintf_r+0x1e8>)
 800496a:	f000 fcd7 	bl	800531c <memchr>
 800496e:	9a04      	ldr	r2, [sp, #16]
 8004970:	b9d8      	cbnz	r0, 80049aa <_svfiprintf_r+0xe6>
 8004972:	06d0      	lsls	r0, r2, #27
 8004974:	bf44      	itt	mi
 8004976:	2320      	movmi	r3, #32
 8004978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497c:	0711      	lsls	r1, r2, #28
 800497e:	bf44      	itt	mi
 8004980:	232b      	movmi	r3, #43	; 0x2b
 8004982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004986:	f89a 3000 	ldrb.w	r3, [sl]
 800498a:	2b2a      	cmp	r3, #42	; 0x2a
 800498c:	d015      	beq.n	80049ba <_svfiprintf_r+0xf6>
 800498e:	4654      	mov	r4, sl
 8004990:	2000      	movs	r0, #0
 8004992:	f04f 0c0a 	mov.w	ip, #10
 8004996:	9a07      	ldr	r2, [sp, #28]
 8004998:	4621      	mov	r1, r4
 800499a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800499e:	3b30      	subs	r3, #48	; 0x30
 80049a0:	2b09      	cmp	r3, #9
 80049a2:	d94d      	bls.n	8004a40 <_svfiprintf_r+0x17c>
 80049a4:	b1b0      	cbz	r0, 80049d4 <_svfiprintf_r+0x110>
 80049a6:	9207      	str	r2, [sp, #28]
 80049a8:	e014      	b.n	80049d4 <_svfiprintf_r+0x110>
 80049aa:	eba0 0308 	sub.w	r3, r0, r8
 80049ae:	fa09 f303 	lsl.w	r3, r9, r3
 80049b2:	4313      	orrs	r3, r2
 80049b4:	46a2      	mov	sl, r4
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	e7d2      	b.n	8004960 <_svfiprintf_r+0x9c>
 80049ba:	9b03      	ldr	r3, [sp, #12]
 80049bc:	1d19      	adds	r1, r3, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	9103      	str	r1, [sp, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bfbb      	ittet	lt
 80049c6:	425b      	neglt	r3, r3
 80049c8:	f042 0202 	orrlt.w	r2, r2, #2
 80049cc:	9307      	strge	r3, [sp, #28]
 80049ce:	9307      	strlt	r3, [sp, #28]
 80049d0:	bfb8      	it	lt
 80049d2:	9204      	strlt	r2, [sp, #16]
 80049d4:	7823      	ldrb	r3, [r4, #0]
 80049d6:	2b2e      	cmp	r3, #46	; 0x2e
 80049d8:	d10c      	bne.n	80049f4 <_svfiprintf_r+0x130>
 80049da:	7863      	ldrb	r3, [r4, #1]
 80049dc:	2b2a      	cmp	r3, #42	; 0x2a
 80049de:	d134      	bne.n	8004a4a <_svfiprintf_r+0x186>
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	3402      	adds	r4, #2
 80049e4:	1d1a      	adds	r2, r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	9203      	str	r2, [sp, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bfb8      	it	lt
 80049ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80049f2:	9305      	str	r3, [sp, #20]
 80049f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004ab0 <_svfiprintf_r+0x1ec>
 80049f8:	2203      	movs	r2, #3
 80049fa:	4650      	mov	r0, sl
 80049fc:	7821      	ldrb	r1, [r4, #0]
 80049fe:	f000 fc8d 	bl	800531c <memchr>
 8004a02:	b138      	cbz	r0, 8004a14 <_svfiprintf_r+0x150>
 8004a04:	2240      	movs	r2, #64	; 0x40
 8004a06:	9b04      	ldr	r3, [sp, #16]
 8004a08:	eba0 000a 	sub.w	r0, r0, sl
 8004a0c:	4082      	lsls	r2, r0
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	3401      	adds	r4, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a18:	2206      	movs	r2, #6
 8004a1a:	4826      	ldr	r0, [pc, #152]	; (8004ab4 <_svfiprintf_r+0x1f0>)
 8004a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a20:	f000 fc7c 	bl	800531c <memchr>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d038      	beq.n	8004a9a <_svfiprintf_r+0x1d6>
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <_svfiprintf_r+0x1f4>)
 8004a2a:	bb1b      	cbnz	r3, 8004a74 <_svfiprintf_r+0x1b0>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	3307      	adds	r3, #7
 8004a30:	f023 0307 	bic.w	r3, r3, #7
 8004a34:	3308      	adds	r3, #8
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3a:	4433      	add	r3, r6
 8004a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3e:	e768      	b.n	8004912 <_svfiprintf_r+0x4e>
 8004a40:	460c      	mov	r4, r1
 8004a42:	2001      	movs	r0, #1
 8004a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a48:	e7a6      	b.n	8004998 <_svfiprintf_r+0xd4>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f04f 0c0a 	mov.w	ip, #10
 8004a50:	4619      	mov	r1, r3
 8004a52:	3401      	adds	r4, #1
 8004a54:	9305      	str	r3, [sp, #20]
 8004a56:	4620      	mov	r0, r4
 8004a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a5c:	3a30      	subs	r2, #48	; 0x30
 8004a5e:	2a09      	cmp	r2, #9
 8004a60:	d903      	bls.n	8004a6a <_svfiprintf_r+0x1a6>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0c6      	beq.n	80049f4 <_svfiprintf_r+0x130>
 8004a66:	9105      	str	r1, [sp, #20]
 8004a68:	e7c4      	b.n	80049f4 <_svfiprintf_r+0x130>
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a72:	e7f0      	b.n	8004a56 <_svfiprintf_r+0x192>
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <_svfiprintf_r+0x1f8>)
 8004a7e:	a904      	add	r1, sp, #16
 8004a80:	f3af 8000 	nop.w
 8004a84:	1c42      	adds	r2, r0, #1
 8004a86:	4606      	mov	r6, r0
 8004a88:	d1d6      	bne.n	8004a38 <_svfiprintf_r+0x174>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	065b      	lsls	r3, r3, #25
 8004a8e:	f53f af2d 	bmi.w	80048ec <_svfiprintf_r+0x28>
 8004a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a94:	b01d      	add	sp, #116	; 0x74
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	ab03      	add	r3, sp, #12
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	462a      	mov	r2, r5
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <_svfiprintf_r+0x1f8>)
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	f000 f9bf 	bl	8004e28 <_printf_i>
 8004aaa:	e7eb      	b.n	8004a84 <_svfiprintf_r+0x1c0>
 8004aac:	080056a2 	.word	0x080056a2
 8004ab0:	080056a8 	.word	0x080056a8
 8004ab4:	080056ac 	.word	0x080056ac
 8004ab8:	00000000 	.word	0x00000000
 8004abc:	08004811 	.word	0x08004811

08004ac0 <__sfputc_r>:
 8004ac0:	6893      	ldr	r3, [r2, #8]
 8004ac2:	b410      	push	{r4}
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	6093      	str	r3, [r2, #8]
 8004aca:	da07      	bge.n	8004adc <__sfputc_r+0x1c>
 8004acc:	6994      	ldr	r4, [r2, #24]
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	db01      	blt.n	8004ad6 <__sfputc_r+0x16>
 8004ad2:	290a      	cmp	r1, #10
 8004ad4:	d102      	bne.n	8004adc <__sfputc_r+0x1c>
 8004ad6:	bc10      	pop	{r4}
 8004ad8:	f7ff bc8d 	b.w	80043f6 <__swbuf_r>
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	1c58      	adds	r0, r3, #1
 8004ae0:	6010      	str	r0, [r2, #0]
 8004ae2:	7019      	strb	r1, [r3, #0]
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	bc10      	pop	{r4}
 8004ae8:	4770      	bx	lr

08004aea <__sfputs_r>:
 8004aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aec:	4606      	mov	r6, r0
 8004aee:	460f      	mov	r7, r1
 8004af0:	4614      	mov	r4, r2
 8004af2:	18d5      	adds	r5, r2, r3
 8004af4:	42ac      	cmp	r4, r5
 8004af6:	d101      	bne.n	8004afc <__sfputs_r+0x12>
 8004af8:	2000      	movs	r0, #0
 8004afa:	e007      	b.n	8004b0c <__sfputs_r+0x22>
 8004afc:	463a      	mov	r2, r7
 8004afe:	4630      	mov	r0, r6
 8004b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b04:	f7ff ffdc 	bl	8004ac0 <__sfputc_r>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d1f3      	bne.n	8004af4 <__sfputs_r+0xa>
 8004b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b10 <_vfiprintf_r>:
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	460d      	mov	r5, r1
 8004b16:	4614      	mov	r4, r2
 8004b18:	4698      	mov	r8, r3
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	b09d      	sub	sp, #116	; 0x74
 8004b1e:	b118      	cbz	r0, 8004b28 <_vfiprintf_r+0x18>
 8004b20:	6a03      	ldr	r3, [r0, #32]
 8004b22:	b90b      	cbnz	r3, 8004b28 <_vfiprintf_r+0x18>
 8004b24:	f7ff fb60 	bl	80041e8 <__sinit>
 8004b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b2a:	07d9      	lsls	r1, r3, #31
 8004b2c:	d405      	bmi.n	8004b3a <_vfiprintf_r+0x2a>
 8004b2e:	89ab      	ldrh	r3, [r5, #12]
 8004b30:	059a      	lsls	r2, r3, #22
 8004b32:	d402      	bmi.n	8004b3a <_vfiprintf_r+0x2a>
 8004b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b36:	f7ff fd75 	bl	8004624 <__retarget_lock_acquire_recursive>
 8004b3a:	89ab      	ldrh	r3, [r5, #12]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	d501      	bpl.n	8004b44 <_vfiprintf_r+0x34>
 8004b40:	692b      	ldr	r3, [r5, #16]
 8004b42:	b99b      	cbnz	r3, 8004b6c <_vfiprintf_r+0x5c>
 8004b44:	4629      	mov	r1, r5
 8004b46:	4630      	mov	r0, r6
 8004b48:	f7ff fc92 	bl	8004470 <__swsetup_r>
 8004b4c:	b170      	cbz	r0, 8004b6c <_vfiprintf_r+0x5c>
 8004b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b50:	07dc      	lsls	r4, r3, #31
 8004b52:	d504      	bpl.n	8004b5e <_vfiprintf_r+0x4e>
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	b01d      	add	sp, #116	; 0x74
 8004b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	0598      	lsls	r0, r3, #22
 8004b62:	d4f7      	bmi.n	8004b54 <_vfiprintf_r+0x44>
 8004b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b66:	f7ff fd5e 	bl	8004626 <__retarget_lock_release_recursive>
 8004b6a:	e7f3      	b.n	8004b54 <_vfiprintf_r+0x44>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	2320      	movs	r3, #32
 8004b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b76:	2330      	movs	r3, #48	; 0x30
 8004b78:	f04f 0901 	mov.w	r9, #1
 8004b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b80:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004d30 <_vfiprintf_r+0x220>
 8004b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b88:	4623      	mov	r3, r4
 8004b8a:	469a      	mov	sl, r3
 8004b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b90:	b10a      	cbz	r2, 8004b96 <_vfiprintf_r+0x86>
 8004b92:	2a25      	cmp	r2, #37	; 0x25
 8004b94:	d1f9      	bne.n	8004b8a <_vfiprintf_r+0x7a>
 8004b96:	ebba 0b04 	subs.w	fp, sl, r4
 8004b9a:	d00b      	beq.n	8004bb4 <_vfiprintf_r+0xa4>
 8004b9c:	465b      	mov	r3, fp
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff ffa1 	bl	8004aea <__sfputs_r>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f000 80a9 	beq.w	8004d00 <_vfiprintf_r+0x1f0>
 8004bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb0:	445a      	add	r2, fp
 8004bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80a1 	beq.w	8004d00 <_vfiprintf_r+0x1f0>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc8:	f10a 0a01 	add.w	sl, sl, #1
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	9307      	str	r3, [sp, #28]
 8004bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd6:	4654      	mov	r4, sl
 8004bd8:	2205      	movs	r2, #5
 8004bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bde:	4854      	ldr	r0, [pc, #336]	; (8004d30 <_vfiprintf_r+0x220>)
 8004be0:	f000 fb9c 	bl	800531c <memchr>
 8004be4:	9a04      	ldr	r2, [sp, #16]
 8004be6:	b9d8      	cbnz	r0, 8004c20 <_vfiprintf_r+0x110>
 8004be8:	06d1      	lsls	r1, r2, #27
 8004bea:	bf44      	itt	mi
 8004bec:	2320      	movmi	r3, #32
 8004bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf2:	0713      	lsls	r3, r2, #28
 8004bf4:	bf44      	itt	mi
 8004bf6:	232b      	movmi	r3, #43	; 0x2b
 8004bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004c00:	2b2a      	cmp	r3, #42	; 0x2a
 8004c02:	d015      	beq.n	8004c30 <_vfiprintf_r+0x120>
 8004c04:	4654      	mov	r4, sl
 8004c06:	2000      	movs	r0, #0
 8004c08:	f04f 0c0a 	mov.w	ip, #10
 8004c0c:	9a07      	ldr	r2, [sp, #28]
 8004c0e:	4621      	mov	r1, r4
 8004c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c14:	3b30      	subs	r3, #48	; 0x30
 8004c16:	2b09      	cmp	r3, #9
 8004c18:	d94d      	bls.n	8004cb6 <_vfiprintf_r+0x1a6>
 8004c1a:	b1b0      	cbz	r0, 8004c4a <_vfiprintf_r+0x13a>
 8004c1c:	9207      	str	r2, [sp, #28]
 8004c1e:	e014      	b.n	8004c4a <_vfiprintf_r+0x13a>
 8004c20:	eba0 0308 	sub.w	r3, r0, r8
 8004c24:	fa09 f303 	lsl.w	r3, r9, r3
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	46a2      	mov	sl, r4
 8004c2c:	9304      	str	r3, [sp, #16]
 8004c2e:	e7d2      	b.n	8004bd6 <_vfiprintf_r+0xc6>
 8004c30:	9b03      	ldr	r3, [sp, #12]
 8004c32:	1d19      	adds	r1, r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	9103      	str	r1, [sp, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bfbb      	ittet	lt
 8004c3c:	425b      	neglt	r3, r3
 8004c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c42:	9307      	strge	r3, [sp, #28]
 8004c44:	9307      	strlt	r3, [sp, #28]
 8004c46:	bfb8      	it	lt
 8004c48:	9204      	strlt	r2, [sp, #16]
 8004c4a:	7823      	ldrb	r3, [r4, #0]
 8004c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4e:	d10c      	bne.n	8004c6a <_vfiprintf_r+0x15a>
 8004c50:	7863      	ldrb	r3, [r4, #1]
 8004c52:	2b2a      	cmp	r3, #42	; 0x2a
 8004c54:	d134      	bne.n	8004cc0 <_vfiprintf_r+0x1b0>
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	3402      	adds	r4, #2
 8004c5a:	1d1a      	adds	r2, r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	9203      	str	r2, [sp, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bfb8      	it	lt
 8004c64:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c68:	9305      	str	r3, [sp, #20]
 8004c6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d34 <_vfiprintf_r+0x224>
 8004c6e:	2203      	movs	r2, #3
 8004c70:	4650      	mov	r0, sl
 8004c72:	7821      	ldrb	r1, [r4, #0]
 8004c74:	f000 fb52 	bl	800531c <memchr>
 8004c78:	b138      	cbz	r0, 8004c8a <_vfiprintf_r+0x17a>
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	9b04      	ldr	r3, [sp, #16]
 8004c7e:	eba0 000a 	sub.w	r0, r0, sl
 8004c82:	4082      	lsls	r2, r0
 8004c84:	4313      	orrs	r3, r2
 8004c86:	3401      	adds	r4, #1
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8e:	2206      	movs	r2, #6
 8004c90:	4829      	ldr	r0, [pc, #164]	; (8004d38 <_vfiprintf_r+0x228>)
 8004c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c96:	f000 fb41 	bl	800531c <memchr>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d03f      	beq.n	8004d1e <_vfiprintf_r+0x20e>
 8004c9e:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <_vfiprintf_r+0x22c>)
 8004ca0:	bb1b      	cbnz	r3, 8004cea <_vfiprintf_r+0x1da>
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	3307      	adds	r3, #7
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	3308      	adds	r3, #8
 8004cac:	9303      	str	r3, [sp, #12]
 8004cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb0:	443b      	add	r3, r7
 8004cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb4:	e768      	b.n	8004b88 <_vfiprintf_r+0x78>
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	2001      	movs	r0, #1
 8004cba:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cbe:	e7a6      	b.n	8004c0e <_vfiprintf_r+0xfe>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f04f 0c0a 	mov.w	ip, #10
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	3401      	adds	r4, #1
 8004cca:	9305      	str	r3, [sp, #20]
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd2:	3a30      	subs	r2, #48	; 0x30
 8004cd4:	2a09      	cmp	r2, #9
 8004cd6:	d903      	bls.n	8004ce0 <_vfiprintf_r+0x1d0>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0c6      	beq.n	8004c6a <_vfiprintf_r+0x15a>
 8004cdc:	9105      	str	r1, [sp, #20]
 8004cde:	e7c4      	b.n	8004c6a <_vfiprintf_r+0x15a>
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce8:	e7f0      	b.n	8004ccc <_vfiprintf_r+0x1bc>
 8004cea:	ab03      	add	r3, sp, #12
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	462a      	mov	r2, r5
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <_vfiprintf_r+0x230>)
 8004cf4:	a904      	add	r1, sp, #16
 8004cf6:	f3af 8000 	nop.w
 8004cfa:	4607      	mov	r7, r0
 8004cfc:	1c78      	adds	r0, r7, #1
 8004cfe:	d1d6      	bne.n	8004cae <_vfiprintf_r+0x19e>
 8004d00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d02:	07d9      	lsls	r1, r3, #31
 8004d04:	d405      	bmi.n	8004d12 <_vfiprintf_r+0x202>
 8004d06:	89ab      	ldrh	r3, [r5, #12]
 8004d08:	059a      	lsls	r2, r3, #22
 8004d0a:	d402      	bmi.n	8004d12 <_vfiprintf_r+0x202>
 8004d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d0e:	f7ff fc8a 	bl	8004626 <__retarget_lock_release_recursive>
 8004d12:	89ab      	ldrh	r3, [r5, #12]
 8004d14:	065b      	lsls	r3, r3, #25
 8004d16:	f53f af1d 	bmi.w	8004b54 <_vfiprintf_r+0x44>
 8004d1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d1c:	e71c      	b.n	8004b58 <_vfiprintf_r+0x48>
 8004d1e:	ab03      	add	r3, sp, #12
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	462a      	mov	r2, r5
 8004d24:	4630      	mov	r0, r6
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <_vfiprintf_r+0x230>)
 8004d28:	a904      	add	r1, sp, #16
 8004d2a:	f000 f87d 	bl	8004e28 <_printf_i>
 8004d2e:	e7e4      	b.n	8004cfa <_vfiprintf_r+0x1ea>
 8004d30:	080056a2 	.word	0x080056a2
 8004d34:	080056a8 	.word	0x080056a8
 8004d38:	080056ac 	.word	0x080056ac
 8004d3c:	00000000 	.word	0x00000000
 8004d40:	08004aeb 	.word	0x08004aeb

08004d44 <_printf_common>:
 8004d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	4616      	mov	r6, r2
 8004d4a:	4699      	mov	r9, r3
 8004d4c:	688a      	ldr	r2, [r1, #8]
 8004d4e:	690b      	ldr	r3, [r1, #16]
 8004d50:	4607      	mov	r7, r0
 8004d52:	4293      	cmp	r3, r2
 8004d54:	bfb8      	it	lt
 8004d56:	4613      	movlt	r3, r2
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d5e:	460c      	mov	r4, r1
 8004d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d64:	b10a      	cbz	r2, 8004d6a <_printf_common+0x26>
 8004d66:	3301      	adds	r3, #1
 8004d68:	6033      	str	r3, [r6, #0]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	0699      	lsls	r1, r3, #26
 8004d6e:	bf42      	ittt	mi
 8004d70:	6833      	ldrmi	r3, [r6, #0]
 8004d72:	3302      	addmi	r3, #2
 8004d74:	6033      	strmi	r3, [r6, #0]
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	f015 0506 	ands.w	r5, r5, #6
 8004d7c:	d106      	bne.n	8004d8c <_printf_common+0x48>
 8004d7e:	f104 0a19 	add.w	sl, r4, #25
 8004d82:	68e3      	ldr	r3, [r4, #12]
 8004d84:	6832      	ldr	r2, [r6, #0]
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	42ab      	cmp	r3, r5
 8004d8a:	dc2b      	bgt.n	8004de4 <_printf_common+0xa0>
 8004d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d90:	1e13      	subs	r3, r2, #0
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	bf18      	it	ne
 8004d96:	2301      	movne	r3, #1
 8004d98:	0692      	lsls	r2, r2, #26
 8004d9a:	d430      	bmi.n	8004dfe <_printf_common+0xba>
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	4638      	mov	r0, r7
 8004da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d023      	beq.n	8004df2 <_printf_common+0xae>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	6922      	ldr	r2, [r4, #16]
 8004dae:	f003 0306 	and.w	r3, r3, #6
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	bf14      	ite	ne
 8004db6:	2500      	movne	r5, #0
 8004db8:	6833      	ldreq	r3, [r6, #0]
 8004dba:	f04f 0600 	mov.w	r6, #0
 8004dbe:	bf08      	it	eq
 8004dc0:	68e5      	ldreq	r5, [r4, #12]
 8004dc2:	f104 041a 	add.w	r4, r4, #26
 8004dc6:	bf08      	it	eq
 8004dc8:	1aed      	subeq	r5, r5, r3
 8004dca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dce:	bf08      	it	eq
 8004dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bfc4      	itt	gt
 8004dd8:	1a9b      	subgt	r3, r3, r2
 8004dda:	18ed      	addgt	r5, r5, r3
 8004ddc:	42b5      	cmp	r5, r6
 8004dde:	d11a      	bne.n	8004e16 <_printf_common+0xd2>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e008      	b.n	8004df6 <_printf_common+0xb2>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4652      	mov	r2, sl
 8004de8:	4649      	mov	r1, r9
 8004dea:	4638      	mov	r0, r7
 8004dec:	47c0      	blx	r8
 8004dee:	3001      	adds	r0, #1
 8004df0:	d103      	bne.n	8004dfa <_printf_common+0xb6>
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfa:	3501      	adds	r5, #1
 8004dfc:	e7c1      	b.n	8004d82 <_printf_common+0x3e>
 8004dfe:	2030      	movs	r0, #48	; 0x30
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e0c:	4422      	add	r2, r4
 8004e0e:	3302      	adds	r3, #2
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e14:	e7c2      	b.n	8004d9c <_printf_common+0x58>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4622      	mov	r2, r4
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	47c0      	blx	r8
 8004e20:	3001      	adds	r0, #1
 8004e22:	d0e6      	beq.n	8004df2 <_printf_common+0xae>
 8004e24:	3601      	adds	r6, #1
 8004e26:	e7d9      	b.n	8004ddc <_printf_common+0x98>

08004e28 <_printf_i>:
 8004e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	7e0f      	ldrb	r7, [r1, #24]
 8004e2e:	4691      	mov	r9, r2
 8004e30:	2f78      	cmp	r7, #120	; 0x78
 8004e32:	4680      	mov	r8, r0
 8004e34:	460c      	mov	r4, r1
 8004e36:	469a      	mov	sl, r3
 8004e38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e3e:	d807      	bhi.n	8004e50 <_printf_i+0x28>
 8004e40:	2f62      	cmp	r7, #98	; 0x62
 8004e42:	d80a      	bhi.n	8004e5a <_printf_i+0x32>
 8004e44:	2f00      	cmp	r7, #0
 8004e46:	f000 80d5 	beq.w	8004ff4 <_printf_i+0x1cc>
 8004e4a:	2f58      	cmp	r7, #88	; 0x58
 8004e4c:	f000 80c1 	beq.w	8004fd2 <_printf_i+0x1aa>
 8004e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e58:	e03a      	b.n	8004ed0 <_printf_i+0xa8>
 8004e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e5e:	2b15      	cmp	r3, #21
 8004e60:	d8f6      	bhi.n	8004e50 <_printf_i+0x28>
 8004e62:	a101      	add	r1, pc, #4	; (adr r1, 8004e68 <_printf_i+0x40>)
 8004e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e68:	08004ec1 	.word	0x08004ec1
 8004e6c:	08004ed5 	.word	0x08004ed5
 8004e70:	08004e51 	.word	0x08004e51
 8004e74:	08004e51 	.word	0x08004e51
 8004e78:	08004e51 	.word	0x08004e51
 8004e7c:	08004e51 	.word	0x08004e51
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004e51 	.word	0x08004e51
 8004e88:	08004e51 	.word	0x08004e51
 8004e8c:	08004e51 	.word	0x08004e51
 8004e90:	08004e51 	.word	0x08004e51
 8004e94:	08004fdb 	.word	0x08004fdb
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004f95 	.word	0x08004f95
 8004ea0:	08004e51 	.word	0x08004e51
 8004ea4:	08004e51 	.word	0x08004e51
 8004ea8:	08004ffd 	.word	0x08004ffd
 8004eac:	08004e51 	.word	0x08004e51
 8004eb0:	08004f01 	.word	0x08004f01
 8004eb4:	08004e51 	.word	0x08004e51
 8004eb8:	08004e51 	.word	0x08004e51
 8004ebc:	08004f9d 	.word	0x08004f9d
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	602a      	str	r2, [r5, #0]
 8004ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0a0      	b.n	8005016 <_printf_i+0x1ee>
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	0607      	lsls	r7, r0, #24
 8004eda:	f103 0104 	add.w	r1, r3, #4
 8004ede:	6029      	str	r1, [r5, #0]
 8004ee0:	d501      	bpl.n	8004ee6 <_printf_i+0xbe>
 8004ee2:	681e      	ldr	r6, [r3, #0]
 8004ee4:	e003      	b.n	8004eee <_printf_i+0xc6>
 8004ee6:	0646      	lsls	r6, r0, #25
 8004ee8:	d5fb      	bpl.n	8004ee2 <_printf_i+0xba>
 8004eea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	da03      	bge.n	8004efa <_printf_i+0xd2>
 8004ef2:	232d      	movs	r3, #45	; 0x2d
 8004ef4:	4276      	negs	r6, r6
 8004ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efa:	230a      	movs	r3, #10
 8004efc:	4859      	ldr	r0, [pc, #356]	; (8005064 <_printf_i+0x23c>)
 8004efe:	e012      	b.n	8004f26 <_printf_i+0xfe>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	1d19      	adds	r1, r3, #4
 8004f06:	6029      	str	r1, [r5, #0]
 8004f08:	0605      	lsls	r5, r0, #24
 8004f0a:	d501      	bpl.n	8004f10 <_printf_i+0xe8>
 8004f0c:	681e      	ldr	r6, [r3, #0]
 8004f0e:	e002      	b.n	8004f16 <_printf_i+0xee>
 8004f10:	0641      	lsls	r1, r0, #25
 8004f12:	d5fb      	bpl.n	8004f0c <_printf_i+0xe4>
 8004f14:	881e      	ldrh	r6, [r3, #0]
 8004f16:	2f6f      	cmp	r7, #111	; 0x6f
 8004f18:	bf0c      	ite	eq
 8004f1a:	2308      	moveq	r3, #8
 8004f1c:	230a      	movne	r3, #10
 8004f1e:	4851      	ldr	r0, [pc, #324]	; (8005064 <_printf_i+0x23c>)
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f26:	6865      	ldr	r5, [r4, #4]
 8004f28:	2d00      	cmp	r5, #0
 8004f2a:	bfa8      	it	ge
 8004f2c:	6821      	ldrge	r1, [r4, #0]
 8004f2e:	60a5      	str	r5, [r4, #8]
 8004f30:	bfa4      	itt	ge
 8004f32:	f021 0104 	bicge.w	r1, r1, #4
 8004f36:	6021      	strge	r1, [r4, #0]
 8004f38:	b90e      	cbnz	r6, 8004f3e <_printf_i+0x116>
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	d04b      	beq.n	8004fd6 <_printf_i+0x1ae>
 8004f3e:	4615      	mov	r5, r2
 8004f40:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f44:	fb03 6711 	mls	r7, r3, r1, r6
 8004f48:	5dc7      	ldrb	r7, [r0, r7]
 8004f4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f4e:	4637      	mov	r7, r6
 8004f50:	42bb      	cmp	r3, r7
 8004f52:	460e      	mov	r6, r1
 8004f54:	d9f4      	bls.n	8004f40 <_printf_i+0x118>
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d10b      	bne.n	8004f72 <_printf_i+0x14a>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	07de      	lsls	r6, r3, #31
 8004f5e:	d508      	bpl.n	8004f72 <_printf_i+0x14a>
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	6861      	ldr	r1, [r4, #4]
 8004f64:	4299      	cmp	r1, r3
 8004f66:	bfde      	ittt	le
 8004f68:	2330      	movle	r3, #48	; 0x30
 8004f6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f72:	1b52      	subs	r2, r2, r5
 8004f74:	6122      	str	r2, [r4, #16]
 8004f76:	464b      	mov	r3, r9
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	f8cd a000 	str.w	sl, [sp]
 8004f80:	aa03      	add	r2, sp, #12
 8004f82:	f7ff fedf 	bl	8004d44 <_printf_common>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d14a      	bne.n	8005020 <_printf_i+0x1f8>
 8004f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8e:	b004      	add	sp, #16
 8004f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	f043 0320 	orr.w	r3, r3, #32
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	2778      	movs	r7, #120	; 0x78
 8004f9e:	4832      	ldr	r0, [pc, #200]	; (8005068 <_printf_i+0x240>)
 8004fa0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	6829      	ldr	r1, [r5, #0]
 8004fa8:	061f      	lsls	r7, r3, #24
 8004faa:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fae:	d402      	bmi.n	8004fb6 <_printf_i+0x18e>
 8004fb0:	065f      	lsls	r7, r3, #25
 8004fb2:	bf48      	it	mi
 8004fb4:	b2b6      	uxthmi	r6, r6
 8004fb6:	07df      	lsls	r7, r3, #31
 8004fb8:	bf48      	it	mi
 8004fba:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbe:	6029      	str	r1, [r5, #0]
 8004fc0:	bf48      	it	mi
 8004fc2:	6023      	strmi	r3, [r4, #0]
 8004fc4:	b91e      	cbnz	r6, 8004fce <_printf_i+0x1a6>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	f023 0320 	bic.w	r3, r3, #32
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	2310      	movs	r3, #16
 8004fd0:	e7a6      	b.n	8004f20 <_printf_i+0xf8>
 8004fd2:	4824      	ldr	r0, [pc, #144]	; (8005064 <_printf_i+0x23c>)
 8004fd4:	e7e4      	b.n	8004fa0 <_printf_i+0x178>
 8004fd6:	4615      	mov	r5, r2
 8004fd8:	e7bd      	b.n	8004f56 <_printf_i+0x12e>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	6826      	ldr	r6, [r4, #0]
 8004fde:	1d18      	adds	r0, r3, #4
 8004fe0:	6961      	ldr	r1, [r4, #20]
 8004fe2:	6028      	str	r0, [r5, #0]
 8004fe4:	0635      	lsls	r5, r6, #24
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	d501      	bpl.n	8004fee <_printf_i+0x1c6>
 8004fea:	6019      	str	r1, [r3, #0]
 8004fec:	e002      	b.n	8004ff4 <_printf_i+0x1cc>
 8004fee:	0670      	lsls	r0, r6, #25
 8004ff0:	d5fb      	bpl.n	8004fea <_printf_i+0x1c2>
 8004ff2:	8019      	strh	r1, [r3, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4615      	mov	r5, r2
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	e7bc      	b.n	8004f76 <_printf_i+0x14e>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	2100      	movs	r1, #0
 8005000:	1d1a      	adds	r2, r3, #4
 8005002:	602a      	str	r2, [r5, #0]
 8005004:	681d      	ldr	r5, [r3, #0]
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	4628      	mov	r0, r5
 800500a:	f000 f987 	bl	800531c <memchr>
 800500e:	b108      	cbz	r0, 8005014 <_printf_i+0x1ec>
 8005010:	1b40      	subs	r0, r0, r5
 8005012:	6060      	str	r0, [r4, #4]
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	6123      	str	r3, [r4, #16]
 8005018:	2300      	movs	r3, #0
 800501a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501e:	e7aa      	b.n	8004f76 <_printf_i+0x14e>
 8005020:	462a      	mov	r2, r5
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	47d0      	blx	sl
 800502a:	3001      	adds	r0, #1
 800502c:	d0ad      	beq.n	8004f8a <_printf_i+0x162>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	079b      	lsls	r3, r3, #30
 8005032:	d413      	bmi.n	800505c <_printf_i+0x234>
 8005034:	68e0      	ldr	r0, [r4, #12]
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	4298      	cmp	r0, r3
 800503a:	bfb8      	it	lt
 800503c:	4618      	movlt	r0, r3
 800503e:	e7a6      	b.n	8004f8e <_printf_i+0x166>
 8005040:	2301      	movs	r3, #1
 8005042:	4632      	mov	r2, r6
 8005044:	4649      	mov	r1, r9
 8005046:	4640      	mov	r0, r8
 8005048:	47d0      	blx	sl
 800504a:	3001      	adds	r0, #1
 800504c:	d09d      	beq.n	8004f8a <_printf_i+0x162>
 800504e:	3501      	adds	r5, #1
 8005050:	68e3      	ldr	r3, [r4, #12]
 8005052:	9903      	ldr	r1, [sp, #12]
 8005054:	1a5b      	subs	r3, r3, r1
 8005056:	42ab      	cmp	r3, r5
 8005058:	dcf2      	bgt.n	8005040 <_printf_i+0x218>
 800505a:	e7eb      	b.n	8005034 <_printf_i+0x20c>
 800505c:	2500      	movs	r5, #0
 800505e:	f104 0619 	add.w	r6, r4, #25
 8005062:	e7f5      	b.n	8005050 <_printf_i+0x228>
 8005064:	080056b3 	.word	0x080056b3
 8005068:	080056c4 	.word	0x080056c4

0800506c <__sflush_r>:
 800506c:	898a      	ldrh	r2, [r1, #12]
 800506e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005070:	4605      	mov	r5, r0
 8005072:	0710      	lsls	r0, r2, #28
 8005074:	460c      	mov	r4, r1
 8005076:	d457      	bmi.n	8005128 <__sflush_r+0xbc>
 8005078:	684b      	ldr	r3, [r1, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	dc04      	bgt.n	8005088 <__sflush_r+0x1c>
 800507e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	dc01      	bgt.n	8005088 <__sflush_r+0x1c>
 8005084:	2000      	movs	r0, #0
 8005086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800508a:	2e00      	cmp	r6, #0
 800508c:	d0fa      	beq.n	8005084 <__sflush_r+0x18>
 800508e:	2300      	movs	r3, #0
 8005090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005094:	682f      	ldr	r7, [r5, #0]
 8005096:	6a21      	ldr	r1, [r4, #32]
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	d032      	beq.n	8005102 <__sflush_r+0x96>
 800509c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	075a      	lsls	r2, r3, #29
 80050a2:	d505      	bpl.n	80050b0 <__sflush_r+0x44>
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	1ac0      	subs	r0, r0, r3
 80050a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050aa:	b10b      	cbz	r3, 80050b0 <__sflush_r+0x44>
 80050ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050ae:	1ac0      	subs	r0, r0, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	4602      	mov	r2, r0
 80050b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050b6:	4628      	mov	r0, r5
 80050b8:	6a21      	ldr	r1, [r4, #32]
 80050ba:	47b0      	blx	r6
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	d106      	bne.n	80050d0 <__sflush_r+0x64>
 80050c2:	6829      	ldr	r1, [r5, #0]
 80050c4:	291d      	cmp	r1, #29
 80050c6:	d82b      	bhi.n	8005120 <__sflush_r+0xb4>
 80050c8:	4a28      	ldr	r2, [pc, #160]	; (800516c <__sflush_r+0x100>)
 80050ca:	410a      	asrs	r2, r1
 80050cc:	07d6      	lsls	r6, r2, #31
 80050ce:	d427      	bmi.n	8005120 <__sflush_r+0xb4>
 80050d0:	2200      	movs	r2, #0
 80050d2:	6062      	str	r2, [r4, #4]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	04d9      	lsls	r1, r3, #19
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	d504      	bpl.n	80050e6 <__sflush_r+0x7a>
 80050dc:	1c42      	adds	r2, r0, #1
 80050de:	d101      	bne.n	80050e4 <__sflush_r+0x78>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b903      	cbnz	r3, 80050e6 <__sflush_r+0x7a>
 80050e4:	6560      	str	r0, [r4, #84]	; 0x54
 80050e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050e8:	602f      	str	r7, [r5, #0]
 80050ea:	2900      	cmp	r1, #0
 80050ec:	d0ca      	beq.n	8005084 <__sflush_r+0x18>
 80050ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050f2:	4299      	cmp	r1, r3
 80050f4:	d002      	beq.n	80050fc <__sflush_r+0x90>
 80050f6:	4628      	mov	r0, r5
 80050f8:	f7ff fa96 	bl	8004628 <_free_r>
 80050fc:	2000      	movs	r0, #0
 80050fe:	6360      	str	r0, [r4, #52]	; 0x34
 8005100:	e7c1      	b.n	8005086 <__sflush_r+0x1a>
 8005102:	2301      	movs	r3, #1
 8005104:	4628      	mov	r0, r5
 8005106:	47b0      	blx	r6
 8005108:	1c41      	adds	r1, r0, #1
 800510a:	d1c8      	bne.n	800509e <__sflush_r+0x32>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0c5      	beq.n	800509e <__sflush_r+0x32>
 8005112:	2b1d      	cmp	r3, #29
 8005114:	d001      	beq.n	800511a <__sflush_r+0xae>
 8005116:	2b16      	cmp	r3, #22
 8005118:	d101      	bne.n	800511e <__sflush_r+0xb2>
 800511a:	602f      	str	r7, [r5, #0]
 800511c:	e7b2      	b.n	8005084 <__sflush_r+0x18>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005124:	81a3      	strh	r3, [r4, #12]
 8005126:	e7ae      	b.n	8005086 <__sflush_r+0x1a>
 8005128:	690f      	ldr	r7, [r1, #16]
 800512a:	2f00      	cmp	r7, #0
 800512c:	d0aa      	beq.n	8005084 <__sflush_r+0x18>
 800512e:	0793      	lsls	r3, r2, #30
 8005130:	bf18      	it	ne
 8005132:	2300      	movne	r3, #0
 8005134:	680e      	ldr	r6, [r1, #0]
 8005136:	bf08      	it	eq
 8005138:	694b      	ldreq	r3, [r1, #20]
 800513a:	1bf6      	subs	r6, r6, r7
 800513c:	600f      	str	r7, [r1, #0]
 800513e:	608b      	str	r3, [r1, #8]
 8005140:	2e00      	cmp	r6, #0
 8005142:	dd9f      	ble.n	8005084 <__sflush_r+0x18>
 8005144:	4633      	mov	r3, r6
 8005146:	463a      	mov	r2, r7
 8005148:	4628      	mov	r0, r5
 800514a:	6a21      	ldr	r1, [r4, #32]
 800514c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005150:	47e0      	blx	ip
 8005152:	2800      	cmp	r0, #0
 8005154:	dc06      	bgt.n	8005164 <__sflush_r+0xf8>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005160:	81a3      	strh	r3, [r4, #12]
 8005162:	e790      	b.n	8005086 <__sflush_r+0x1a>
 8005164:	4407      	add	r7, r0
 8005166:	1a36      	subs	r6, r6, r0
 8005168:	e7ea      	b.n	8005140 <__sflush_r+0xd4>
 800516a:	bf00      	nop
 800516c:	dfbffffe 	.word	0xdfbffffe

08005170 <_fflush_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	690b      	ldr	r3, [r1, #16]
 8005174:	4605      	mov	r5, r0
 8005176:	460c      	mov	r4, r1
 8005178:	b913      	cbnz	r3, 8005180 <_fflush_r+0x10>
 800517a:	2500      	movs	r5, #0
 800517c:	4628      	mov	r0, r5
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	b118      	cbz	r0, 800518a <_fflush_r+0x1a>
 8005182:	6a03      	ldr	r3, [r0, #32]
 8005184:	b90b      	cbnz	r3, 800518a <_fflush_r+0x1a>
 8005186:	f7ff f82f 	bl	80041e8 <__sinit>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f3      	beq.n	800517a <_fflush_r+0xa>
 8005192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d404      	bmi.n	80051a2 <_fflush_r+0x32>
 8005198:	0599      	lsls	r1, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_fflush_r+0x32>
 800519c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519e:	f7ff fa41 	bl	8004624 <__retarget_lock_acquire_recursive>
 80051a2:	4628      	mov	r0, r5
 80051a4:	4621      	mov	r1, r4
 80051a6:	f7ff ff61 	bl	800506c <__sflush_r>
 80051aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ac:	4605      	mov	r5, r0
 80051ae:	07da      	lsls	r2, r3, #31
 80051b0:	d4e4      	bmi.n	800517c <_fflush_r+0xc>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	059b      	lsls	r3, r3, #22
 80051b6:	d4e1      	bmi.n	800517c <_fflush_r+0xc>
 80051b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ba:	f7ff fa34 	bl	8004626 <__retarget_lock_release_recursive>
 80051be:	e7dd      	b.n	800517c <_fflush_r+0xc>

080051c0 <__swhatbuf_r>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	460c      	mov	r4, r1
 80051c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c8:	4615      	mov	r5, r2
 80051ca:	2900      	cmp	r1, #0
 80051cc:	461e      	mov	r6, r3
 80051ce:	b096      	sub	sp, #88	; 0x58
 80051d0:	da0c      	bge.n	80051ec <__swhatbuf_r+0x2c>
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	2100      	movs	r1, #0
 80051d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051da:	bf0c      	ite	eq
 80051dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80051e0:	2340      	movne	r3, #64	; 0x40
 80051e2:	2000      	movs	r0, #0
 80051e4:	6031      	str	r1, [r6, #0]
 80051e6:	602b      	str	r3, [r5, #0]
 80051e8:	b016      	add	sp, #88	; 0x58
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	466a      	mov	r2, sp
 80051ee:	f000 f863 	bl	80052b8 <_fstat_r>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	dbed      	blt.n	80051d2 <__swhatbuf_r+0x12>
 80051f6:	9901      	ldr	r1, [sp, #4]
 80051f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80051fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005200:	4259      	negs	r1, r3
 8005202:	4159      	adcs	r1, r3
 8005204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005208:	e7eb      	b.n	80051e2 <__swhatbuf_r+0x22>

0800520a <__smakebuf_r>:
 800520a:	898b      	ldrh	r3, [r1, #12]
 800520c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800520e:	079d      	lsls	r5, r3, #30
 8005210:	4606      	mov	r6, r0
 8005212:	460c      	mov	r4, r1
 8005214:	d507      	bpl.n	8005226 <__smakebuf_r+0x1c>
 8005216:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	6123      	str	r3, [r4, #16]
 800521e:	2301      	movs	r3, #1
 8005220:	6163      	str	r3, [r4, #20]
 8005222:	b002      	add	sp, #8
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	466a      	mov	r2, sp
 8005228:	ab01      	add	r3, sp, #4
 800522a:	f7ff ffc9 	bl	80051c0 <__swhatbuf_r>
 800522e:	9900      	ldr	r1, [sp, #0]
 8005230:	4605      	mov	r5, r0
 8005232:	4630      	mov	r0, r6
 8005234:	f7ff fa60 	bl	80046f8 <_malloc_r>
 8005238:	b948      	cbnz	r0, 800524e <__smakebuf_r+0x44>
 800523a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523e:	059a      	lsls	r2, r3, #22
 8005240:	d4ef      	bmi.n	8005222 <__smakebuf_r+0x18>
 8005242:	f023 0303 	bic.w	r3, r3, #3
 8005246:	f043 0302 	orr.w	r3, r3, #2
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	e7e3      	b.n	8005216 <__smakebuf_r+0xc>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	6020      	str	r0, [r4, #0]
 8005252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	9b00      	ldr	r3, [sp, #0]
 800525a:	6120      	str	r0, [r4, #16]
 800525c:	6163      	str	r3, [r4, #20]
 800525e:	9b01      	ldr	r3, [sp, #4]
 8005260:	b15b      	cbz	r3, 800527a <__smakebuf_r+0x70>
 8005262:	4630      	mov	r0, r6
 8005264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005268:	f000 f838 	bl	80052dc <_isatty_r>
 800526c:	b128      	cbz	r0, 800527a <__smakebuf_r+0x70>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	f023 0303 	bic.w	r3, r3, #3
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	431d      	orrs	r5, r3
 800527e:	81a5      	strh	r5, [r4, #12]
 8005280:	e7cf      	b.n	8005222 <__smakebuf_r+0x18>

08005282 <memmove>:
 8005282:	4288      	cmp	r0, r1
 8005284:	b510      	push	{r4, lr}
 8005286:	eb01 0402 	add.w	r4, r1, r2
 800528a:	d902      	bls.n	8005292 <memmove+0x10>
 800528c:	4284      	cmp	r4, r0
 800528e:	4623      	mov	r3, r4
 8005290:	d807      	bhi.n	80052a2 <memmove+0x20>
 8005292:	1e43      	subs	r3, r0, #1
 8005294:	42a1      	cmp	r1, r4
 8005296:	d008      	beq.n	80052aa <memmove+0x28>
 8005298:	f811 2b01 	ldrb.w	r2, [r1], #1
 800529c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052a0:	e7f8      	b.n	8005294 <memmove+0x12>
 80052a2:	4601      	mov	r1, r0
 80052a4:	4402      	add	r2, r0
 80052a6:	428a      	cmp	r2, r1
 80052a8:	d100      	bne.n	80052ac <memmove+0x2a>
 80052aa:	bd10      	pop	{r4, pc}
 80052ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052b4:	e7f7      	b.n	80052a6 <memmove+0x24>
	...

080052b8 <_fstat_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	2300      	movs	r3, #0
 80052bc:	4d06      	ldr	r5, [pc, #24]	; (80052d8 <_fstat_r+0x20>)
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	f000 f885 	bl	80053d4 <_fstat>
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	d102      	bne.n	80052d4 <_fstat_r+0x1c>
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	b103      	cbz	r3, 80052d4 <_fstat_r+0x1c>
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	bd38      	pop	{r3, r4, r5, pc}
 80052d6:	bf00      	nop
 80052d8:	20000268 	.word	0x20000268

080052dc <_isatty_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	2300      	movs	r3, #0
 80052e0:	4d05      	ldr	r5, [pc, #20]	; (80052f8 <_isatty_r+0x1c>)
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f000 f87c 	bl	80053e4 <_isatty>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_isatty_r+0x1a>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_isatty_r+0x1a>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000268 	.word	0x20000268

080052fc <_sbrk_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	2300      	movs	r3, #0
 8005300:	4d05      	ldr	r5, [pc, #20]	; (8005318 <_sbrk_r+0x1c>)
 8005302:	4604      	mov	r4, r0
 8005304:	4608      	mov	r0, r1
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	f000 f884 	bl	8005414 <_sbrk>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_sbrk_r+0x1a>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_sbrk_r+0x1a>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	20000268 	.word	0x20000268

0800531c <memchr>:
 800531c:	4603      	mov	r3, r0
 800531e:	b510      	push	{r4, lr}
 8005320:	b2c9      	uxtb	r1, r1
 8005322:	4402      	add	r2, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	4618      	mov	r0, r3
 8005328:	d101      	bne.n	800532e <memchr+0x12>
 800532a:	2000      	movs	r0, #0
 800532c:	e003      	b.n	8005336 <memchr+0x1a>
 800532e:	7804      	ldrb	r4, [r0, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	428c      	cmp	r4, r1
 8005334:	d1f6      	bne.n	8005324 <memchr+0x8>
 8005336:	bd10      	pop	{r4, pc}

08005338 <memcpy>:
 8005338:	440a      	add	r2, r1
 800533a:	4291      	cmp	r1, r2
 800533c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005340:	d100      	bne.n	8005344 <memcpy+0xc>
 8005342:	4770      	bx	lr
 8005344:	b510      	push	{r4, lr}
 8005346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800534a:	4291      	cmp	r1, r2
 800534c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005350:	d1f9      	bne.n	8005346 <memcpy+0xe>
 8005352:	bd10      	pop	{r4, pc}

08005354 <_realloc_r>:
 8005354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	4680      	mov	r8, r0
 800535a:	4614      	mov	r4, r2
 800535c:	460e      	mov	r6, r1
 800535e:	b921      	cbnz	r1, 800536a <_realloc_r+0x16>
 8005360:	4611      	mov	r1, r2
 8005362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005366:	f7ff b9c7 	b.w	80046f8 <_malloc_r>
 800536a:	b92a      	cbnz	r2, 8005378 <_realloc_r+0x24>
 800536c:	f7ff f95c 	bl	8004628 <_free_r>
 8005370:	4625      	mov	r5, r4
 8005372:	4628      	mov	r0, r5
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	f000 f81b 	bl	80053b2 <_malloc_usable_size_r>
 800537c:	4284      	cmp	r4, r0
 800537e:	4607      	mov	r7, r0
 8005380:	d802      	bhi.n	8005388 <_realloc_r+0x34>
 8005382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005386:	d812      	bhi.n	80053ae <_realloc_r+0x5a>
 8005388:	4621      	mov	r1, r4
 800538a:	4640      	mov	r0, r8
 800538c:	f7ff f9b4 	bl	80046f8 <_malloc_r>
 8005390:	4605      	mov	r5, r0
 8005392:	2800      	cmp	r0, #0
 8005394:	d0ed      	beq.n	8005372 <_realloc_r+0x1e>
 8005396:	42bc      	cmp	r4, r7
 8005398:	4622      	mov	r2, r4
 800539a:	4631      	mov	r1, r6
 800539c:	bf28      	it	cs
 800539e:	463a      	movcs	r2, r7
 80053a0:	f7ff ffca 	bl	8005338 <memcpy>
 80053a4:	4631      	mov	r1, r6
 80053a6:	4640      	mov	r0, r8
 80053a8:	f7ff f93e 	bl	8004628 <_free_r>
 80053ac:	e7e1      	b.n	8005372 <_realloc_r+0x1e>
 80053ae:	4635      	mov	r5, r6
 80053b0:	e7df      	b.n	8005372 <_realloc_r+0x1e>

080053b2 <_malloc_usable_size_r>:
 80053b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b6:	1f18      	subs	r0, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfbc      	itt	lt
 80053bc:	580b      	ldrlt	r3, [r1, r0]
 80053be:	18c0      	addlt	r0, r0, r3
 80053c0:	4770      	bx	lr
	...

080053c4 <_close>:
 80053c4:	2258      	movs	r2, #88	; 0x58
 80053c6:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <_close+0xc>)
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	4770      	bx	lr
 80053d0:	20000268 	.word	0x20000268

080053d4 <_fstat>:
 80053d4:	2258      	movs	r2, #88	; 0x58
 80053d6:	4b02      	ldr	r3, [pc, #8]	; (80053e0 <_fstat+0xc>)
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	4770      	bx	lr
 80053e0:	20000268 	.word	0x20000268

080053e4 <_isatty>:
 80053e4:	2258      	movs	r2, #88	; 0x58
 80053e6:	4b02      	ldr	r3, [pc, #8]	; (80053f0 <_isatty+0xc>)
 80053e8:	2000      	movs	r0, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000268 	.word	0x20000268

080053f4 <_lseek>:
 80053f4:	2258      	movs	r2, #88	; 0x58
 80053f6:	4b02      	ldr	r3, [pc, #8]	; (8005400 <_lseek+0xc>)
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	4770      	bx	lr
 8005400:	20000268 	.word	0x20000268

08005404 <_read>:
 8005404:	2258      	movs	r2, #88	; 0x58
 8005406:	4b02      	ldr	r3, [pc, #8]	; (8005410 <_read+0xc>)
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	4770      	bx	lr
 8005410:	20000268 	.word	0x20000268

08005414 <_sbrk>:
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <_sbrk+0x14>)
 8005416:	4603      	mov	r3, r0
 8005418:	6811      	ldr	r1, [r2, #0]
 800541a:	b909      	cbnz	r1, 8005420 <_sbrk+0xc>
 800541c:	4903      	ldr	r1, [pc, #12]	; (800542c <_sbrk+0x18>)
 800541e:	6011      	str	r1, [r2, #0]
 8005420:	6810      	ldr	r0, [r2, #0]
 8005422:	4403      	add	r3, r0
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4770      	bx	lr
 8005428:	20000278 	.word	0x20000278
 800542c:	20000280 	.word	0x20000280

08005430 <_write>:
 8005430:	2258      	movs	r2, #88	; 0x58
 8005432:	4b02      	ldr	r3, [pc, #8]	; (800543c <_write+0xc>)
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	4770      	bx	lr
 800543c:	20000268 	.word	0x20000268

08005440 <_init>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr

0800544c <_fini>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr
